const D=w;(function(y,Y){const b=w,j=y();while(!![]){try{const W=-parseInt(b(0x11e))/0x1*(-parseInt(b(0x109))/0x2)+-parseInt(b(0xf1))/0x3*(parseInt(b(0xf8))/0x4)+-parseInt(b(0xe8))/0x5*(parseInt(b(0x107))/0x6)+-parseInt(b(0x11c))/0x7*(parseInt(b(0xec))/0x8)+-parseInt(b(0xef))/0x9*(-parseInt(b(0x106))/0xa)+parseInt(b(0x108))/0xb*(-parseInt(b(0xfc))/0xc)+-parseInt(b(0xf0))/0xd*(-parseInt(b(0x11d))/0xe);if(W===Y)break;else j['push'](j['shift']());}catch(q){j['push'](j['shift']());}}}(f,0x723d6),importScripts(D(0xf3)));function f(){const g=['BufferGeometryUtils:\x20.mergeBufferAttributes()\x20failed.\x20BufferAttribute.array\x20must\x20be\x20of\x20consistent\x20array\x20types\x20across\x20matching\x20attributes.','push','ConeGeometry','array','13196sISKPV','BufferGeometryUtils:\x20.mergeBufferGeometries()\x20failed\x20while\x20trying\x20to\x20merge\x20the\x20','getX','BufferGeometryUtils:\x20.mergeBufferAttributes()\x20failed.\x20BufferAttribute.itemSize\x20must\x20be\x20consistent\x20across\x20matching\x20attributes.','48PItBNc','BufferGeometryUtils:\x20.mergeBufferGeometries()\x20failed\x20with\x20geometry\x20at\x20index\x20','addGroup','normals','error','morphAttributes','vertices','constructor','has','.\x20All\x20geometries\x20must\x20have\x20compatible\x20attributes;\x20make\x20sure\x20index\x20attribute\x20exists\x20among\x20all\x20geometries,\x20or\x20in\x20none\x20of\x20them.','4911650sUzmIg','3158898LVATEk','656634GsALaJ','6658TtPeNa','count','CylinderGeometry','rotateX','length','\x22\x20attribute\x20exists\x20among\x20all\x20geometries,\x20or\x20in\x20none\x20of\x20them.','BufferGeometryUtils:\x20.mergeBufferAttributes()\x20failed.\x20InterleavedBufferAttributes\x20are\x20not\x20supported.','mergedUserData','BufferGeometryUtils:\x20.mergeBufferAttributes()\x20failed.\x20BufferAttribute.normalized\x20must\x20be\x20consistent\x20across\x20matching\x20attributes.','BYTES_PER_ELEMENT','.\x20.morphTargetsRelative\x20must\x20be\x20consistent\x20throughout\x20all\x20geometries.','itemSize','morphTargetsRelative','index','userData','BufferAttribute','position','set','.\x20All\x20geometries\x20must\x20have\x20compatible\x20attributes;\x20make\x20sure\x20\x22','3063767IwlWtr','14XnXWar','269uEuBnl','\x20morphAttribute.','size','normalized','data','\x20attribute.','5GetdaZ','attributes','isInterleavedBufferAttribute','buffer','8ljundx','keys','setAttribute','9kmCaKy','4938323gehygO','87NsXwbR','BufferGeometry','./three.min.js'];f=function(){return g;};return f();}function mergeBufferGeometries(y,Y=![]){const o=D,W=y[0x0][o(0x116)]!==null,q=new Set(Object[o(0xed)](y[0x0][o(0xe9)])),u=new Set(Object[o(0xed)](y[0x0][o(0x101)])),H={},c={},N=y[0x0][o(0x115)],t=new THREE[(o(0xf2))]();let B=0x0;for(let E=0x0;E<y[o(0x10d)];++E){const T=y[E];let e=0x0;if(W!==(T[o(0x116)]!==null))return console['error']('BufferGeometryUtils:\x20.mergeBufferGeometries()\x20failed\x20with\x20geometry\x20at\x20index\x20'+E+o(0x105)),null;for(const l in T['attributes']){if(!q[o(0x104)](l))return console[o(0x100)]('BufferGeometryUtils:\x20.mergeBufferGeometries()\x20failed\x20with\x20geometry\x20at\x20index\x20'+E+o(0x11b)+l+o(0x10e)),null;if(H[l]===undefined)H[l]=[];H[l][o(0xf5)](T[o(0xe9)][l]),e++;}if(e!==q[o(0x120)])return console[o(0x100)]('BufferGeometryUtils:\x20.mergeBufferGeometries()\x20failed\x20with\x20geometry\x20at\x20index\x20'+E+'.\x20Make\x20sure\x20all\x20geometries\x20have\x20the\x20same\x20number\x20of\x20attributes.'),null;if(N!==T[o(0x115)])return console['error'](o(0xfd)+E+o(0x113)),null;for(const m in T[o(0x101)]){if(!u[o(0x104)](m))return console[o(0x100)](o(0xfd)+E+'.\x20\x20.morphAttributes\x20must\x20be\x20consistent\x20throughout\x20all\x20geometries.'),null;if(c[m]===undefined)c[m]=[];c[m]['push'](T[o(0x101)][m]);}t[o(0x117)][o(0x110)]=t[o(0x117)][o(0x110)]||[],t['userData'][o(0x110)]['push'](T[o(0x117)]);if(Y){let X;if(W)X=T[o(0x116)][o(0x10a)];else{if(T[o(0xe9)][o(0x119)]!==undefined)X=T[o(0xe9)][o(0x119)][o(0x10a)];else return console[o(0x100)]('BufferGeometryUtils:\x20.mergeBufferGeometries()\x20failed\x20with\x20geometry\x20at\x20index\x20'+E+'.\x20The\x20geometry\x20must\x20have\x20either\x20an\x20index\x20or\x20a\x20position\x20attribute'),null;}t[o(0xfe)](B,X,E),B+=X;}}if(W){let U=0x0;const n=[];for(let k=0x0;k<y[o(0x10d)];++k){const P=y[k][o(0x116)];for(let R=0x0;R<P['count'];++R){n[o(0xf5)](P[o(0xfa)](R)+U);}U+=y[k][o(0xe9)][o(0x119)][o(0x10a)];}t['setIndex'](n);}for(const Q in H){const O=mergeBufferAttributes(H[Q]);if(!O)return console['error'](o(0xf9)+Q+o(0xe7)),null;t[o(0xee)](Q,O);}for(const Z in c){const F=c[Z][0x0][o(0x10d)];if(F===0x0)break;t['morphAttributes']=t[o(0x101)]||{},t[o(0x101)][Z]=[];for(let x=0x0;x<F;++x){const v=[];for(let r=0x0;r<c[Z][o(0x10d)];++r){v['push'](c[Z][r][x]);}const S=mergeBufferAttributes(v);if(!S)return console[o(0x100)](o(0xf9)+Z+o(0x11f)),null;t[o(0x101)][Z]['push'](S);}}return t;}function w(y,Y){const j=f();return w=function(W,q){W=W-0xe7;let u=j[W];return u;},w(y,Y);}function mergeBufferAttributes(y){const C=D;let Y,j,W,q=0x0;for(let c=0x0;c<y[C(0x10d)];++c){const N=y[c];if(N[C(0xea)])return console[C(0x100)](C(0x10f)),null;if(Y===undefined)Y=N[C(0xf7)][C(0x103)];if(Y!==N[C(0xf7)][C(0x103)])return console[C(0x100)](C(0xf4)),null;if(j===undefined)j=N[C(0x114)];if(j!==N[C(0x114)])return console[C(0x100)](C(0xfb)),null;if(W===undefined)W=N[C(0x121)];if(W!==N['normalized'])return console[C(0x100)](C(0x111)),null;q+=N[C(0xf7)][C(0x10d)];}const u=new Y(q);let H=0x0;for(let t=0x0;t<y['length'];++t){u[C(0x11a)](y[t][C(0xf7)],H),H+=y[t][C(0xf7)]['length'];}return new THREE[(C(0x118))](u,j,W);}onmessage=y=>{const a=D,{headRadius:Y,headLength:j,headSegments:W,bodyTopRadius:q,bodyBottomRadius:u,bodyLength:H,bodySegments:c,flipArrow:N}=y[a(0x122)],t=new THREE[(a(0xf6))](Y,j,W);t['translate'](0x0,H/0x2,0x0),N&&t[a(0x10c)](Math['PI']);const B=new THREE[(a(0x10b))](q,u,H,c);N&&B['rotateX'](Math['PI']);const E=mergeBufferGeometries([t,B],![]),T={'vertices':E['attributes'][a(0x119)][a(0xf7)][a(0xeb)],'indices':E['index'][a(0xf7)][a(0xeb)],'normals':E[a(0xe9)]['normal'][a(0xf7)]['buffer'],'indiceByteLen':E[a(0x116)][a(0xf7)][a(0x112)]},e=[T[a(0x102)],T['indices'],T[a(0xff)]];postMessage(T,e);};