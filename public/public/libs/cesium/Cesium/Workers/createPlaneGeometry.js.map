{"version":3,"file":"createPlaneGeometry.js","sources":["../../../../Source/Core/PlaneGeometry.js","../../../../Source/WorkersES6/createPlaneGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * Describes geometry representing a plane centered at the origin, with a unit width and length.\n *\n * @alias PlaneGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @example\n * var planeGeometry = new Cesium.PlaneGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n */\nfunction PlaneGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  this._vertexFormat = vertexFormat;\n  this._workerName = \"createPlaneGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nPlaneGeometry.packedLength = VertexFormat.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PlaneGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPlaneGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n\n  return array;\n};\n\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  vertexFormat: scratchVertexFormat,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PlaneGeometry} [result] The object into which to store the result.\n * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n */\nPlaneGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n\n  if (!defined(result)) {\n    return new PlaneGeometry(scratchOptions);\n  }\n\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n\n  return result;\n};\n\nvar min = new Cartesian3(-0.5, -0.5, 0.0);\nvar max = new Cartesian3(0.5, 0.5, 0.0);\n\n/**\n * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n *\n * @param {PlaneGeometry} planeGeometry A description of the plane.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPlaneGeometry.createGeometry = function (planeGeometry) {\n  var vertexFormat = planeGeometry._vertexFormat;\n\n  var attributes = new GeometryAttributes();\n  var indices;\n  var positions;\n\n  if (vertexFormat.position) {\n    // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n    positions = new Float64Array(4 * 3);\n\n    // +z face\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = 0.0;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = 0.0;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = 0.0;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = 0.0;\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n\n    if (vertexFormat.normal) {\n      var normals = new Float32Array(4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.st) {\n      var texCoords = new Float32Array(4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      var tangents = new Float32Array(4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      var bitangents = new Float32Array(4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    // 2 triangles\n    indices = new Uint16Array(2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\n  });\n};\nexport default PlaneGeometry;\n","import defined from \"../Core/defined.js\";\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\n\nfunction createPlaneGeometry(planeGeometry, offset) {\n  if (defined(offset)) {\n    planeGeometry = PlaneGeometry.unpack(planeGeometry, offset);\n  }\n  return PlaneGeometry.createGeometry(planeGeometry);\n}\nexport default createPlaneGeometry;\n"],"names":["PlaneGeometry","options","defaultValue","EMPTY_OBJECT","vertexFormat","VertexFormat","DEFAULT","this","_vertexFormat","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","defined","scratchVertexFormat","scratchOptions","unpack","result","clone","min","Cartesian3","max","createGeometry","planeGeometry","tangents","bitangents","attributes","GeometryAttributes","position","positions","Float64Array","x","y","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","normal","normals","Float32Array","FLOAT","st","texCoords","tangent","bitangent","indices","Uint16Array","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","ZERO","Math","sqrt","offset"],"mappings":"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"}