{"version":3,"file":"WallGeometryLibrary-7769d0a3.js","sources":["../../../../Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\n\n/**\n * @private\n */\nvar WallGeometryLibrary = {};\n\nfunction latLonEquals(c0, c1) {\n  return (\n    CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON10) &&\n    CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON10)\n  );\n}\n\nvar scratchCartographic1 = new Cartographic();\nvar scratchCartographic2 = new Cartographic();\nfunction removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\n  positions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n  var length = positions.length;\n  if (length < 2) {\n    return;\n  }\n\n  var hasBottomHeights = defined(bottomHeights);\n  var hasTopHeights = defined(topHeights);\n\n  var cleanedPositions = new Array(length);\n  var cleanedTopHeights = new Array(length);\n  var cleanedBottomHeights = new Array(length);\n\n  var v0 = positions[0];\n  cleanedPositions[0] = v0;\n\n  var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\n  if (hasTopHeights) {\n    c0.height = topHeights[0];\n  }\n\n  cleanedTopHeights[0] = c0.height;\n\n  if (hasBottomHeights) {\n    cleanedBottomHeights[0] = bottomHeights[0];\n  } else {\n    cleanedBottomHeights[0] = 0.0;\n  }\n\n  var startTopHeight = cleanedTopHeights[0];\n  var startBottomHeight = cleanedBottomHeights[0];\n  var hasAllSameHeights = startTopHeight === startBottomHeight;\n\n  var index = 1;\n  for (var i = 1; i < length; ++i) {\n    var v1 = positions[i];\n    var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\n    if (hasTopHeights) {\n      c1.height = topHeights[i];\n    }\n    hasAllSameHeights = hasAllSameHeights && c1.height === 0;\n\n    if (!latLonEquals(c0, c1)) {\n      cleanedPositions[index] = v1; // Shallow copy!\n      cleanedTopHeights[index] = c1.height;\n\n      if (hasBottomHeights) {\n        cleanedBottomHeights[index] = bottomHeights[i];\n      } else {\n        cleanedBottomHeights[index] = 0.0;\n      }\n      hasAllSameHeights =\n        hasAllSameHeights &&\n        cleanedTopHeights[index] === cleanedBottomHeights[index];\n\n      Cartographic.clone(c1, c0);\n      ++index;\n    } else if (c0.height < c1.height) {\n      // two adjacent positions are the same, so use whichever has the greater height\n      cleanedTopHeights[index - 1] = c1.height;\n    }\n  }\n\n  if (hasAllSameHeights || index < 2) {\n    return;\n  }\n\n  cleanedPositions.length = index;\n  cleanedTopHeights.length = index;\n  cleanedBottomHeights.length = index;\n\n  return {\n    positions: cleanedPositions,\n    topHeights: cleanedTopHeights,\n    bottomHeights: cleanedBottomHeights,\n  };\n}\n\nvar positionsArrayScratch = new Array(2);\nvar heightsArrayScratch = new Array(2);\nvar generateArcOptionsScratch = {\n  positions: undefined,\n  height: undefined,\n  granularity: undefined,\n  ellipsoid: undefined,\n};\n\n/**\n * @private\n */\nWallGeometryLibrary.computePositions = function (\n  ellipsoid,\n  wallPositions,\n  maximumHeights,\n  minimumHeights,\n  granularity,\n  duplicateCorners\n) {\n  var o = removeDuplicates(\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights\n  );\n\n  if (!defined(o)) {\n    return;\n  }\n\n  wallPositions = o.positions;\n  maximumHeights = o.topHeights;\n  minimumHeights = o.bottomHeights;\n\n  var length = wallPositions.length;\n  var numCorners = length - 2;\n  var topPositions;\n  var bottomPositions;\n\n  var minDistance = CesiumMath.chordLength(\n    granularity,\n    ellipsoid.maximumRadius\n  );\n\n  var generateArcOptions = generateArcOptionsScratch;\n  generateArcOptions.minDistance = minDistance;\n  generateArcOptions.ellipsoid = ellipsoid;\n\n  if (duplicateCorners) {\n    var count = 0;\n    var i;\n\n    for (i = 0; i < length - 1; i++) {\n      count +=\n        PolylinePipeline.numberOfPoints(\n          wallPositions[i],\n          wallPositions[i + 1],\n          minDistance\n        ) + 1;\n    }\n\n    topPositions = new Float64Array(count * 3);\n    bottomPositions = new Float64Array(count * 3);\n\n    var generateArcPositions = positionsArrayScratch;\n    var generateArcHeights = heightsArrayScratch;\n    generateArcOptions.positions = generateArcPositions;\n    generateArcOptions.height = generateArcHeights;\n\n    var offset = 0;\n    for (i = 0; i < length - 1; i++) {\n      generateArcPositions[0] = wallPositions[i];\n      generateArcPositions[1] = wallPositions[i + 1];\n\n      generateArcHeights[0] = maximumHeights[i];\n      generateArcHeights[1] = maximumHeights[i + 1];\n\n      var pos = PolylinePipeline.generateArc(generateArcOptions);\n      topPositions.set(pos, offset);\n\n      generateArcHeights[0] = minimumHeights[i];\n      generateArcHeights[1] = minimumHeights[i + 1];\n\n      bottomPositions.set(\n        PolylinePipeline.generateArc(generateArcOptions),\n        offset\n      );\n\n      offset += pos.length;\n    }\n  } else {\n    generateArcOptions.positions = wallPositions;\n    generateArcOptions.height = maximumHeights;\n    topPositions = new Float64Array(\n      PolylinePipeline.generateArc(generateArcOptions)\n    );\n\n    generateArcOptions.height = minimumHeights;\n    bottomPositions = new Float64Array(\n      PolylinePipeline.generateArc(generateArcOptions)\n    );\n  }\n\n  return {\n    bottomPositions: bottomPositions,\n    topPositions: topPositions,\n    numCorners: numCorners,\n  };\n};\nexport default WallGeometryLibrary;\n"],"names":["WallGeometryLibrary","scratchCartographic1","Cartographic","scratchCartographic2","removeDuplicates","ellipsoid","positions","topHeights","bottomHeights","length","arrayRemoveDuplicates","Cartesian3","equalsEpsilon","hasBottomHeights","defined","hasTopHeights","cleanedPositions","Array","cleanedTopHeights","cleanedBottomHeights","v0","c0","cartesianToCartographic","height","c1","hasAllSameHeights","index","i","v1","CesiumMath","latitude","EPSILON10","longitude","clone","positionsArrayScratch","heightsArrayScratch","generateArcOptionsScratch","undefined","granularity","computePositions","wallPositions","maximumHeights","minimumHeights","duplicateCorners","o","numCorners","minDistance","chordLength","maximumRadius","generateArcOptions","count","PolylinePipeline","numberOfPoints","topPositions","Float64Array","bottomPositions","generateArcPositions","generateArcHeights","offset","pos","generateArc","set"],"mappings":"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"}