{"version":3,"file":"createSphereGeometry.js","sources":["../../../../Source/Core/SphereGeometry.js","../../../../Source/WorkersES6/createSphereGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a sphere centered at the origin.\n *\n * @alias SphereGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.radius=1.0] The radius of the sphere.\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n *\n * @see SphereGeometry#createGeometry\n *\n * @example\n * var sphere = new Cesium.SphereGeometry({\n *   radius : 100.0,\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n * });\n * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\n */\nfunction SphereGeometry(options) {\n  var radius = defaultValue(options.radius, 1.0);\n  var radii = new Cartesian3(radius, radius, radius);\n  var ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    vertexFormat: options.vertexFormat,\n  };\n\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nSphereGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\n};\n\nvar scratchEllipsoidGeometry = new EllipsoidGeometry();\nvar scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  vertexFormat: new VertexFormat(),\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereGeometry} [result] The object into which to store the result.\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\n */\nSphereGeometry.unpack = function (array, startingIndex, result) {\n  var ellipsoidGeometry = EllipsoidGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipsoidGeometry\n  );\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipsoidGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nSphereGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\n};\nexport default SphereGeometry;\n","import defined from \"../Core/defined.js\";\nimport SphereGeometry from \"../Core/SphereGeometry.js\";\n\nfunction createSphereGeometry(sphereGeometry, offset) {\n  if (defined(offset)) {\n    sphereGeometry = SphereGeometry.unpack(sphereGeometry, offset);\n  }\n  return SphereGeometry.createGeometry(sphereGeometry);\n}\nexport default createSphereGeometry;\n"],"names":["SphereGeometry","options","radius","defaultValue","ellipsoidOptions","radii","Cartesian3","stackPartitions","slicePartitions","vertexFormat","this","_ellipsoidGeometry","EllipsoidGeometry","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","VertexFormat","unpack","result","ellipsoidGeometry","clone","_vertexFormat","_stackPartitions","_slicePartitions","defined","_radii","x","createGeometry","sphereGeometry","offset"],"mappings":"gbA+BA,SAASA,EAAeC,GACtB,IAAIC,EAASC,eAAaF,EAAQC,OAAQ,GAEtCE,EAAmB,CACrBC,MAFU,IAAIC,aAAWJ,EAAQA,EAAQA,GAGzCK,gBAAiBN,EAAQM,gBACzBC,gBAAiBP,EAAQO,gBACzBC,aAAcR,EAAQQ,cAGxBC,KAAKC,mBAAqB,IAAIC,oBAAkBR,GAChDM,KAAKG,YAAc,uBAOrBb,EAAec,aAAeF,oBAAkBE,aAWhDd,EAAee,KAAO,SAAUC,EAAOC,EAAOC,GAK5C,OAHAC,QAAMC,OAAOC,OAAO,QAASL,GAGtBJ,oBAAkBG,KAAKC,EAAML,mBAAoBM,EAAOC,IAGjE,IAAII,EAA2B,IAAIV,oBAC/BW,EAAiB,CACnBrB,YAAQsB,EACRnB,MAAO,IAAIC,aACXG,aAAc,IAAIgB,eAClBlB,qBAAiBiB,EACjBhB,qBAAiBgB,UAWnBxB,EAAe0B,OAAS,SAAUT,EAAOC,EAAeS,GAClDC,EAAoBhB,oBAAkBc,OACxCT,EACAC,EACAI,GASF,OAPAC,EAAed,aAAegB,eAAaI,MACzCD,EAAkBE,cAClBP,EAAed,cAEjBc,EAAehB,gBAAkBqB,EAAkBG,iBACnDR,EAAef,gBAAkBoB,EAAkBI,iBAE9CC,UAAQN,IAKbrB,aAAWuB,MAAMD,EAAkBM,OAAQX,EAAelB,OAC1DsB,EAAOhB,mBAAqB,IAAIC,oBAAkBW,GAC3CI,IANLJ,EAAerB,OAAS0B,EAAkBM,OAAOC,EAC1C,IAAInC,EAAeuB,KAc9BvB,EAAeoC,eAAiB,SAAUC,GACxC,OAAOzB,oBAAkBwB,eAAeC,EAAe1B,qBChHzD,SAA8B0B,EAAgBC,GAI5C,OAHIL,UAAQK,KACVD,EAAiBrC,EAAe0B,OAAOW,EAAgBC,IAElDtC,EAAeoC,eAAeC"}