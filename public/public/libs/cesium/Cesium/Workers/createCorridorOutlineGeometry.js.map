{"version":3,"file":"createCorridorOutlineGeometry.js","sources":["../../../../Source/Core/CorridorOutlineGeometry.js","../../../../Source/WorkersES6/createCorridorOutlineGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport CorridorGeometryLibrary from \"./CorridorGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nvar cartesian1 = new Cartesian3();\nvar cartesian2 = new Cartesian3();\nvar cartesian3 = new Cartesian3();\n\nfunction scaleToSurface(positions, ellipsoid) {\n  for (var i = 0; i < positions.length; i++) {\n    positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n  }\n  return positions;\n}\n\nfunction combine(computedPositions, cornerType) {\n  var wallIndices = [];\n  var positions = computedPositions.positions;\n  var corners = computedPositions.corners;\n  var endPositions = computedPositions.endPositions;\n  var attributes = new GeometryAttributes();\n  var corner;\n  var leftCount = 0;\n  var rightCount = 0;\n  var i;\n  var indicesLength = 0;\n  var length;\n  for (i = 0; i < positions.length; i += 2) {\n    length = positions[i].length - 3;\n    leftCount += length; //subtracting 3 to account for duplicate points at corners\n    indicesLength += (length / 3) * 4;\n    rightCount += positions[i + 1].length - 3;\n  }\n  leftCount += 3; //add back count for end positions\n  rightCount += 3;\n  for (i = 0; i < corners.length; i++) {\n    corner = corners[i];\n    var leftSide = corners[i].leftPositions;\n    if (defined(leftSide)) {\n      length = leftSide.length;\n      leftCount += length;\n      indicesLength += (length / 3) * 2;\n    } else {\n      length = corners[i].rightPositions.length;\n      rightCount += length;\n      indicesLength += (length / 3) * 2;\n    }\n  }\n\n  var addEndPositions = defined(endPositions);\n  var endPositionLength;\n  if (addEndPositions) {\n    endPositionLength = endPositions[0].length - 3;\n    leftCount += endPositionLength;\n    rightCount += endPositionLength;\n    endPositionLength /= 3;\n    indicesLength += endPositionLength * 4;\n  }\n  var size = leftCount + rightCount;\n  var finalPositions = new Float64Array(size);\n  var front = 0;\n  var back = size - 1;\n  var UL, LL, UR, LR;\n  var rightPos, leftPos;\n  var halfLength = endPositionLength / 2;\n\n  var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\n  var index = 0;\n\n  indices[index++] = front / 3;\n  indices[index++] = (back - 2) / 3;\n  if (addEndPositions) {\n    // add rounded end\n    wallIndices.push(front / 3);\n    leftPos = cartesian1;\n    rightPos = cartesian2;\n    var firstEndPositions = endPositions[0];\n    for (i = 0; i < halfLength; i++) {\n      leftPos = Cartesian3.fromArray(\n        firstEndPositions,\n        (halfLength - 1 - i) * 3,\n        leftPos\n      );\n      rightPos = Cartesian3.fromArray(\n        firstEndPositions,\n        (halfLength + i) * 3,\n        rightPos\n      );\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n      CorridorGeometryLibrary.addAttribute(\n        finalPositions,\n        leftPos,\n        undefined,\n        back\n      );\n\n      LL = front / 3;\n      LR = LL + 1;\n      UL = (back - 2) / 3;\n      UR = UL - 1;\n      indices[index++] = UL;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n  }\n\n  var posIndex = 0;\n  var rightEdge = positions[posIndex++]; //add first two edges\n  var leftEdge = positions[posIndex++];\n  finalPositions.set(rightEdge, front);\n  finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n  length = leftEdge.length - 3;\n  wallIndices.push(front / 3, (back - 2) / 3);\n  for (i = 0; i < length; i += 3) {\n    LL = front / 3;\n    LR = LL + 1;\n    UL = (back - 2) / 3;\n    UR = UL - 1;\n    indices[index++] = UL;\n    indices[index++] = UR;\n    indices[index++] = LL;\n    indices[index++] = LR;\n\n    front += 3;\n    back -= 3;\n  }\n\n  for (i = 0; i < corners.length; i++) {\n    var j;\n    corner = corners[i];\n    var l = corner.leftPositions;\n    var r = corner.rightPositions;\n    var start;\n    var outsidePoint = cartesian3;\n    if (defined(l)) {\n      back -= 3;\n      start = UR;\n      wallIndices.push(LR);\n      for (j = 0; j < l.length / 3; j++) {\n        outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n        indices[index++] = start - j - 1;\n        indices[index++] = start - j;\n        CorridorGeometryLibrary.addAttribute(\n          finalPositions,\n          outsidePoint,\n          undefined,\n          back\n        );\n        back -= 3;\n      }\n      wallIndices.push(start - Math.floor(l.length / 6));\n      if (cornerType === CornerType.BEVELED) {\n        wallIndices.push((back - 2) / 3 + 1);\n      }\n      front += 3;\n    } else {\n      front += 3;\n      start = LR;\n      wallIndices.push(UR);\n      for (j = 0; j < r.length / 3; j++) {\n        outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n        indices[index++] = start + j;\n        indices[index++] = start + j + 1;\n        CorridorGeometryLibrary.addAttribute(\n          finalPositions,\n          outsidePoint,\n          front\n        );\n        front += 3;\n      }\n      wallIndices.push(start + Math.floor(r.length / 6));\n      if (cornerType === CornerType.BEVELED) {\n        wallIndices.push(front / 3 - 1);\n      }\n      back -= 3;\n    }\n    rightEdge = positions[posIndex++];\n    leftEdge = positions[posIndex++];\n    rightEdge.splice(0, 3); //remove duplicate points added by corner\n    leftEdge.splice(leftEdge.length - 3, 3);\n    finalPositions.set(rightEdge, front);\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\n    length = leftEdge.length - 3;\n\n    for (j = 0; j < leftEdge.length; j += 3) {\n      LR = front / 3;\n      LL = LR - 1;\n      UR = (back - 2) / 3;\n      UL = UR + 1;\n      indices[index++] = UL;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n      front += 3;\n      back -= 3;\n    }\n    front -= 3;\n    back += 3;\n    wallIndices.push(front / 3, (back - 2) / 3);\n  }\n\n  if (addEndPositions) {\n    // add rounded end\n    front += 3;\n    back -= 3;\n    leftPos = cartesian1;\n    rightPos = cartesian2;\n    var lastEndPositions = endPositions[1];\n    for (i = 0; i < halfLength; i++) {\n      leftPos = Cartesian3.fromArray(\n        lastEndPositions,\n        (endPositionLength - i - 1) * 3,\n        leftPos\n      );\n      rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n      CorridorGeometryLibrary.addAttribute(\n        finalPositions,\n        leftPos,\n        undefined,\n        back\n      );\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n\n      LR = front / 3;\n      LL = LR - 1;\n      UR = (back - 2) / 3;\n      UL = UR + 1;\n      indices[index++] = UL;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n\n    wallIndices.push(front / 3);\n  } else {\n    wallIndices.push(front / 3, (back - 2) / 3);\n  }\n  indices[index++] = front / 3;\n  indices[index++] = (back - 2) / 3;\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: finalPositions,\n  });\n\n  return {\n    attributes: attributes,\n    indices: indices,\n    wallIndices: wallIndices,\n  };\n}\n\nfunction computePositionsExtruded(params) {\n  var ellipsoid = params.ellipsoid;\n  var computedPositions = CorridorGeometryLibrary.computePositions(params);\n  var attr = combine(computedPositions, params.cornerType);\n  var wallIndices = attr.wallIndices;\n  var height = params.height;\n  var extrudedHeight = params.extrudedHeight;\n  var attributes = attr.attributes;\n  var indices = attr.indices;\n  var positions = attributes.position.values;\n  var length = positions.length;\n  var extrudedPositions = new Float64Array(length);\n  extrudedPositions.set(positions);\n  var newPositions = new Float64Array(length * 2);\n\n  positions = PolygonPipeline.scaleToGeodeticHeight(\n    positions,\n    height,\n    ellipsoid\n  );\n  extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(\n    extrudedPositions,\n    extrudedHeight,\n    ellipsoid\n  );\n  newPositions.set(positions);\n  newPositions.set(extrudedPositions, length);\n  attributes.position.values = newPositions;\n\n  length /= 3;\n  if (defined(params.offsetAttribute)) {\n    var applyOffset = new Uint8Array(length * 2);\n    if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      applyOffset = arrayFill(applyOffset, 1, 0, length);\n    } else {\n      var applyOffsetValue =\n        params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      applyOffset = arrayFill(applyOffset, applyOffsetValue);\n    }\n\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  var i;\n  var iLength = indices.length;\n  var newIndices = IndexDatatype.createTypedArray(\n    newPositions.length / 3,\n    (iLength + wallIndices.length) * 2\n  );\n  newIndices.set(indices);\n  var index = iLength;\n  for (i = 0; i < iLength; i += 2) {\n    // bottom indices\n    var v0 = indices[i];\n    var v1 = indices[i + 1];\n    newIndices[index++] = v0 + length;\n    newIndices[index++] = v1 + length;\n  }\n\n  var UL, LL;\n  for (i = 0; i < wallIndices.length; i++) {\n    //wall indices\n    UL = wallIndices[i];\n    LL = UL + length;\n    newIndices[index++] = UL;\n    newIndices[index++] = LL;\n  }\n\n  return {\n    attributes: attributes,\n    indices: newIndices,\n  };\n}\n\n/**\n * A description of a corridor outline.\n *\n * @alias CorridorOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\n * @param {Number} options.width The distance between the edges of the corridor outline.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see CorridorOutlineGeometry.createGeometry\n *\n * @example\n * var corridor = new Cesium.CorridorOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n *   width : 100000\n * });\n */\nfunction CorridorOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n  var width = options.width;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.positions\", positions);\n  Check.typeOf.number(\"options.width\", width);\n  //>>includeEnd('debug');\n\n  var height = defaultValue(options.height, 0.0);\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  this._positions = positions;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._width = width;\n  this._height = Math.max(height, extrudedHeight);\n  this._extrudedHeight = Math.min(height, extrudedHeight);\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createCorridorOutlineGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CorridorOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCorridorOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.typeOf.object(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  array[startingIndex++] = value._width;\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchOptions = {\n  positions: undefined,\n  ellipsoid: scratchEllipsoid,\n  width: undefined,\n  height: undefined,\n  extrudedHeight: undefined,\n  cornerType: undefined,\n  granularity: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\n * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\n */\nCorridorOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var width = array[startingIndex++];\n  var height = array[startingIndex++];\n  var extrudedHeight = array[startingIndex++];\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex++];\n  var offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.width = width;\n    scratchOptions.height = height;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new CorridorOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._width = width;\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n *\n * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCorridorOutlineGeometry.createGeometry = function (corridorOutlineGeometry) {\n  var positions = corridorOutlineGeometry._positions;\n  var width = corridorOutlineGeometry._width;\n  var ellipsoid = corridorOutlineGeometry._ellipsoid;\n\n  positions = scaleToSurface(positions, ellipsoid);\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n\n  if (cleanPositions.length < 2 || width <= 0) {\n    return;\n  }\n\n  var height = corridorOutlineGeometry._height;\n  var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\n  var extrude = !CesiumMath.equalsEpsilon(\n    height,\n    extrudedHeight,\n    0,\n    CesiumMath.EPSILON2\n  );\n\n  var params = {\n    ellipsoid: ellipsoid,\n    positions: cleanPositions,\n    width: width,\n    cornerType: corridorOutlineGeometry._cornerType,\n    granularity: corridorOutlineGeometry._granularity,\n    saveAttributes: false,\n  };\n  var attr;\n  if (extrude) {\n    params.height = height;\n    params.extrudedHeight = extrudedHeight;\n    params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\n    attr = computePositionsExtruded(params);\n  } else {\n    var computedPositions = CorridorGeometryLibrary.computePositions(params);\n    attr = combine(computedPositions, params.cornerType);\n    attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n      attr.attributes.position.values,\n      height,\n      ellipsoid\n    );\n\n    if (defined(corridorOutlineGeometry._offsetAttribute)) {\n      var length = attr.attributes.position.values.length;\n      var applyOffset = new Uint8Array(length / 3);\n      var offsetValue =\n        corridorOutlineGeometry._offsetAttribute ===\n        GeometryOffsetAttribute.NONE\n          ? 0\n          : 1;\n      arrayFill(applyOffset, offsetValue);\n      attr.attributes.applyOffset = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n  }\n  var attributes = attr.attributes;\n  var boundingSphere = BoundingSphere.fromVertices(\n    attributes.position.values,\n    undefined,\n    3\n  );\n\n  return new Geometry({\n    attributes: attributes,\n    indices: attr.indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: boundingSphere,\n    offsetAttribute: corridorOutlineGeometry._offsetAttribute,\n  });\n};\nexport default CorridorOutlineGeometry;\n","import CorridorOutlineGeometry from \"../Core/CorridorOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\n\nfunction createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {\n  if (defined(offset)) {\n    corridorOutlineGeometry = CorridorOutlineGeometry.unpack(\n      corridorOutlineGeometry,\n      offset\n    );\n  }\n  corridorOutlineGeometry._ellipsoid = Ellipsoid.clone(\n    corridorOutlineGeometry._ellipsoid\n  );\n  return CorridorOutlineGeometry.createGeometry(corridorOutlineGeometry);\n}\nexport default createCorridorOutlineGeometry;\n"],"names":["cartesian1","Cartesian3","cartesian2","cartesian3","combine","computedPositions","cornerType","length","wallIndices","positions","corners","endPositions","attributes","GeometryAttributes","leftCount","rightCount","indicesLength","i","corner","leftSide","leftPositions","defined","rightPositions","endPositionLength","addEndPositions","UL","LL","UR","LR","size","finalPositions","Float64Array","front","back","halfLength","indices","IndexDatatype","createTypedArray","index","push","leftPos","rightPos","firstEndPositions","fromArray","CorridorGeometryLibrary","addAttribute","undefined","posIndex","rightEdge","leftEdge","set","j","start","l","r","outsidePoint","Math","floor","CornerType","BEVELED","splice","lastEndPositions","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","CorridorOutlineGeometry","options","defaultValue","EMPTY_OBJECT","width","Check","typeOf","object","number","height","extrudedHeight","this","_positions","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_width","_height","max","_extrudedHeight","min","_cornerType","ROUNDED","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_offsetAttribute","offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchOptions","unpack","result","Array","createGeometry","corridorOutlineGeometry","scaleToGeodeticSurface","scaleToSurface","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","attr","extrude","EPSILON2","params","saveAttributes","computePositions","extrudedPositions","newPositions","PolygonPipeline","scaleToGeodeticHeight","applyOffset","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","applyOffsetValue","NONE","UNSIGNED_BYTE","iLength","newIndices","v0","v1","computePositionsExtruded","offsetValue","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","PrimitiveType","LINES","offset"],"mappings":"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"}