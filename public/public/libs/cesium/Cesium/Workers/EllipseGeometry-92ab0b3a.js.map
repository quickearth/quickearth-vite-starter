{"version":3,"file":"EllipseGeometry-92ab0b3a.js","sources":["../../../../Source/Core/EllipseGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport EllipseGeometryLibrary from \"./EllipseGeometryLibrary.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport GeographicProjection from \"./GeographicProjection.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar scratchCartesian1 = new Cartesian3();\nvar scratchCartesian2 = new Cartesian3();\nvar scratchCartesian3 = new Cartesian3();\nvar scratchCartesian4 = new Cartesian3();\nvar texCoordScratch = new Cartesian2();\nvar textureMatrixScratch = new Matrix3();\nvar tangentMatrixScratch = new Matrix3();\nvar quaternionScratch = new Quaternion();\n\nvar scratchNormal = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\n\nvar scratchCartographic = new Cartographic();\nvar projectedCenterScratch = new Cartesian3();\n\nvar scratchMinTexCoord = new Cartesian2();\nvar scratchMaxTexCoord = new Cartesian2();\n\nfunction computeTopBottomAttributes(positions, options, extrude) {\n  var vertexFormat = options.vertexFormat;\n  var center = options.center;\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var ellipsoid = options.ellipsoid;\n  var stRotation = options.stRotation;\n  var size = extrude ? (positions.length / 3) * 2 : positions.length / 3;\n  var shadowVolume = options.shadowVolume;\n\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array(size * 2)\n    : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size * 3) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size * 3) : undefined;\n  var bitangents = vertexFormat.bitangent\n    ? new Float32Array(size * 3)\n    : undefined;\n\n  var extrudeNormals = shadowVolume ? new Float32Array(size * 3) : undefined;\n\n  var textureCoordIndex = 0;\n\n  // Raise positions to a height above the ellipsoid and compute the\n  // texture coordinates, normals, tangents, and bitangents.\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n\n  var projection = new GeographicProjection(ellipsoid);\n  var projectedCenter = projection.project(\n    ellipsoid.cartesianToCartographic(center, scratchCartographic),\n    projectedCenterScratch\n  );\n\n  var geodeticNormal = ellipsoid.scaleToGeodeticSurface(\n    center,\n    scratchCartesian1\n  );\n  ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n\n  var textureMatrix = textureMatrixScratch;\n  var tangentMatrix = tangentMatrixScratch;\n  if (stRotation !== 0) {\n    var rotation = Quaternion.fromAxisAngle(\n      geodeticNormal,\n      stRotation,\n      quaternionScratch\n    );\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n    rotation = Quaternion.fromAxisAngle(\n      geodeticNormal,\n      -stRotation,\n      quaternionScratch\n    );\n    tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n    tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\n  }\n\n  var minTexCoord = Cartesian2.fromElements(\n    Number.POSITIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    scratchMinTexCoord\n  );\n  var maxTexCoord = Cartesian2.fromElements(\n    Number.NEGATIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n    scratchMaxTexCoord\n  );\n\n  var length = positions.length;\n  var bottomOffset = extrude ? length : 0;\n  var stOffset = (bottomOffset / 3) * 2;\n  for (var i = 0; i < length; i += 3) {\n    var i1 = i + 1;\n    var i2 = i + 2;\n    var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n\n    if (vertexFormat.st) {\n      var rotatedPoint = Matrix3.multiplyByVector(\n        textureMatrix,\n        position,\n        scratchCartesian2\n      );\n      var projectedPoint = projection.project(\n        ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic),\n        scratchCartesian3\n      );\n      Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n      texCoordScratch.x =\n        (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n      texCoordScratch.y =\n        (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n      minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n      minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n      maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n      maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n      if (extrude) {\n        textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n        textureCoordinates[textureCoordIndex + 1 + stOffset] =\n          texCoordScratch.y;\n      }\n\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n    }\n\n    if (\n      vertexFormat.normal ||\n      vertexFormat.tangent ||\n      vertexFormat.bitangent ||\n      shadowVolume\n    ) {\n      normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n      if (shadowVolume) {\n        extrudeNormals[i + bottomOffset] = -normal.x;\n        extrudeNormals[i1 + bottomOffset] = -normal.y;\n        extrudeNormals[i2 + bottomOffset] = -normal.z;\n      }\n\n      if (\n        vertexFormat.normal ||\n        vertexFormat.tangent ||\n        vertexFormat.bitangent\n      ) {\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\n          tangent = Cartesian3.normalize(\n            Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent),\n            tangent\n          );\n          Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\n        }\n        if (vertexFormat.normal) {\n          normals[i] = normal.x;\n          normals[i1] = normal.y;\n          normals[i2] = normal.z;\n          if (extrude) {\n            normals[i + bottomOffset] = -normal.x;\n            normals[i1 + bottomOffset] = -normal.y;\n            normals[i2 + bottomOffset] = -normal.z;\n          }\n        }\n\n        if (vertexFormat.tangent) {\n          tangents[i] = tangent.x;\n          tangents[i1] = tangent.y;\n          tangents[i2] = tangent.z;\n          if (extrude) {\n            tangents[i + bottomOffset] = -tangent.x;\n            tangents[i1 + bottomOffset] = -tangent.y;\n            tangents[i2 + bottomOffset] = -tangent.z;\n          }\n        }\n\n        if (vertexFormat.bitangent) {\n          bitangent = Cartesian3.normalize(\n            Cartesian3.cross(normal, tangent, bitangent),\n            bitangent\n          );\n          bitangents[i] = bitangent.x;\n          bitangents[i1] = bitangent.y;\n          bitangents[i2] = bitangent.z;\n          if (extrude) {\n            bitangents[i + bottomOffset] = bitangent.x;\n            bitangents[i1 + bottomOffset] = bitangent.y;\n            bitangents[i2 + bottomOffset] = bitangent.z;\n          }\n        }\n      }\n    }\n  }\n\n  if (vertexFormat.st) {\n    length = textureCoordinates.length;\n    for (var k = 0; k < length; k += 2) {\n      textureCoordinates[k] =\n        (textureCoordinates[k] - minTexCoord.x) /\n        (maxTexCoord.x - minTexCoord.x);\n      textureCoordinates[k + 1] =\n        (textureCoordinates[k + 1] - minTexCoord.y) /\n        (maxTexCoord.y - minTexCoord.y);\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(\n      positions,\n      options,\n      extrude\n    );\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: finalPositions,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (shadowVolume) {\n    attributes.extrudeDirection = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n  }\n\n  if (extrude && defined(options.offsetAttribute)) {\n    var offsetAttribute = new Uint8Array(size);\n    if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n    } else {\n      var offsetValue =\n        options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n    }\n\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return attributes;\n}\n\nfunction topIndices(numPts) {\n  // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\n  //              = -1 + 4 * ((n * ( n + 1)) / 2)\n  // total triangles = 2 * numTrangles in half\n  // indices = total triangles * 3;\n  // Substitute numPts for n above\n\n  var indices = new Array(12 * (numPts * (numPts + 1)) - 6);\n  var indicesIndex = 0;\n  var prevIndex;\n  var numInterior;\n  var positionIndex;\n  var i;\n  var j;\n  // Indices triangles to the 'right' of the north vector\n\n  prevIndex = 0;\n  positionIndex = 1;\n  for (i = 0; i < 3; i++) {\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n\n  for (i = 2; i < numPts + 1; ++i) {\n    positionIndex = i * (i + 1) - 1;\n    prevIndex = (i - 1) * i - 1;\n\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n\n    numInterior = 2 * i;\n    for (j = 0; j < numInterior - 1; ++j) {\n      indices[indicesIndex++] = positionIndex;\n      indices[indicesIndex++] = prevIndex++;\n      indices[indicesIndex++] = prevIndex;\n\n      indices[indicesIndex++] = positionIndex++;\n      indices[indicesIndex++] = prevIndex;\n      indices[indicesIndex++] = positionIndex;\n    }\n\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n\n  // Indices for center column of triangles\n  numInterior = numPts * 2;\n  ++positionIndex;\n  ++prevIndex;\n  for (i = 0; i < numInterior - 1; ++i) {\n    indices[indicesIndex++] = positionIndex;\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex;\n\n    indices[indicesIndex++] = positionIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n\n  indices[indicesIndex++] = positionIndex;\n  indices[indicesIndex++] = prevIndex++;\n  indices[indicesIndex++] = prevIndex;\n\n  indices[indicesIndex++] = positionIndex++;\n  indices[indicesIndex++] = prevIndex++;\n  indices[indicesIndex++] = prevIndex;\n\n  // Reverse the process creating indices to the 'left' of the north vector\n  ++prevIndex;\n  for (i = numPts - 1; i > 1; --i) {\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n\n    numInterior = 2 * i;\n    for (j = 0; j < numInterior - 1; ++j) {\n      indices[indicesIndex++] = positionIndex;\n      indices[indicesIndex++] = prevIndex++;\n      indices[indicesIndex++] = prevIndex;\n\n      indices[indicesIndex++] = positionIndex++;\n      indices[indicesIndex++] = prevIndex;\n      indices[indicesIndex++] = positionIndex;\n    }\n\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = positionIndex++;\n  }\n\n  for (i = 0; i < 3; i++) {\n    indices[indicesIndex++] = prevIndex++;\n    indices[indicesIndex++] = prevIndex;\n    indices[indicesIndex++] = positionIndex;\n  }\n  return indices;\n}\n\nvar boundingSphereCenter = new Cartesian3();\n\nfunction computeEllipse(options) {\n  var center = options.center;\n  boundingSphereCenter = Cartesian3.multiplyByScalar(\n    options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter),\n    options.height,\n    boundingSphereCenter\n  );\n  boundingSphereCenter = Cartesian3.add(\n    center,\n    boundingSphereCenter,\n    boundingSphereCenter\n  );\n  var boundingSphere = new BoundingSphere(\n    boundingSphereCenter,\n    options.semiMajorAxis\n  );\n  var cep = EllipseGeometryLibrary.computeEllipsePositions(\n    options,\n    true,\n    false\n  );\n  var positions = cep.positions;\n  var numPts = cep.numPts;\n  var attributes = computeTopBottomAttributes(positions, options, false);\n  var indices = topIndices(numPts);\n  indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\n  return {\n    boundingSphere: boundingSphere,\n    attributes: attributes,\n    indices: indices,\n  };\n}\n\nfunction computeWallAttributes(positions, options) {\n  var vertexFormat = options.vertexFormat;\n  var center = options.center;\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var ellipsoid = options.ellipsoid;\n  var height = options.height;\n  var extrudedHeight = options.extrudedHeight;\n  var stRotation = options.stRotation;\n  var size = (positions.length / 3) * 2;\n\n  var finalPositions = new Float64Array(size * 3);\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array(size * 2)\n    : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size * 3) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size * 3) : undefined;\n  var bitangents = vertexFormat.bitangent\n    ? new Float32Array(size * 3)\n    : undefined;\n\n  var shadowVolume = options.shadowVolume;\n  var extrudeNormals = shadowVolume ? new Float32Array(size * 3) : undefined;\n\n  var textureCoordIndex = 0;\n\n  // Raise positions to a height above the ellipsoid and compute the\n  // texture coordinates, normals, tangents, and bitangents.\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n\n  var projection = new GeographicProjection(ellipsoid);\n  var projectedCenter = projection.project(\n    ellipsoid.cartesianToCartographic(center, scratchCartographic),\n    projectedCenterScratch\n  );\n\n  var geodeticNormal = ellipsoid.scaleToGeodeticSurface(\n    center,\n    scratchCartesian1\n  );\n  ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n  var rotation = Quaternion.fromAxisAngle(\n    geodeticNormal,\n    stRotation,\n    quaternionScratch\n  );\n  var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\n\n  var minTexCoord = Cartesian2.fromElements(\n    Number.POSITIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    scratchMinTexCoord\n  );\n  var maxTexCoord = Cartesian2.fromElements(\n    Number.NEGATIVE_INFINITY,\n    Number.NEGATIVE_INFINITY,\n    scratchMaxTexCoord\n  );\n\n  var length = positions.length;\n  var stOffset = (length / 3) * 2;\n  for (var i = 0; i < length; i += 3) {\n    var i1 = i + 1;\n    var i2 = i + 2;\n    var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n    var extrudedPosition;\n\n    if (vertexFormat.st) {\n      var rotatedPoint = Matrix3.multiplyByVector(\n        textureMatrix,\n        position,\n        scratchCartesian2\n      );\n      var projectedPoint = projection.project(\n        ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic),\n        scratchCartesian3\n      );\n      Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n      texCoordScratch.x =\n        (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n      texCoordScratch.y =\n        (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n      minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n      minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n      maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n      maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n      textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n      textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n      textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n    }\n\n    position = ellipsoid.scaleToGeodeticSurface(position, position);\n    extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\n    normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n    if (shadowVolume) {\n      extrudeNormals[i + length] = -normal.x;\n      extrudeNormals[i1 + length] = -normal.y;\n      extrudeNormals[i2 + length] = -normal.z;\n    }\n\n    var scaledNormal = Cartesian3.multiplyByScalar(\n      normal,\n      height,\n      scratchCartesian4\n    );\n    position = Cartesian3.add(position, scaledNormal, position);\n    scaledNormal = Cartesian3.multiplyByScalar(\n      normal,\n      extrudedHeight,\n      scaledNormal\n    );\n    extrudedPosition = Cartesian3.add(\n      extrudedPosition,\n      scaledNormal,\n      extrudedPosition\n    );\n\n    if (vertexFormat.position) {\n      finalPositions[i + length] = extrudedPosition.x;\n      finalPositions[i1 + length] = extrudedPosition.y;\n      finalPositions[i2 + length] = extrudedPosition.z;\n\n      finalPositions[i] = position.x;\n      finalPositions[i1] = position.y;\n      finalPositions[i2] = position.z;\n    }\n\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n      bitangent = Cartesian3.clone(normal, bitangent);\n      var next = Cartesian3.fromArray(\n        positions,\n        (i + 3) % length,\n        scratchCartesian4\n      );\n      Cartesian3.subtract(next, position, next);\n      var bottom = Cartesian3.subtract(\n        extrudedPosition,\n        position,\n        scratchCartesian3\n      );\n\n      normal = Cartesian3.normalize(\n        Cartesian3.cross(bottom, next, normal),\n        normal\n      );\n\n      if (vertexFormat.normal) {\n        normals[i] = normal.x;\n        normals[i1] = normal.y;\n        normals[i2] = normal.z;\n\n        normals[i + length] = normal.x;\n        normals[i1 + length] = normal.y;\n        normals[i2 + length] = normal.z;\n      }\n\n      if (vertexFormat.tangent) {\n        tangent = Cartesian3.normalize(\n          Cartesian3.cross(bitangent, normal, tangent),\n          tangent\n        );\n        tangents[i] = tangent.x;\n        tangents[i1] = tangent.y;\n        tangents[i2] = tangent.z;\n\n        tangents[i + length] = tangent.x;\n        tangents[i + 1 + length] = tangent.y;\n        tangents[i + 2 + length] = tangent.z;\n      }\n\n      if (vertexFormat.bitangent) {\n        bitangents[i] = bitangent.x;\n        bitangents[i1] = bitangent.y;\n        bitangents[i2] = bitangent.z;\n\n        bitangents[i + length] = bitangent.x;\n        bitangents[i1 + length] = bitangent.y;\n        bitangents[i2 + length] = bitangent.z;\n      }\n    }\n  }\n\n  if (vertexFormat.st) {\n    length = textureCoordinates.length;\n    for (var k = 0; k < length; k += 2) {\n      textureCoordinates[k] =\n        (textureCoordinates[k] - minTexCoord.x) /\n        (maxTexCoord.x - minTexCoord.x);\n      textureCoordinates[k + 1] =\n        (textureCoordinates[k + 1] - minTexCoord.y) /\n        (maxTexCoord.y - minTexCoord.y);\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: finalPositions,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (shadowVolume) {\n    attributes.extrudeDirection = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n  }\n\n  if (defined(options.offsetAttribute)) {\n    var offsetAttribute = new Uint8Array(size);\n    if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n    } else {\n      var offsetValue =\n        options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n    }\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return attributes;\n}\n\nfunction computeWallIndices(positions) {\n  var length = positions.length / 3;\n  var indices = IndexDatatype.createTypedArray(length, length * 6);\n  var index = 0;\n  for (var i = 0; i < length; i++) {\n    var UL = i;\n    var LL = i + length;\n    var UR = (UL + 1) % length;\n    var LR = UR + length;\n    indices[index++] = UL;\n    indices[index++] = LL;\n    indices[index++] = UR;\n    indices[index++] = UR;\n    indices[index++] = LL;\n    indices[index++] = LR;\n  }\n\n  return indices;\n}\n\nvar topBoundingSphere = new BoundingSphere();\nvar bottomBoundingSphere = new BoundingSphere();\n\nfunction computeExtrudedEllipse(options) {\n  var center = options.center;\n  var ellipsoid = options.ellipsoid;\n  var semiMajorAxis = options.semiMajorAxis;\n  var scaledNormal = Cartesian3.multiplyByScalar(\n    ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1),\n    options.height,\n    scratchCartesian1\n  );\n  topBoundingSphere.center = Cartesian3.add(\n    center,\n    scaledNormal,\n    topBoundingSphere.center\n  );\n  topBoundingSphere.radius = semiMajorAxis;\n\n  scaledNormal = Cartesian3.multiplyByScalar(\n    ellipsoid.geodeticSurfaceNormal(center, scaledNormal),\n    options.extrudedHeight,\n    scaledNormal\n  );\n  bottomBoundingSphere.center = Cartesian3.add(\n    center,\n    scaledNormal,\n    bottomBoundingSphere.center\n  );\n  bottomBoundingSphere.radius = semiMajorAxis;\n\n  var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\n  var positions = cep.positions;\n  var numPts = cep.numPts;\n  var outerPositions = cep.outerPositions;\n  var boundingSphere = BoundingSphere.union(\n    topBoundingSphere,\n    bottomBoundingSphere\n  );\n  var topBottomAttributes = computeTopBottomAttributes(\n    positions,\n    options,\n    true\n  );\n  var indices = topIndices(numPts);\n  var length = indices.length;\n  indices.length = length * 2;\n  var posLength = positions.length / 3;\n  for (var i = 0; i < length; i += 3) {\n    indices[i + length] = indices[i + 2] + posLength;\n    indices[i + 1 + length] = indices[i + 1] + posLength;\n    indices[i + 2 + length] = indices[i] + posLength;\n  }\n\n  var topBottomIndices = IndexDatatype.createTypedArray(\n    (posLength * 2) / 3,\n    indices\n  );\n\n  var topBottomGeo = new Geometry({\n    attributes: topBottomAttributes,\n    indices: topBottomIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n\n  var wallAttributes = computeWallAttributes(outerPositions, options);\n  indices = computeWallIndices(outerPositions);\n  var wallIndices = IndexDatatype.createTypedArray(\n    (outerPositions.length * 2) / 3,\n    indices\n  );\n\n  var wallGeo = new Geometry({\n    attributes: wallAttributes,\n    indices: wallIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n\n  var geo = GeometryPipeline.combineInstances([\n    new GeometryInstance({\n      geometry: topBottomGeo,\n    }),\n    new GeometryInstance({\n      geometry: wallGeo,\n    }),\n  ]);\n\n  return {\n    boundingSphere: boundingSphere,\n    attributes: geo[0].attributes,\n    indices: geo[0].indices,\n  };\n}\n\nfunction computeRectangle(\n  center,\n  semiMajorAxis,\n  semiMinorAxis,\n  rotation,\n  granularity,\n  ellipsoid,\n  result\n) {\n  var cep = EllipseGeometryLibrary.computeEllipsePositions(\n    {\n      center: center,\n      semiMajorAxis: semiMajorAxis,\n      semiMinorAxis: semiMinorAxis,\n      rotation: rotation,\n      granularity: granularity,\n    },\n    false,\n    true\n  );\n  var positionsFlat = cep.outerPositions;\n  var positionsCount = positionsFlat.length / 3;\n  var positions = new Array(positionsCount);\n  for (var i = 0; i < positionsCount; ++i) {\n    positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n  }\n  var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\n  // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\n  // When this happens, make the rectangle into a \"circle\" around the pole\n  if (rectangle.width > CesiumMath.PI) {\n    rectangle.north =\n      rectangle.north > 0.0\n        ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7\n        : rectangle.north;\n    rectangle.south =\n      rectangle.south < 0.0\n        ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO\n        : rectangle.south;\n    rectangle.east = CesiumMath.PI;\n    rectangle.west = -CesiumMath.PI;\n  }\n  return rectangle;\n}\n\n/**\n * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias EllipseGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\n * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n *\n * @example\n * // Create an ellipse.\n * var ellipse = new Cesium.EllipseGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   semiMajorAxis : 500000.0,\n *   semiMinorAxis : 300000.0,\n *   rotation : Cesium.Math.toRadians(60.0)\n * });\n * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\n *\n * @see EllipseGeometry.createGeometry\n */\nfunction EllipseGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var center = options.center;\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.center\", center);\n  Check.typeOf.number(\"options.semiMajorAxis\", semiMajorAxis);\n  Check.typeOf.number(\"options.semiMinorAxis\", semiMinorAxis);\n  if (semiMajorAxis < semiMinorAxis) {\n    throw new DeveloperError(\n      \"semiMajorAxis must be greater than or equal to the semiMinorAxis.\"\n    );\n  }\n  if (granularity <= 0.0) {\n    throw new DeveloperError(\"granularity must be greater than zero.\");\n  }\n  //>>includeEnd('debug');\n\n  var height = defaultValue(options.height, 0.0);\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  this._center = Cartesian3.clone(center);\n  this._semiMajorAxis = semiMajorAxis;\n  this._semiMinorAxis = semiMinorAxis;\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._rotation = defaultValue(options.rotation, 0.0);\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._height = Math.max(extrudedHeight, height);\n  this._granularity = granularity;\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._extrudedHeight = Math.min(extrudedHeight, height);\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createEllipseGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n\n  this._rectangle = undefined;\n  this._textureCoordinateRotationPoints = undefined;\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipseGeometry.packedLength =\n  Cartesian3.packedLength +\n  Ellipsoid.packedLength +\n  VertexFormat.packedLength +\n  9;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipseGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipseGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._center, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._semiMajorAxis;\n  array[startingIndex++] = value._semiMinorAxis;\n  array[startingIndex++] = value._rotation;\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchCenter = new Cartesian3();\nvar scratchEllipsoid = new Ellipsoid();\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  center: scratchCenter,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  rotation: undefined,\n  stRotation: undefined,\n  height: undefined,\n  granularity: undefined,\n  extrudedHeight: undefined,\n  shadowVolume: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipseGeometry} [result] The object into which to store the result.\n * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\n */\nEllipseGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\n  startingIndex += Cartesian3.packedLength;\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var semiMajorAxis = array[startingIndex++];\n  var semiMinorAxis = array[startingIndex++];\n  var rotation = array[startingIndex++];\n  var stRotation = array[startingIndex++];\n  var height = array[startingIndex++];\n  var granularity = array[startingIndex++];\n  var extrudedHeight = array[startingIndex++];\n  var shadowVolume = array[startingIndex++] === 1.0;\n  var offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.height = height;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.granularity = granularity;\n    scratchOptions.stRotation = stRotation;\n    scratchOptions.rotation = rotation;\n    scratchOptions.semiMajorAxis = semiMajorAxis;\n    scratchOptions.semiMinorAxis = semiMinorAxis;\n    scratchOptions.shadowVolume = shadowVolume;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n\n    return new EllipseGeometry(scratchOptions);\n  }\n\n  result._center = Cartesian3.clone(center, result._center);\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._semiMajorAxis = semiMajorAxis;\n  result._semiMinorAxis = semiMinorAxis;\n  result._rotation = rotation;\n  result._stRotation = stRotation;\n  result._height = height;\n  result._granularity = granularity;\n  result._extrudedHeight = extrudedHeight;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the bounding rectangle based on the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n * @param {Rectangle} [result] An object in which to store the result\n *\n * @returns {Rectangle} The result rectangle\n */\nEllipseGeometry.computeRectangle = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var center = options.center;\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  var semiMajorAxis = options.semiMajorAxis;\n  var semiMinorAxis = options.semiMinorAxis;\n  var granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  var rotation = defaultValue(options.rotation, 0.0);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.center\", center);\n  Check.typeOf.number(\"options.semiMajorAxis\", semiMajorAxis);\n  Check.typeOf.number(\"options.semiMinorAxis\", semiMinorAxis);\n  if (semiMajorAxis < semiMinorAxis) {\n    throw new DeveloperError(\n      \"semiMajorAxis must be greater than or equal to the semiMinorAxis.\"\n    );\n  }\n  if (granularity <= 0.0) {\n    throw new DeveloperError(\"granularity must be greater than zero.\");\n  }\n  //>>includeEnd('debug');\n\n  return computeRectangle(\n    center,\n    semiMajorAxis,\n    semiMinorAxis,\n    rotation,\n    granularity,\n    ellipsoid,\n    result\n  );\n};\n\n/**\n * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipseGeometry.createGeometry = function (ellipseGeometry) {\n  if (\n    ellipseGeometry._semiMajorAxis <= 0.0 ||\n    ellipseGeometry._semiMinorAxis <= 0.0\n  ) {\n    return;\n  }\n\n  var height = ellipseGeometry._height;\n  var extrudedHeight = ellipseGeometry._extrudedHeight;\n  var extrude = !CesiumMath.equalsEpsilon(\n    height,\n    extrudedHeight,\n    0,\n    CesiumMath.EPSILON2\n  );\n\n  ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(\n    ellipseGeometry._center,\n    ellipseGeometry._center\n  );\n  var options = {\n    center: ellipseGeometry._center,\n    semiMajorAxis: ellipseGeometry._semiMajorAxis,\n    semiMinorAxis: ellipseGeometry._semiMinorAxis,\n    ellipsoid: ellipseGeometry._ellipsoid,\n    rotation: ellipseGeometry._rotation,\n    height: height,\n    granularity: ellipseGeometry._granularity,\n    vertexFormat: ellipseGeometry._vertexFormat,\n    stRotation: ellipseGeometry._stRotation,\n  };\n  var geometry;\n  if (extrude) {\n    options.extrudedHeight = extrudedHeight;\n    options.shadowVolume = ellipseGeometry._shadowVolume;\n    options.offsetAttribute = ellipseGeometry._offsetAttribute;\n    geometry = computeExtrudedEllipse(options);\n  } else {\n    geometry = computeEllipse(options);\n\n    if (defined(ellipseGeometry._offsetAttribute)) {\n      var length = geometry.attributes.position.values.length;\n      var applyOffset = new Uint8Array(length / 3);\n      var offsetValue =\n        ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n          ? 0\n          : 1;\n      arrayFill(applyOffset, offsetValue);\n      geometry.attributes.applyOffset = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n  }\n\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: geometry.boundingSphere,\n    offsetAttribute: ellipseGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nEllipseGeometry.createShadowVolume = function (\n  ellipseGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  var granularity = ellipseGeometry._granularity;\n  var ellipsoid = ellipseGeometry._ellipsoid;\n\n  var minHeight = minHeightFunc(granularity, ellipsoid);\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new EllipseGeometry({\n    center: ellipseGeometry._center,\n    semiMajorAxis: ellipseGeometry._semiMajorAxis,\n    semiMinorAxis: ellipseGeometry._semiMinorAxis,\n    ellipsoid: ellipsoid,\n    rotation: ellipseGeometry._rotation,\n    stRotation: ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nfunction textureCoordinateRotationPoints(ellipseGeometry) {\n  var stRotation = -ellipseGeometry._stRotation;\n  if (stRotation === 0.0) {\n    return [0, 0, 0, 1, 1, 0];\n  }\n\n  var cep = EllipseGeometryLibrary.computeEllipsePositions(\n    {\n      center: ellipseGeometry._center,\n      semiMajorAxis: ellipseGeometry._semiMajorAxis,\n      semiMinorAxis: ellipseGeometry._semiMinorAxis,\n      rotation: ellipseGeometry._rotation,\n      granularity: ellipseGeometry._granularity,\n    },\n    false,\n    true\n  );\n  var positionsFlat = cep.outerPositions;\n  var positionsCount = positionsFlat.length / 3;\n  var positions = new Array(positionsCount);\n  for (var i = 0; i < positionsCount; ++i) {\n    positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n  }\n\n  var ellipsoid = ellipseGeometry._ellipsoid;\n  var boundingRectangle = ellipseGeometry.rectangle;\n  return Geometry._textureCoordinateRotationPoints(\n    positions,\n    stRotation,\n    ellipsoid,\n    boundingRectangle\n  );\n}\n\nObject.defineProperties(EllipseGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rectangle)) {\n        this._rectangle = computeRectangle(\n          this._center,\n          this._semiMajorAxis,\n          this._semiMinorAxis,\n          this._rotation,\n          this._granularity,\n          this._ellipsoid\n        );\n      }\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      if (!defined(this._textureCoordinateRotationPoints)) {\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n          this\n        );\n      }\n      return this._textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default EllipseGeometry;\n"],"names":["scratchCartesian1","Cartesian3","scratchCartesian2","scratchCartesian3","scratchCartesian4","texCoordScratch","Cartesian2","textureMatrixScratch","Matrix3","tangentMatrixScratch","quaternionScratch","Quaternion","scratchNormal","scratchTangent","scratchBitangent","scratchCartographic","Cartographic","projectedCenterScratch","scratchMinTexCoord","scratchMaxTexCoord","computeTopBottomAttributes","positions","options","extrude","vertexFormat","center","semiMajorAxis","semiMinorAxis","ellipsoid","stRotation","size","length","shadowVolume","textureCoordinates","st","Float32Array","undefined","normals","normal","tangents","tangent","bitangents","bitangent","extrudeNormals","textureCoordIndex","projection","GeographicProjection","projectedCenter","project","cartesianToCartographic","geodeticNormal","scaleToGeodeticSurface","geodeticSurfaceNormal","textureMatrix","tangentMatrix","rotation","fromAxisAngle","fromQuaternion","clone","IDENTITY","minTexCoord","fromElements","Number","POSITIVE_INFINITY","maxTexCoord","NEGATIVE_INFINITY","bottomOffset","stOffset","i","projectedPoint","i1","i2","position","fromArray","rotatedPoint","multiplyByVector","subtract","x","y","Math","min","max","z","normalize","cross","UNIT_Z","k","offsetAttribute","attributes","GeometryAttributes","finalPositions","EllipseGeometryLibrary","raisePositionsToHeight","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","extrudeDirection","defined","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","offsetValue","NONE","applyOffset","UNSIGNED_BYTE","topIndices","numPts","numInterior","j","indices","Array","indicesIndex","prevIndex","positionIndex","boundingSphereCenter","topBoundingSphere","BoundingSphere","bottomBoundingSphere","computeExtrudedEllipse","scaledNormal","multiplyByScalar","height","add","radius","extrudedHeight","cep","computeEllipsePositions","outerPositions","boundingSphere","union","topBottomAttributes","posLength","topBottomIndices","IndexDatatype","createTypedArray","topBottomGeo","Geometry","primitiveType","PrimitiveType","TRIANGLES","wallAttributes","Float64Array","extrudedPosition","next","bottom","computeWallAttributes","index","LL","UR","LR","computeWallIndices","wallIndices","wallGeo","geo","GeometryPipeline","combineInstances","GeometryInstance","geometry","computeRectangle","granularity","result","positionsFlat","positionsCount","rectangle","Rectangle","fromCartesianArray","width","CesiumMath","PI","north","PI_OVER_TWO","EPSILON7","south","east","west","EllipseGeometry","defaultValue","EMPTY_OBJECT","Ellipsoid","WGS84","RADIANS_PER_DEGREE","VertexFormat","DEFAULT","Check","typeOf","number","DeveloperError","this","_center","_semiMajorAxis","_semiMinorAxis","_ellipsoid","_rotation","_stRotation","_height","_granularity","_vertexFormat","_extrudedHeight","_shadowVolume","_workerName","_offsetAttribute","_rectangle","_textureCoordinateRotationPoints","packedLength","pack","value","array","startingIndex","scratchCenter","scratchEllipsoid","scratchVertexFormat","scratchOptions","unpack","createGeometry","ellipseGeometry","equalsEpsilon","EPSILON2","computeEllipse","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","get","textureCoordinateRotationPoints","boundingRectangle"],"mappings":"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"}