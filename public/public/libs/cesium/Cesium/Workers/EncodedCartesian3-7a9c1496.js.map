{"version":3,"file":"EncodedCartesian3-7a9c1496.js","sources":["../../../../Source/Core/EncodedCartesian3.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\n\n/**\n * A fixed-point encoding of a {@link Cartesian3} with 64-bit floating-point components, as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * This is used to encode positions in vertex buffers for rendering without jittering artifacts\n * as described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @alias EncodedCartesian3\n * @constructor\n *\n * @private\n */\nfunction EncodedCartesian3() {\n  /**\n   * The high bits for each component.  Bits 0 to 22 store the whole value.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.high = Cartesian3.clone(Cartesian3.ZERO);\n\n  /**\n   * The low bits for each component.  Bits 7 to 22 store the whole value, and bits 0 to 6 store the fraction.  Bits 23 to 31 are not used.\n   *\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.low = Cartesian3.clone(Cartesian3.ZERO);\n}\n\n/**\n * Encodes a 64-bit floating-point value as two floating-point values that, when converted to\n * 32-bit floating-point and added, approximate the original input.  The returned object\n * has <code>high</code> and <code>low</code> properties for the high and low bits, respectively.\n * <p>\n * The fixed-point encoding follows {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Number} value The floating-point value to encode.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Object} The modified result parameter or a new instance if one was not provided.\n *\n * @example\n * var value = 1234567.1234567;\n * var splitValue = Cesium.EncodedCartesian3.encode(value);\n */\nEncodedCartesian3.encode = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"value\", value);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {\n      high: 0.0,\n      low: 0.0,\n    };\n  }\n\n  var doubleHigh;\n  if (value >= 0.0) {\n    doubleHigh = Math.floor(value / 65536.0) * 65536.0;\n    result.high = doubleHigh;\n    result.low = value - doubleHigh;\n  } else {\n    doubleHigh = Math.floor(-value / 65536.0) * 65536.0;\n    result.high = -doubleHigh;\n    result.low = value + doubleHigh;\n  }\n\n  return result;\n};\n\nvar scratchEncode = {\n  high: 0.0,\n  low: 0.0,\n};\n\n/**\n * Encodes a {@link Cartesian3} with 64-bit floating-point components as two {@link Cartesian3}\n * values that, when converted to 32-bit floating-point and added, approximate the original input.\n * <p>\n * The fixed-point encoding follows {@link https://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {EncodedCartesian3} [result] The object onto which to store the result.\n * @returns {EncodedCartesian3} The modified result parameter or a new EncodedCartesian3 instance if one was not provided.\n *\n * @example\n * var cart = new Cesium.Cartesian3(-10000000.0, 0.0, 10000000.0);\n * var encoded = Cesium.EncodedCartesian3.fromCartesian(cart);\n */\nEncodedCartesian3.fromCartesian = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new EncodedCartesian3();\n  }\n\n  var high = result.high;\n  var low = result.low;\n\n  EncodedCartesian3.encode(cartesian.x, scratchEncode);\n  high.x = scratchEncode.high;\n  low.x = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.y, scratchEncode);\n  high.y = scratchEncode.high;\n  low.y = scratchEncode.low;\n\n  EncodedCartesian3.encode(cartesian.z, scratchEncode);\n  high.z = scratchEncode.high;\n  low.z = scratchEncode.low;\n\n  return result;\n};\n\nvar encodedP = new EncodedCartesian3();\n\n/**\n * Encodes the provided <code>cartesian</code>, and writes it to an array with <code>high</code>\n * components followed by <code>low</code> components, i.e. <code>[high.x, high.y, high.z, low.x, low.y, low.z]</code>.\n * <p>\n * This is used to create interleaved high-precision position vertex attributes.\n * </p>\n *\n * @param {Cartesian3} cartesian The cartesian to encode.\n * @param {Number[]} cartesianArray The array to write to.\n * @param {Number} index The index into the array to start writing.  Six elements will be written.\n *\n * @exception {DeveloperError} index must be a number greater than or equal to 0.\n *\n * @example\n * var positions = [\n *    new Cesium.Cartesian3(),\n *    // ...\n * ];\n * var encodedPositions = new Float32Array(2 * 3 * positions.length);\n * var j = 0;\n * for (var i = 0; i < positions.length; ++i) {\n *   Cesium.EncodedCartesian3.writeElement(positions[i], encodedPositions, j);\n *   j += 6;\n * }\n */\nEncodedCartesian3.writeElements = function (cartesian, cartesianArray, index) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesianArray\", cartesianArray);\n  Check.typeOf.number(\"index\", index);\n  Check.typeOf.number.greaterThanOrEquals(\"index\", index, 0);\n  //>>includeEnd('debug');\n\n  EncodedCartesian3.fromCartesian(cartesian, encodedP);\n  var high = encodedP.high;\n  var low = encodedP.low;\n\n  cartesianArray[index] = high.x;\n  cartesianArray[index + 1] = high.y;\n  cartesianArray[index + 2] = high.z;\n  cartesianArray[index + 3] = low.x;\n  cartesianArray[index + 4] = low.y;\n  cartesianArray[index + 5] = low.z;\n};\nexport default EncodedCartesian3;\n"],"names":["EncodedCartesian3","this","high","Cartesian3","clone","ZERO","low","encode","value","result","doubleHigh","Check","typeOf","number","defined","Math","floor","scratchEncode","fromCartesian","cartesian","object","x","y","z","encodedP","writeElements","cartesianArray","index","greaterThanOrEquals"],"mappings":"+GAiBA,SAASA,IAOPC,KAAKC,KAAOC,aAAWC,MAAMD,aAAWE,MAQxCJ,KAAKK,IAAMH,aAAWC,MAAMD,aAAWE,MAmBzCL,EAAkBO,OAAS,SAAUC,EAAOC,GAY1C,IAAIC,EAWJ,OArBAC,QAAMC,OAAOC,OAAO,QAASL,GAGxBM,UAAQL,KACXA,EAAS,CACPP,KAAM,EACNI,IAAK,IAKI,GAATE,GACFE,EAA2C,MAA9BK,KAAKC,MAAMR,EAAQ,OAChCC,EAAOP,KAAOQ,EACdD,EAAOH,IAAME,EAAQE,IAErBA,EAA4C,MAA/BK,KAAKC,OAAOR,EAAQ,OACjCC,EAAOP,MAAQQ,EACfD,EAAOH,IAAME,EAAQE,GAGhBD,GAGT,IAAIQ,EAAgB,CAClBf,KAAM,EACNI,IAAK,GAkBPN,EAAkBkB,cAAgB,SAAUC,EAAWV,GAErDE,QAAMC,OAAOQ,OAAO,YAAaD,GAOjC,IAAIjB,GAHFO,GADGK,UAAQL,GACF,IAAIT,EAGJS,GAAOP,KACdI,EAAMG,EAAOH,IAcjB,OAZAN,EAAkBO,OAAOY,EAAUE,EAAGJ,GACtCf,EAAKmB,EAAIJ,EAAcf,KACvBI,EAAIe,EAAIJ,EAAcX,IAEtBN,EAAkBO,OAAOY,EAAUG,EAAGL,GACtCf,EAAKoB,EAAIL,EAAcf,KACvBI,EAAIgB,EAAIL,EAAcX,IAEtBN,EAAkBO,OAAOY,EAAUI,EAAGN,GACtCf,EAAKqB,EAAIN,EAAcf,KACvBI,EAAIiB,EAAIN,EAAcX,IAEfG,GAGT,IAAIe,EAAW,IAAIxB,EA2BnBA,EAAkByB,cAAgB,SAAUN,EAAWO,EAAgBC,GAErEhB,QAAMG,QAAQ,iBAAkBY,GAChCf,QAAMC,OAAOC,OAAO,QAASc,GAC7BhB,QAAMC,OAAOC,OAAOe,oBAAoB,QAASD,EAAO,GAGxD3B,EAAkBkB,cAAcC,EAAWK,GAC3C,IAAItB,EAAOsB,EAAStB,KAChBI,EAAMkB,EAASlB,IAEnBoB,EAAeC,GAASzB,EAAKmB,EAC7BK,EAAeC,EAAQ,GAAKzB,EAAKoB,EACjCI,EAAeC,EAAQ,GAAKzB,EAAKqB,EACjCG,EAAeC,EAAQ,GAAKrB,EAAIe,EAChCK,EAAeC,EAAQ,GAAKrB,EAAIgB,EAChCI,EAAeC,EAAQ,GAAKrB,EAAIiB"}