{"version":3,"file":"PolygonGeometryLibrary-f3f26cdf.js","sources":["../../../../Source/Core/Queue.js","../../../../Source/Core/PolygonGeometryLibrary.js"],"sourcesContent":["/**\n * A queue that can enqueue items at the end, and dequeue items from the front.\n *\n * @alias Queue\n * @constructor\n */\nfunction Queue() {\n  this._array = [];\n  this._offset = 0;\n  this._length = 0;\n}\n\nObject.defineProperties(Queue.prototype, {\n  /**\n   * The length of the queue.\n   *\n   * @memberof Queue.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n});\n\n/**\n * Enqueues the specified item.\n *\n * @param {*} item The item to enqueue.\n */\nQueue.prototype.enqueue = function (item) {\n  this._array.push(item);\n  this._length++;\n};\n\n/**\n * Dequeues an item.  Returns undefined if the queue is empty.\n *\n * @returns {*} The the dequeued item.\n */\nQueue.prototype.dequeue = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  var array = this._array;\n  var offset = this._offset;\n  var item = array[offset];\n  array[offset] = undefined;\n\n  offset++;\n  if (offset > 10 && offset * 2 > array.length) {\n    //compact array\n    this._array = array.slice(offset);\n    offset = 0;\n  }\n\n  this._offset = offset;\n  this._length--;\n\n  return item;\n};\n\n/**\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n *\n * @returns {*} The item at the front of the queue.\n */\nQueue.prototype.peek = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  return this._array[this._offset];\n};\n\n/**\n * Check whether this queue contains the specified item.\n *\n * @param {*} item The item to search for.\n */\nQueue.prototype.contains = function (item) {\n  return this._array.indexOf(item) !== -1;\n};\n\n/**\n * Remove all items from the queue.\n */\nQueue.prototype.clear = function () {\n  this._array.length = this._offset = this._length = 0;\n};\n\n/**\n * Sort the items in the queue in-place.\n *\n * @param {Queue.Comparator} compareFunction A function that defines the sort order.\n */\nQueue.prototype.sort = function (compareFunction) {\n  if (this._offset > 0) {\n    //compact array\n    this._array = this._array.slice(this._offset);\n    this._offset = 0;\n  }\n\n  this._array.sort(compareFunction);\n};\n\n/**\n * A function used to compare two items while sorting a queue.\n * @callback Queue.Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\nexport default Queue;\n","import ArcType from \"./ArcType.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport EllipsoidRhumbLine from \"./EllipsoidRhumbLine.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Queue from \"./Queue.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\n/**\n * @private\n */\nvar PolygonGeometryLibrary = {};\n\nPolygonGeometryLibrary.computeHierarchyPackedLength = function (\n  polygonHierarchy\n) {\n  var numComponents = 0;\n  var stack = [polygonHierarchy];\n  while (stack.length > 0) {\n    var hierarchy = stack.pop();\n    if (!defined(hierarchy)) {\n      continue;\n    }\n\n    numComponents += 2;\n\n    var positions = hierarchy.positions;\n    var holes = hierarchy.holes;\n\n    if (defined(positions)) {\n      numComponents += positions.length * Cartesian3.packedLength;\n    }\n\n    if (defined(holes)) {\n      var length = holes.length;\n      for (var i = 0; i < length; ++i) {\n        stack.push(holes[i]);\n      }\n    }\n  }\n\n  return numComponents;\n};\n\nPolygonGeometryLibrary.packPolygonHierarchy = function (\n  polygonHierarchy,\n  array,\n  startingIndex\n) {\n  var stack = [polygonHierarchy];\n  while (stack.length > 0) {\n    var hierarchy = stack.pop();\n    if (!defined(hierarchy)) {\n      continue;\n    }\n\n    var positions = hierarchy.positions;\n    var holes = hierarchy.holes;\n\n    array[startingIndex++] = defined(positions) ? positions.length : 0;\n    array[startingIndex++] = defined(holes) ? holes.length : 0;\n\n    if (defined(positions)) {\n      var positionsLength = positions.length;\n      for (var i = 0; i < positionsLength; ++i, startingIndex += 3) {\n        Cartesian3.pack(positions[i], array, startingIndex);\n      }\n    }\n\n    if (defined(holes)) {\n      var holesLength = holes.length;\n      for (var j = 0; j < holesLength; ++j) {\n        stack.push(holes[j]);\n      }\n    }\n  }\n\n  return startingIndex;\n};\n\nPolygonGeometryLibrary.unpackPolygonHierarchy = function (\n  array,\n  startingIndex\n) {\n  var positionsLength = array[startingIndex++];\n  var holesLength = array[startingIndex++];\n\n  var positions = new Array(positionsLength);\n  var holes = holesLength > 0 ? new Array(holesLength) : undefined;\n\n  for (\n    var i = 0;\n    i < positionsLength;\n    ++i, startingIndex += Cartesian3.packedLength\n  ) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  for (var j = 0; j < holesLength; ++j) {\n    holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(\n      array,\n      startingIndex\n    );\n    startingIndex = holes[j].startingIndex;\n    delete holes[j].startingIndex;\n  }\n\n  return {\n    positions: positions,\n    holes: holes,\n    startingIndex: startingIndex,\n  };\n};\n\nvar distanceScratch = new Cartesian3();\nfunction getPointAtDistance(p0, p1, distance, length) {\n  Cartesian3.subtract(p1, p0, distanceScratch);\n  Cartesian3.multiplyByScalar(\n    distanceScratch,\n    distance / length,\n    distanceScratch\n  );\n  Cartesian3.add(p0, distanceScratch, distanceScratch);\n  return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\n}\n\nPolygonGeometryLibrary.subdivideLineCount = function (p0, p1, minDistance) {\n  var distance = Cartesian3.distance(p0, p1);\n  var n = distance / minDistance;\n  var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n  return Math.pow(2, countDivide);\n};\n\nvar scratchCartographic0 = new Cartographic();\nvar scratchCartographic1 = new Cartographic();\nvar scratchCartographic2 = new Cartographic();\nvar scratchCartesian0 = new Cartesian3();\nPolygonGeometryLibrary.subdivideRhumbLineCount = function (\n  ellipsoid,\n  p0,\n  p1,\n  minDistance\n) {\n  var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\n  var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\n  var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\n  var n = rhumb.surfaceDistance / minDistance;\n  var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n  return Math.pow(2, countDivide);\n};\n\nPolygonGeometryLibrary.subdivideLine = function (p0, p1, minDistance, result) {\n  var numVertices = PolygonGeometryLibrary.subdivideLineCount(\n    p0,\n    p1,\n    minDistance\n  );\n  var length = Cartesian3.distance(p0, p1);\n  var distanceBetweenVertices = length / numVertices;\n\n  if (!defined(result)) {\n    result = [];\n  }\n\n  var positions = result;\n  positions.length = numVertices * 3;\n\n  var index = 0;\n  for (var i = 0; i < numVertices; i++) {\n    var p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\n    positions[index++] = p[0];\n    positions[index++] = p[1];\n    positions[index++] = p[2];\n  }\n\n  return positions;\n};\n\nPolygonGeometryLibrary.subdivideRhumbLine = function (\n  ellipsoid,\n  p0,\n  p1,\n  minDistance,\n  result\n) {\n  var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\n  var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\n  var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\n\n  var n = rhumb.surfaceDistance / minDistance;\n  var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n  var numVertices = Math.pow(2, countDivide);\n  var distanceBetweenVertices = rhumb.surfaceDistance / numVertices;\n\n  if (!defined(result)) {\n    result = [];\n  }\n\n  var positions = result;\n  positions.length = numVertices * 3;\n\n  var index = 0;\n  for (var i = 0; i < numVertices; i++) {\n    var c = rhumb.interpolateUsingSurfaceDistance(\n      i * distanceBetweenVertices,\n      scratchCartographic2\n    );\n    var p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);\n    positions[index++] = p.x;\n    positions[index++] = p.y;\n    positions[index++] = p.z;\n  }\n\n  return positions;\n};\n\nvar scaleToGeodeticHeightN1 = new Cartesian3();\nvar scaleToGeodeticHeightN2 = new Cartesian3();\nvar scaleToGeodeticHeightP1 = new Cartesian3();\nvar scaleToGeodeticHeightP2 = new Cartesian3();\n\nPolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function (\n  geometry,\n  maxHeight,\n  minHeight,\n  ellipsoid,\n  perPositionHeight\n) {\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n  var n1 = scaleToGeodeticHeightN1;\n  var n2 = scaleToGeodeticHeightN2;\n  var p = scaleToGeodeticHeightP1;\n  var p2 = scaleToGeodeticHeightP2;\n\n  if (\n    defined(geometry) &&\n    defined(geometry.attributes) &&\n    defined(geometry.attributes.position)\n  ) {\n    var positions = geometry.attributes.position.values;\n    var length = positions.length / 2;\n\n    for (var i = 0; i < length; i += 3) {\n      Cartesian3.fromArray(positions, i, p);\n\n      ellipsoid.geodeticSurfaceNormal(p, n1);\n      p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\n      n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\n      n2 = Cartesian3.add(p2, n2, n2);\n      positions[i + length] = n2.x;\n      positions[i + 1 + length] = n2.y;\n      positions[i + 2 + length] = n2.z;\n\n      if (perPositionHeight) {\n        p2 = Cartesian3.clone(p, p2);\n      }\n      n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\n      n2 = Cartesian3.add(p2, n2, n2);\n      positions[i] = n2.x;\n      positions[i + 1] = n2.y;\n      positions[i + 2] = n2.z;\n    }\n  }\n  return geometry;\n};\n\nPolygonGeometryLibrary.polygonOutlinesFromHierarchy = function (\n  polygonHierarchy,\n  scaleToEllipsoidSurface,\n  ellipsoid\n) {\n  // create from a polygon hierarchy\n  // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n  var polygons = [];\n  var queue = new Queue();\n  queue.enqueue(polygonHierarchy);\n  var i;\n  var j;\n  var length;\n  while (queue.length !== 0) {\n    var outerNode = queue.dequeue();\n    var outerRing = outerNode.positions;\n    if (scaleToEllipsoidSurface) {\n      length = outerRing.length;\n      for (i = 0; i < length; i++) {\n        ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\n      }\n    }\n    outerRing = arrayRemoveDuplicates(\n      outerRing,\n      Cartesian3.equalsEpsilon,\n      true\n    );\n    if (outerRing.length < 3) {\n      continue;\n    }\n\n    var numChildren = outerNode.holes ? outerNode.holes.length : 0;\n    // The outer polygon contains inner polygons\n    for (i = 0; i < numChildren; i++) {\n      var hole = outerNode.holes[i];\n      var holePositions = hole.positions;\n      if (scaleToEllipsoidSurface) {\n        length = holePositions.length;\n        for (j = 0; j < length; ++j) {\n          ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\n        }\n      }\n      holePositions = arrayRemoveDuplicates(\n        holePositions,\n        Cartesian3.equalsEpsilon,\n        true\n      );\n      if (holePositions.length < 3) {\n        continue;\n      }\n      polygons.push(holePositions);\n\n      var numGrandchildren = 0;\n      if (defined(hole.holes)) {\n        numGrandchildren = hole.holes.length;\n      }\n\n      for (j = 0; j < numGrandchildren; j++) {\n        queue.enqueue(hole.holes[j]);\n      }\n    }\n\n    polygons.push(outerRing);\n  }\n\n  return polygons;\n};\n\nPolygonGeometryLibrary.polygonsFromHierarchy = function (\n  polygonHierarchy,\n  projectPointsTo2D,\n  scaleToEllipsoidSurface,\n  ellipsoid\n) {\n  // create from a polygon hierarchy\n  // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n  var hierarchy = [];\n  var polygons = [];\n\n  var queue = new Queue();\n  queue.enqueue(polygonHierarchy);\n\n  while (queue.length !== 0) {\n    var outerNode = queue.dequeue();\n    var outerRing = outerNode.positions;\n    var holes = outerNode.holes;\n\n    var i;\n    var length;\n    if (scaleToEllipsoidSurface) {\n      length = outerRing.length;\n      for (i = 0; i < length; i++) {\n        ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\n      }\n    }\n\n    outerRing = arrayRemoveDuplicates(\n      outerRing,\n      Cartesian3.equalsEpsilon,\n      true\n    );\n    if (outerRing.length < 3) {\n      continue;\n    }\n\n    var positions2D = projectPointsTo2D(outerRing);\n    if (!defined(positions2D)) {\n      continue;\n    }\n    var holeIndices = [];\n\n    var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(\n      positions2D\n    );\n    if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n      positions2D.reverse();\n      outerRing = outerRing.slice().reverse();\n    }\n\n    var positions = outerRing.slice();\n    var numChildren = defined(holes) ? holes.length : 0;\n    var polygonHoles = [];\n    var j;\n\n    for (i = 0; i < numChildren; i++) {\n      var hole = holes[i];\n      var holePositions = hole.positions;\n      if (scaleToEllipsoidSurface) {\n        length = holePositions.length;\n        for (j = 0; j < length; ++j) {\n          ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\n        }\n      }\n\n      holePositions = arrayRemoveDuplicates(\n        holePositions,\n        Cartesian3.equalsEpsilon,\n        true\n      );\n      if (holePositions.length < 3) {\n        continue;\n      }\n\n      var holePositions2D = projectPointsTo2D(holePositions);\n      if (!defined(holePositions2D)) {\n        continue;\n      }\n\n      originalWindingOrder = PolygonPipeline.computeWindingOrder2D(\n        holePositions2D\n      );\n      if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n        holePositions2D.reverse();\n        holePositions = holePositions.slice().reverse();\n      }\n\n      polygonHoles.push(holePositions);\n      holeIndices.push(positions.length);\n      positions = positions.concat(holePositions);\n      positions2D = positions2D.concat(holePositions2D);\n\n      var numGrandchildren = 0;\n      if (defined(hole.holes)) {\n        numGrandchildren = hole.holes.length;\n      }\n\n      for (j = 0; j < numGrandchildren; j++) {\n        queue.enqueue(hole.holes[j]);\n      }\n    }\n\n    hierarchy.push({\n      outerRing: outerRing,\n      holes: polygonHoles,\n    });\n    polygons.push({\n      positions: positions,\n      positions2D: positions2D,\n      holes: holeIndices,\n    });\n  }\n\n  return {\n    hierarchy: hierarchy,\n    polygons: polygons,\n  };\n};\n\nvar computeBoundingRectangleCartesian2 = new Cartesian2();\nvar computeBoundingRectangleCartesian3 = new Cartesian3();\nvar computeBoundingRectangleQuaternion = new Quaternion();\nvar computeBoundingRectangleMatrix3 = new Matrix3();\nPolygonGeometryLibrary.computeBoundingRectangle = function (\n  planeNormal,\n  projectPointTo2D,\n  positions,\n  angle,\n  result\n) {\n  var rotation = Quaternion.fromAxisAngle(\n    planeNormal,\n    angle,\n    computeBoundingRectangleQuaternion\n  );\n  var textureMatrix = Matrix3.fromQuaternion(\n    rotation,\n    computeBoundingRectangleMatrix3\n  );\n\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = Number.NEGATIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = Number.NEGATIVE_INFINITY;\n\n  var length = positions.length;\n  for (var i = 0; i < length; ++i) {\n    var p = Cartesian3.clone(positions[i], computeBoundingRectangleCartesian3);\n    Matrix3.multiplyByVector(textureMatrix, p, p);\n    var st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\n\n    if (defined(st)) {\n      minX = Math.min(minX, st.x);\n      maxX = Math.max(maxX, st.x);\n\n      minY = Math.min(minY, st.y);\n      maxY = Math.max(maxY, st.y);\n    }\n  }\n\n  result.x = minX;\n  result.y = minY;\n  result.width = maxX - minX;\n  result.height = maxY - minY;\n  return result;\n};\n\nPolygonGeometryLibrary.createGeometryFromPositions = function (\n  ellipsoid,\n  polygon,\n  granularity,\n  perPositionHeight,\n  vertexFormat,\n  arcType\n) {\n  var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  var positions = polygon.positions;\n\n  if (perPositionHeight) {\n    var length = positions.length;\n    var flattenedPositions = new Array(length * 3);\n    var index = 0;\n    for (var i = 0; i < length; i++) {\n      var p = positions[i];\n      flattenedPositions[index++] = p.x;\n      flattenedPositions[index++] = p.y;\n      flattenedPositions[index++] = p.z;\n    }\n    var geometry = new Geometry({\n      attributes: {\n        position: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.DOUBLE,\n          componentsPerAttribute: 3,\n          values: flattenedPositions,\n        }),\n      },\n      indices: indices,\n      primitiveType: PrimitiveType.TRIANGLES,\n    });\n\n    if (vertexFormat.normal) {\n      return GeometryPipeline.computeNormal(geometry);\n    }\n\n    return geometry;\n  }\n\n  if (arcType === ArcType.GEODESIC) {\n    return PolygonPipeline.computeSubdivision(\n      ellipsoid,\n      positions,\n      indices,\n      granularity\n    );\n  } else if (arcType === ArcType.RHUMB) {\n    return PolygonPipeline.computeRhumbLineSubdivision(\n      ellipsoid,\n      positions,\n      indices,\n      granularity\n    );\n  }\n};\n\nvar computeWallIndicesSubdivided = [];\nvar p1Scratch = new Cartesian3();\nvar p2Scratch = new Cartesian3();\n\nPolygonGeometryLibrary.computeWallGeometry = function (\n  positions,\n  ellipsoid,\n  granularity,\n  perPositionHeight,\n  arcType\n) {\n  var edgePositions;\n  var topEdgeLength;\n  var i;\n  var p1;\n  var p2;\n\n  var length = positions.length;\n  var index = 0;\n\n  if (!perPositionHeight) {\n    var minDistance = CesiumMath.chordLength(\n      granularity,\n      ellipsoid.maximumRadius\n    );\n\n    var numVertices = 0;\n    if (arcType === ArcType.GEODESIC) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideLineCount(\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    } else if (arcType === ArcType.RHUMB) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(\n          ellipsoid,\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    }\n\n    topEdgeLength = (numVertices + length) * 3;\n    edgePositions = new Array(topEdgeLength * 2);\n    for (i = 0; i < length; i++) {\n      p1 = positions[i];\n      p2 = positions[(i + 1) % length];\n\n      var tempPositions;\n      if (arcType === ArcType.GEODESIC) {\n        tempPositions = PolygonGeometryLibrary.subdivideLine(\n          p1,\n          p2,\n          minDistance,\n          computeWallIndicesSubdivided\n        );\n      } else if (arcType === ArcType.RHUMB) {\n        tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(\n          ellipsoid,\n          p1,\n          p2,\n          minDistance,\n          computeWallIndicesSubdivided\n        );\n      }\n      var tempPositionsLength = tempPositions.length;\n      for (var j = 0; j < tempPositionsLength; ++j, ++index) {\n        edgePositions[index] = tempPositions[j];\n        edgePositions[index + topEdgeLength] = tempPositions[j];\n      }\n\n      edgePositions[index] = p2.x;\n      edgePositions[index + topEdgeLength] = p2.x;\n      ++index;\n\n      edgePositions[index] = p2.y;\n      edgePositions[index + topEdgeLength] = p2.y;\n      ++index;\n\n      edgePositions[index] = p2.z;\n      edgePositions[index + topEdgeLength] = p2.z;\n      ++index;\n    }\n  } else {\n    topEdgeLength = length * 3 * 2;\n    edgePositions = new Array(topEdgeLength * 2);\n    for (i = 0; i < length; i++) {\n      p1 = positions[i];\n      p2 = positions[(i + 1) % length];\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\n      ++index;\n    }\n  }\n\n  length = edgePositions.length;\n  var indices = IndexDatatype.createTypedArray(\n    length / 3,\n    length - positions.length * 6\n  );\n  var edgeIndex = 0;\n  length /= 6;\n\n  for (i = 0; i < length; i++) {\n    var UL = i;\n    var UR = UL + 1;\n    var LL = UL + length;\n    var LR = LL + 1;\n\n    p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\n    p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\n    if (\n      Cartesian3.equalsEpsilon(\n        p1,\n        p2,\n        CesiumMath.EPSILON10,\n        CesiumMath.EPSILON10\n      )\n    ) {\n      //skip corner\n      continue;\n    }\n\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  return new Geometry({\n    attributes: new GeometryAttributes({\n      position: new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: edgePositions,\n      }),\n    }),\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n};\nexport default PolygonGeometryLibrary;\n"],"names":["Queue","this","_array","_offset","_length","Object","defineProperties","prototype","length","get","enqueue","item","push","dequeue","array","offset","undefined","slice","peek","contains","indexOf","clear","sort","compareFunction","PolygonGeometryLibrary","computeHierarchyPackedLength","polygonHierarchy","numComponents","stack","hierarchy","pop","defined","positions","holes","Cartesian3","packedLength","i","packPolygonHierarchy","startingIndex","positionsLength","pack","holesLength","j","unpackPolygonHierarchy","Array","unpack","distanceScratch","subdivideLineCount","p0","p1","minDistance","distance","countDivide","Math","max","ceil","CesiumMath","log2","pow","scratchCartographic0","Cartographic","scratchCartographic1","scratchCartographic2","scratchCartesian0","subdivideRhumbLineCount","ellipsoid","c0","cartesianToCartographic","c1","n","EllipsoidRhumbLine","surfaceDistance","subdivideLine","result","numVertices","distanceBetweenVertices","index","p","subtract","multiplyByScalar","add","x","y","z","subdivideRhumbLine","rhumb","c","interpolateUsingSurfaceDistance","cartographicToCartesian","scaleToGeodeticHeightN1","scaleToGeodeticHeightN2","scaleToGeodeticHeightP1","scaleToGeodeticHeightP2","scaleToGeodeticHeightExtruded","geometry","maxHeight","minHeight","perPositionHeight","defaultValue","Ellipsoid","WGS84","n1","n2","p2","attributes","position","values","fromArray","geodeticSurfaceNormal","scaleToGeodeticSurface","clone","polygonOutlinesFromHierarchy","scaleToEllipsoidSurface","polygons","queue","outerNode","outerRing","arrayRemoveDuplicates","equalsEpsilon","numChildren","hole","holePositions","numGrandchildren","polygonsFromHierarchy","projectPointsTo2D","positions2D","holeIndices","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","polygonHoles","holePositions2D","concat","computeBoundingRectangleCartesian2","Cartesian2","computeBoundingRectangleCartesian3","computeBoundingRectangleQuaternion","Quaternion","computeBoundingRectangleMatrix3","Matrix3","computeBoundingRectangle","planeNormal","projectPointTo2D","angle","rotation","fromAxisAngle","textureMatrix","fromQuaternion","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","multiplyByVector","st","min","width","height","createGeometryFromPositions","polygon","granularity","vertexFormat","arcType","indices","triangulate","flattenedPositions","Geometry","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","primitiveType","PrimitiveType","TRIANGLES","normal","GeometryPipeline","computeNormal","ArcType","GEODESIC","computeSubdivision","RHUMB","computeRhumbLineSubdivision","computeWallIndicesSubdivided","p1Scratch","p2Scratch","computeWallGeometry","edgePositions","topEdgeLength","chordLength","maximumRadius","tempPositions","tempPositionsLength","IndexDatatype","createTypedArray","edgeIndex","UL","UR","LL","LR","EPSILON10","GeometryAttributes"],"mappings":"saAMA,SAASA,IACPC,KAAKC,OAAS,GACdD,KAAKE,QAAU,EACfF,KAAKG,QAAU,EAGjBC,OAAOC,iBAAiBN,EAAMO,UAAW,CASvCC,OAAQ,CACNC,IAAK,WACH,OAAOR,KAAKG,YAUlBJ,EAAMO,UAAUG,QAAU,SAAUC,GAClCV,KAAKC,OAAOU,KAAKD,GACjBV,KAAKG,WAQPJ,EAAMO,UAAUM,QAAU,WACxB,GAAqB,IAAjBZ,KAAKG,QAAT,CAIA,IAAIU,EAAQb,KAAKC,OACba,EAASd,KAAKE,QACdQ,EAAOG,EAAMC,GAajB,OAZAD,EAAMC,QAAUC,EAGH,KADbD,GAC4B,EAATA,EAAaD,EAAMN,SAEpCP,KAAKC,OAASY,EAAMG,MAAMF,GAC1BA,EAAS,GAGXd,KAAKE,QAAUY,EACfd,KAAKG,UAEEO,IAQTX,EAAMO,UAAUW,KAAO,WACrB,GAAqB,IAAjBjB,KAAKG,QAIT,OAAOH,KAAKC,OAAOD,KAAKE,UAQ1BH,EAAMO,UAAUY,SAAW,SAAUR,GACnC,OAAsC,IAA/BV,KAAKC,OAAOkB,QAAQT,IAM7BX,EAAMO,UAAUc,MAAQ,WACtBpB,KAAKC,OAAOM,OAASP,KAAKE,QAAUF,KAAKG,QAAU,GAQrDJ,EAAMO,UAAUe,KAAO,SAAUC,GACZ,EAAftB,KAAKE,UAEPF,KAAKC,OAASD,KAAKC,OAAOe,MAAMhB,KAAKE,SACrCF,KAAKE,QAAU,GAGjBF,KAAKC,OAAOoB,KAAKC,QCjFfC,EAAyB,CAE7BC,6BAAsD,SACpDC,GAIA,IAFA,IAAIC,EAAgB,EAChBC,EAAQ,CAACF,GACS,EAAfE,EAAMpB,QAAY,CACvB,IAAIqB,EAAYD,EAAME,MACtB,GAAKC,UAAQF,GAAb,CAIAF,GAAiB,EAEjB,IAAIK,EAAYH,EAAUG,UACtBC,EAAQJ,EAAUI,MAMtB,GAJIF,UAAQC,KACVL,GAAiBK,EAAUxB,OAAS0B,aAAWC,cAG7CJ,UAAQE,GAEV,IADA,IAAIzB,EAASyB,EAAMzB,OACV4B,EAAI,EAAGA,EAAI5B,IAAU4B,EAC5BR,EAAMhB,KAAKqB,EAAMG,KAKvB,OAAOT,GAGTU,qBAA8C,SAC5CX,EACAZ,EACAwB,GAGA,IADA,IAAIV,EAAQ,CAACF,GACS,EAAfE,EAAMpB,QAAY,CACvB,IAAIqB,EAAYD,EAAME,MACtB,GAAKC,UAAQF,GAAb,CAIA,IAAIG,EAAYH,EAAUG,UACtBC,EAAQJ,EAAUI,MAKtB,GAHAnB,EAAMwB,KAAmBP,UAAQC,GAAaA,EAAUxB,OAAS,EACjEM,EAAMwB,KAAmBP,UAAQE,GAASA,EAAMzB,OAAS,EAErDuB,UAAQC,GAEV,IADA,IAAIO,EAAkBP,EAAUxB,OACvB4B,EAAI,EAAGA,EAAIG,IAAmBH,EAAGE,GAAiB,EACzDJ,aAAWM,KAAKR,EAAUI,GAAItB,EAAOwB,GAIzC,GAAIP,UAAQE,GAEV,IADA,IAAIQ,EAAcR,EAAMzB,OACfkC,EAAI,EAAGA,EAAID,IAAeC,EACjCd,EAAMhB,KAAKqB,EAAMS,KAKvB,OAAOJ,GAGTK,uBAAgD,SAC9C7B,EACAwB,GAQA,IANA,IAAIC,EAAkBzB,EAAMwB,KACxBG,EAAc3B,EAAMwB,KAEpBN,EAAY,IAAIY,MAAML,GACtBN,EAAsB,EAAdQ,EAAkB,IAAIG,MAAMH,QAAezB,EAGjDoB,EAAI,EACRA,EAAIG,IACFH,EAAGE,GAAiBJ,aAAWC,aAEjCH,EAAUI,GAAKF,aAAWW,OAAO/B,EAAOwB,GAG1C,IAAK,IAAII,EAAI,EAAGA,EAAID,IAAeC,EACjCT,EAAMS,GAAKlB,EAAuBmB,uBAChC7B,EACAwB,GAEFA,EAAgBL,EAAMS,GAAGJ,qBAClBL,EAAMS,GAAGJ,cAGlB,MAAO,CACLN,UAAWA,EACXC,MAAOA,EACPK,cAAeA,KAIfQ,EAAkB,IAAIZ,aAY1BV,EAAuBuB,mBAAqB,SAAUC,EAAIC,EAAIC,GACxDC,EAAWjB,aAAWiB,SAASH,EAAIC,GAEnCG,EAAcC,KAAKC,IAAI,EAAGD,KAAKE,KAAKC,aAAWC,KAD3CN,EAAWD,KAEnB,OAAOG,KAAKK,IAAI,EAAGN,IAGrB,IAAIO,EAAuB,IAAIC,eAC3BC,EAAuB,IAAID,eAC3BE,EAAuB,IAAIF,eAC3BG,EAAoB,IAAI7B,aAC5BV,EAAuBwC,wBAA0B,SAC/CC,EACAjB,EACAC,EACAC,GAEIgB,EAAKD,EAAUE,wBAAwBnB,EAAIW,GAC3CS,EAAKH,EAAUE,wBAAwBlB,EAAIY,GAE3CQ,EADQ,IAAIC,qBAAmBJ,EAAIE,EAAIH,GAC7BM,gBAAkBrB,EAC5BE,EAAcC,KAAKC,IAAI,EAAGD,KAAKE,KAAKC,aAAWC,KAAKY,KACxD,OAAOhB,KAAKK,IAAI,EAAGN,IAGrB5B,EAAuBgD,cAAgB,SAAUxB,EAAIC,EAAIC,EAAauB,GACpE,IAAIC,EAAclD,EAAuBuB,mBACvCC,EACAC,EACAC,GAEE1C,EAAS0B,aAAWiB,SAASH,EAAIC,GACjC0B,EAA0BnE,EAASkE,EAMnC1C,EAHFyC,GADG1C,UAAQ0C,GACF,GAGKA,EAChBzC,EAAUxB,OAAuB,EAAdkE,EAGnB,IADA,IApDkCvB,EAAU3C,EAoDxCoE,EAAQ,EACHxC,EAAI,EAAGA,EAAIsC,EAAatC,IAAK,CACpC,IAAIyC,GAtDoB7B,EAsDGA,EAtDKG,EAsDGf,EAAIuC,EAtDGnE,EAsDsBA,EArDlE0B,aAAW4C,SAqDsB7B,EArDTD,EAAIF,GAC5BZ,aAAW6C,iBACTjC,EACAK,EAAW3C,EACXsC,GAEFZ,aAAW8C,IAAIhC,EAAIF,EAAiBA,GAC7B,CAACA,EAAgBmC,EAAGnC,EAAgBoC,EAAGpC,EAAgBqC,IA+C5DnD,EAAU4C,KAAWC,EAAE,GACvB7C,EAAU4C,KAAWC,EAAE,GACvB7C,EAAU4C,KAAWC,EAAE,GAGzB,OAAO7C,GAGTR,EAAuB4D,mBAAqB,SAC1CnB,EACAjB,EACAC,EACAC,EACAuB,GAEA,IAAIP,EAAKD,EAAUE,wBAAwBnB,EAAIW,GAC3CS,EAAKH,EAAUE,wBAAwBlB,EAAIY,GAC3CwB,EAAQ,IAAIf,qBAAmBJ,EAAIE,EAAIH,GAEvCI,EAAIgB,EAAMd,gBAAkBrB,EAC5BE,EAAcC,KAAKC,IAAI,EAAGD,KAAKE,KAAKC,aAAWC,KAAKY,KACpDK,EAAcrB,KAAKK,IAAI,EAAGN,GAC1BuB,EAA0BU,EAAMd,gBAAkBG,EAMlD1C,EAHFyC,GADG1C,UAAQ0C,GACF,GAGKA,EAChBzC,EAAUxB,OAAuB,EAAdkE,EAGnB,IADA,IAAIE,EAAQ,EACHxC,EAAI,EAAGA,EAAIsC,EAAatC,IAAK,CACpC,IAAIkD,EAAID,EAAME,gCACZnD,EAAIuC,EACJb,GAEEe,EAAIZ,EAAUuB,wBAAwBF,EAAGvB,GAC7C/B,EAAU4C,KAAWC,EAAEI,EACvBjD,EAAU4C,KAAWC,EAAEK,EACvBlD,EAAU4C,KAAWC,EAAEM,EAGzB,OAAOnD,GAGT,IAAIyD,EAA0B,IAAIvD,aAC9BwD,EAA0B,IAAIxD,aAC9ByD,EAA0B,IAAIzD,aAC9B0D,EAA0B,IAAI1D,aAElCV,EAAuBqE,8BAAgC,SACrDC,EACAC,EACAC,EACA/B,EACAgC,GAEAhC,EAAYiC,eAAajC,EAAWkC,YAAUC,OAE9C,IAAIC,EAAKZ,EACLa,EAAKZ,EACLb,EAAIc,EACJY,EAAKX,EAET,GACE7D,UAAQ+D,IACR/D,UAAQ+D,EAASU,aACjBzE,UAAQ+D,EAASU,WAAWC,UAK5B,IAHA,IAAIzE,EAAY8D,EAASU,WAAWC,SAASC,OACzClG,EAASwB,EAAUxB,OAAS,EAEvB4B,EAAI,EAAGA,EAAI5B,EAAQ4B,GAAK,EAC/BF,aAAWyE,UAAU3E,EAAWI,EAAGyC,GAEnCZ,EAAU2C,sBAAsB/B,EAAGwB,GACnCE,EAAKtC,EAAU4C,uBAAuBhC,EAAG0B,GACzCD,EAAKpE,aAAW6C,iBAAiBsB,EAAIL,EAAWM,GAChDA,EAAKpE,aAAW8C,IAAIuB,EAAID,EAAIA,GAC5BtE,EAAUI,EAAI5B,GAAU8F,EAAGrB,EAC3BjD,EAAUI,EAAI,EAAI5B,GAAU8F,EAAGpB,EAC/BlD,EAAUI,EAAI,EAAI5B,GAAU8F,EAAGnB,EAE3Bc,IACFM,EAAKrE,aAAW4E,MAAMjC,EAAG0B,IAE3BD,EAAKpE,aAAW6C,iBAAiBsB,EAAIN,EAAWO,GAChDA,EAAKpE,aAAW8C,IAAIuB,EAAID,EAAIA,GAC5BtE,EAAUI,GAAKkE,EAAGrB,EAClBjD,EAAUI,EAAI,GAAKkE,EAAGpB,EACtBlD,EAAUI,EAAI,GAAKkE,EAAGnB,EAG1B,OAAOW,GAGTtE,EAAuBuF,6BAA+B,SACpDrF,EACAsF,EACA/C,GAIA,IAIIvB,EACAlC,EALAyG,EAAW,GACXC,EAAQ,IAAIlH,EAKhB,IAJAkH,EAAMxG,QAAQgB,GAIU,IAAjBwF,EAAM1G,QAAc,CACzB,IAAI2G,EAAYD,EAAMrG,UAClBuG,EAAYD,EAAUnF,UAC1B,GAAIgF,EAEF,IADAxG,EAAS4G,EAAU5G,OACd4B,EAAI,EAAGA,EAAI5B,EAAQ4B,IACtB6B,EAAU4C,uBAAuBO,EAAUhF,GAAIgF,EAAUhF,IAQ7D,MALAgF,EAAYC,wBACVD,EACAlF,aAAWoF,eACX,IAEY9G,OAAS,GAAvB,CAMA,IAFA,IAAI+G,EAAcJ,EAAUlF,MAAQkF,EAAUlF,MAAMzB,OAAS,EAExD4B,EAAI,EAAGA,EAAImF,EAAanF,IAAK,CAChC,IAAIoF,EAAOL,EAAUlF,MAAMG,GACvBqF,EAAgBD,EAAKxF,UACzB,GAAIgF,EAEF,IADAxG,EAASiH,EAAcjH,OAClBkC,EAAI,EAAGA,EAAIlC,IAAUkC,EACxBuB,EAAU4C,uBAAuBY,EAAc/E,GAAI+E,EAAc/E,IAQrE,MALA+E,EAAgBJ,wBACdI,EACAvF,aAAWoF,eACX,IAEgB9G,OAAS,GAA3B,CAGAyG,EAASrG,KAAK6G,GAEd,IAAIC,EAAmB,EAKvB,IAJI3F,UAAQyF,EAAKvF,SACfyF,EAAmBF,EAAKvF,MAAMzB,QAG3BkC,EAAI,EAAGA,EAAIgF,EAAkBhF,IAChCwE,EAAMxG,QAAQ8G,EAAKvF,MAAMS,KAI7BuE,EAASrG,KAAKwG,IAGhB,OAAOH,GAGTzF,EAAuBmG,sBAAwB,SAC7CjG,EACAkG,EACAZ,EACA/C,GAIA,IAAIpC,EAAY,GACZoF,EAAW,GAEXC,EAAQ,IAAIlH,EAGhB,IAFAkH,EAAMxG,QAAQgB,GAEU,IAAjBwF,EAAM1G,QAAc,CACzB,IAKIA,EALA2G,EAAYD,EAAMrG,UAClBuG,EAAYD,EAAUnF,UACtBC,EAAQkF,EAAUlF,MAItB,GAAI+E,EAEF,IADAxG,EAAS4G,EAAU5G,OACd4B,EAAI,EAAGA,EAAI5B,EAAQ4B,IACtB6B,EAAU4C,uBAAuBO,EAAUhF,GAAIgF,EAAUhF,IAS7D,MALAgF,EAAYC,wBACVD,EACAlF,aAAWoF,eACX,IAEY9G,OAAS,GAAvB,CAIA,IAAIqH,EAAcD,EAAkBR,GACpC,GAAKrF,UAAQ8F,GAAb,CAGA,IAAIC,EAAc,GAESC,kBAAgBC,sBACzCH,KAE2BI,eAAaC,YACxCL,EAAYM,UACZf,EAAYA,EAAUnG,QAAQkH,WAQhC,IALA,IAGIzF,EAHAV,EAAYoF,EAAUnG,QACtBsG,EAAcxF,UAAQE,GAASA,EAAMzB,OAAS,EAC9C4H,EAAe,GAGdhG,EAAI,EAAGA,EAAImF,EAAanF,IAAK,CAChC,IAAIoF,EAAOvF,EAAMG,GACbqF,EAAgBD,EAAKxF,UACzB,GAAIgF,EAEF,IADAxG,EAASiH,EAAcjH,OAClBkC,EAAI,EAAGA,EAAIlC,IAAUkC,EACxBuB,EAAU4C,uBAAuBY,EAAc/E,GAAI+E,EAAc/E,IASrE,MALA+E,EAAgBJ,wBACdI,EACAvF,aAAWoF,eACX,IAEgB9G,OAAS,GAA3B,CAIA,IAAI6H,EAAkBT,EAAkBH,GACxC,GAAK1F,UAAQsG,GAAb,CAIuBN,kBAAgBC,sBACrCK,KAE2BJ,eAAaC,YACxCG,EAAgBF,UAChBV,EAAgBA,EAAcxG,QAAQkH,WAGxCC,EAAaxH,KAAK6G,GAClBK,EAAYlH,KAAKoB,EAAUxB,QAI3B,IAHAwB,EAAYA,EAAUsG,OAAOb,GAC7BI,EAAcA,EAAYS,OAAOD,GAE7BX,EAAmB,EAKvB,IAJI3F,UAAQyF,EAAKvF,SACfyF,EAAmBF,EAAKvF,MAAMzB,QAG3BkC,EAAI,EAAGA,EAAIgF,EAAkBhF,IAChCwE,EAAMxG,QAAQ8G,EAAKvF,MAAMS,MAI7Bb,EAAUjB,KAAK,CACbwG,UAAWA,EACXnF,MAAOmG,IAETnB,EAASrG,KAAK,CACZoB,UAAWA,EACX6F,YAAaA,EACb5F,MAAO6F,MAIX,MAAO,CACLjG,UAAWA,EACXoF,SAAUA,IAId,IAAIsB,EAAqC,IAAIC,aACzCC,EAAqC,IAAIvG,aACzCwG,EAAqC,IAAIC,aACzCC,EAAkC,IAAIC,UAC1CrH,EAAuBsH,yBAA2B,SAChDC,EACAC,EACAhH,EACAiH,EACAxE,GAkBA,IAhBA,IAAIyE,EAAWP,aAAWQ,cACxBJ,EACAE,EACAP,GAEEU,EAAgBP,UAAQQ,eAC1BH,EACAN,GAGEU,EAAOC,OAAOC,kBACdC,EAAOF,OAAOG,kBACdC,EAAOJ,OAAOC,kBACdI,EAAOL,OAAOG,kBAEdlJ,EAASwB,EAAUxB,OACd4B,EAAI,EAAGA,EAAI5B,IAAU4B,EAAG,CAC/B,IAAIyC,EAAI3C,aAAW4E,MAAM9E,EAAUI,GAAIqG,GACvCI,UAAQgB,iBAAiBT,EAAevE,EAAGA,GACvCiF,EAAKd,EAAiBnE,EAAG0D,GAEzBxG,UAAQ+H,KACVR,EAAOjG,KAAK0G,IAAIT,EAAMQ,EAAG7E,GACzBwE,EAAOpG,KAAKC,IAAImG,EAAMK,EAAG7E,GAEzB0E,EAAOtG,KAAK0G,IAAIJ,EAAMG,EAAG5E,GACzB0E,EAAOvG,KAAKC,IAAIsG,EAAME,EAAG5E,IAQ7B,OAJAT,EAAOQ,EAAIqE,EACX7E,EAAOS,EAAIyE,EACXlF,EAAOuF,MAAQP,EAAOH,EACtB7E,EAAOwF,OAASL,EAAOD,EAChBlF,GAGTjD,EAAuB0I,4BAA8B,SACnDjG,EACAkG,EACAC,EACAnE,EACAoE,EACAC,GAEA,IAAIC,EAAUxC,kBAAgByC,YAAYL,EAAQtC,YAAasC,EAAQlI,OAGnEsI,EAAQ/J,OAAS,IACnB+J,EAAU,CAAC,EAAG,EAAG,IAGnB,IAAIvI,EAAYmI,EAAQnI,UAExB,GAAIiE,EAAmB,CAIrB,IAHA,IAAIzF,EAASwB,EAAUxB,OACnBiK,EAAqB,IAAI7H,MAAe,EAATpC,GAC/BoE,EAAQ,EACHxC,EAAI,EAAGA,EAAI5B,EAAQ4B,IAAK,CAC/B,IAAIyC,EAAI7C,EAAUI,GAClBqI,EAAmB7F,KAAWC,EAAEI,EAChCwF,EAAmB7F,KAAWC,EAAEK,EAChCuF,EAAmB7F,KAAWC,EAAEM,EAE9BW,EAAW,IAAI4E,WAAS,CAC1BlE,WAAY,CACVC,SAAU,IAAIkE,oBAAkB,CAC9BC,kBAAmBC,oBAAkBC,OACrCC,uBAAwB,EACxBrE,OAAQ+D,KAGZF,QAASA,EACTS,cAAeC,gBAAcC,YAG/B,OAAIb,EAAac,OACRC,mBAAiBC,cAAcvF,GAGjCA,EAGT,OAAIwE,IAAYgB,UAAQC,SACfxD,kBAAgByD,mBACrBvH,EACAjC,EACAuI,EACAH,GAEOE,IAAYgB,UAAQG,MACtB1D,kBAAgB2D,4BACrBzH,EACAjC,EACAuI,EACAH,QALG,GAUT,IAAIuB,EAA+B,GAC/BC,EAAY,IAAI1J,aAChB2J,EAAY,IAAI3J,aAEpBV,EAAuBsK,oBAAsB,SAC3C9J,EACAiC,EACAmG,EACAnE,EACAqE,GAEA,IAAIyB,EACAC,EACA5J,EAIA5B,EAASwB,EAAUxB,OACnBoE,EAAQ,EAEZ,GAAKqB,EAsEH,IAFA+F,EAAyB,EAATxL,EAAa,EAC7BuL,EAAgB,IAAInJ,MAAsB,EAAhBoJ,GACrB5J,EAAI,EAAGA,EAAI5B,EAAQ4B,IACtBa,EAAKjB,EAAUI,GACfmE,EAAKvE,GAAWI,EAAI,GAAK5B,GACzBuL,EAAcnH,GAASmH,EAAcnH,EAAQoH,GAAiB/I,EAAGgC,EAEjE8G,IADEnH,GACqBmH,EAAcnH,EAAQoH,GAAiB/I,EAAGiC,EAEjE6G,IADEnH,GACqBmH,EAAcnH,EAAQoH,GAAiB/I,EAAGkC,EAEjE4G,IADEnH,GACqBmH,EAAcnH,EAAQoH,GAAiBzF,EAAGtB,EAEjE8G,IADEnH,GACqBmH,EAAcnH,EAAQoH,GAAiBzF,EAAGrB,EAEjE6G,IADEnH,GACqBmH,EAAcnH,EAAQoH,GAAiBzF,EAAGpB,IAC/DP,MApFkB,CACtB,IAAI1B,EAAcM,aAAWyI,YAC3B7B,EACAnG,EAAUiI,eAGRxH,EAAc,EAClB,GAAI4F,IAAYgB,UAAQC,SACtB,IAAKnJ,EAAI,EAAGA,EAAI5B,EAAQ4B,IACtBsC,GAAelD,EAAuBuB,mBACpCf,EAAUI,GACVJ,GAAWI,EAAI,GAAK5B,GACpB0C,QAGC,GAAIoH,IAAYgB,UAAQG,MAC7B,IAAKrJ,EAAI,EAAGA,EAAI5B,EAAQ4B,IACtBsC,GAAelD,EAAuBwC,wBACpCC,EACAjC,EAAUI,GACVJ,GAAWI,EAAI,GAAK5B,GACpB0C,GAON,IAFA8I,EAAyC,GAAxBtH,EAAclE,GAC/BuL,EAAgB,IAAInJ,MAAsB,EAAhBoJ,GACrB5J,EAAI,EAAGA,EAAI5B,EAAQ4B,IAAK,CAI3B,IAAI+J,EAHJlJ,EAAKjB,EAAUI,GACfmE,EAAKvE,GAAWI,EAAI,GAAK5B,GAGrB8J,IAAYgB,UAAQC,SACtBY,EAAgB3K,EAAuBgD,cACrCvB,EACAsD,EACArD,EACAyI,GAEOrB,IAAYgB,UAAQG,QAC7BU,EAAgB3K,EAAuB4D,mBACrCnB,EACAhB,EACAsD,EACArD,EACAyI,IAIJ,IADA,IAAIS,EAAsBD,EAAc3L,OAC/BkC,EAAI,EAAGA,EAAI0J,IAAuB1J,IAAKkC,EAC9CmH,EAAcnH,GAASuH,EAAczJ,GACrCqJ,EAAcnH,EAAQoH,GAAiBG,EAAczJ,GAGvDqJ,EAAcnH,GAAS2B,EAAGtB,EAC1B8G,EAAcnH,EAAQoH,GAAiBzF,EAAGtB,EAG1C8G,IAFEnH,GAEqB2B,EAAGrB,EAC1B6G,EAAcnH,EAAQoH,GAAiBzF,EAAGrB,EAG1C6G,IAFEnH,GAEqB2B,EAAGpB,EAC1B4G,EAAcnH,EAAQoH,GAAiBzF,EAAGpB,IACxCP,GAwBN,IADApE,EAASuL,EAAcvL,OACnB+J,EAAU8B,gBAAcC,iBAC1B9L,EAAS,EACTA,EAA4B,EAAnBwB,EAAUxB,QAEjB+L,EAAY,EAGhB,IAFA/L,GAAU,EAEL4B,EAAI,EAAGA,EAAI5B,EAAQ4B,IAAK,CAC3B,IAAIoK,EAAKpK,EACLqK,EAAKD,EAAK,EACVE,EAAKF,EAAKhM,EACVmM,EAAKD,EAAK,EAEdzJ,EAAKf,aAAWyE,UAAUoF,EAAoB,EAALS,EAAQZ,GACjDrF,EAAKrE,aAAWyE,UAAUoF,EAAoB,EAALU,EAAQZ,GAE/C3J,aAAWoF,cACTrE,EACAsD,EACA/C,aAAWoJ,UACXpJ,aAAWoJ,aAOfrC,EAAQgC,KAAeC,EACvBjC,EAAQgC,KAAeG,EACvBnC,EAAQgC,KAAeE,EACvBlC,EAAQgC,KAAeE,EACvBlC,EAAQgC,KAAeG,EACvBnC,EAAQgC,KAAeI,GAGzB,OAAO,IAAIjC,WAAS,CAClBlE,WAAY,IAAIqG,qBAAmB,CACjCpG,SAAU,IAAIkE,oBAAkB,CAC9BC,kBAAmBC,oBAAkBC,OACrCC,uBAAwB,EACxBrE,OAAQqF,MAGZxB,QAASA,EACTS,cAAeC,gBAAcC"}