{"version":3,"file":"createPolylineVolumeOutlineGeometry.js","sources":["../../../../Source/Core/PolylineVolumeOutlineGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(positions, shape) {\n  var attributes = new GeometryAttributes();\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions,\n  });\n\n  var shapeLength = shape.length;\n  var vertexCount = attributes.position.values.length / 3;\n  var positionLength = positions.length / 3;\n  var shapeCount = positionLength / shapeLength;\n  var indices = IndexDatatype.createTypedArray(\n    vertexCount,\n    2 * shapeLength * (shapeCount + 1)\n  );\n  var i, j;\n  var index = 0;\n  i = 0;\n  var offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  i = shapeCount - 1;\n  offset = i * shapeLength;\n  for (j = 0; j < shapeLength - 1; j++) {\n    indices[index++] = j + offset;\n    indices[index++] = j + offset + 1;\n  }\n  indices[index++] = shapeLength - 1 + offset;\n  indices[index++] = offset;\n\n  for (i = 0; i < shapeCount - 1; i++) {\n    var firstOffset = shapeLength * i;\n    var secondOffset = firstOffset + shapeLength;\n    for (j = 0; j < shapeLength; j++) {\n      indices[index++] = j + firstOffset;\n      indices[index++] = j + secondOffset;\n    }\n  }\n\n  var geometry = new Geometry({\n    attributes: attributes,\n    indices: IndexDatatype.createTypedArray(vertexCount, indices),\n    boundingSphere: BoundingSphere.fromVertices(positions),\n    primitiveType: PrimitiveType.LINES,\n  });\n\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeOutlineGeometry#createGeometry\n *\n * @example\n * function computeCircle(radius) {\n *   var positions = [];\n *   for (var i = 0; i < 360; i++) {\n *     var radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.polylinePositions;\n  var shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._workerName = \"createPolylineVolumeOutlineGeometry\";\n\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineVolumeOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  height: undefined,\n  cornerType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n */\nPolylineVolumeOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeOutlineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nvar brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeOutlineGeometry.createGeometry = function (\n  polylineVolumeOutlineGeometry\n) {\n  var positions = polylineVolumeOutlineGeometry._positions;\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  var shape2D = polylineVolumeOutlineGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\n  ) {\n    shape2D.reverse();\n  }\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(\n    cleanPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeOutlineGeometry,\n    false\n  );\n  return computeAttributes(computedPositions, shape2D);\n};\nexport default PolylineVolumeOutlineGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\n\nfunction createPolylineVolumeOutlineGeometry(\n  polylineVolumeOutlineGeometry,\n  offset\n) {\n  if (defined(offset)) {\n    polylineVolumeOutlineGeometry = PolylineVolumeOutlineGeometry.unpack(\n      polylineVolumeOutlineGeometry,\n      offset\n    );\n  }\n  polylineVolumeOutlineGeometry._ellipsoid = Ellipsoid.clone(\n    polylineVolumeOutlineGeometry._ellipsoid\n  );\n  return PolylineVolumeOutlineGeometry.createGeometry(\n    polylineVolumeOutlineGeometry\n  );\n}\nexport default createPolylineVolumeOutlineGeometry;\n"],"names":["PolylineVolumeOutlineGeometry","options","positions","defaultValue","EMPTY_OBJECT","polylinePositions","shape","shapePositions","defined","DeveloperError","this","_positions","_shape","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","CornerType","ROUNDED","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_workerName","numComponents","length","Cartesian3","packedLength","Cartesian2","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchOptions","undefined","height","unpack","result","Array","brScratch","BoundingRectangle","createGeometry","polylineVolumeOutlineGeometry","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","shape2D","PolylineVolumeGeometryLibrary","removeDuplicatesFromShape","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","boundingRectangle","fromPoints","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","shapeLength","vertexCount","shapeCount","indices","IndexDatatype","createTypedArray","index","offset","j","firstOffset","secondOffset","Geometry","boundingSphere","BoundingSphere","fromVertices","primitiveType","PrimitiveType","LINES","computeAttributes","computePositions"],"mappings":"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"}