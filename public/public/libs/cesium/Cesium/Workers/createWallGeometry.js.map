{"version":3,"file":"createWallGeometry.js","sources":["../../../../Source/Core/WallGeometry.js","../../../../Source/WorkersES6/createWallGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WallGeometryLibrary from \"./WallGeometryLibrary.js\";\n\nvar scratchCartesian3Position1 = new Cartesian3();\nvar scratchCartesian3Position2 = new Cartesian3();\nvar scratchCartesian3Position4 = new Cartesian3();\nvar scratchCartesian3Position5 = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchNormal = new Cartesian3();\n\n/**\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @alias WallGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\n *\n * @see WallGeometry#createGeometry\n * @see WallGeometry#fromConstantHeight\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n *\n * @example\n * // create a wall that spans from ground level to 10000 meters\n * var wall = new Cesium.WallGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *     19.0, 47.0, 10000.0,\n *     19.0, 48.0, 10000.0,\n *     20.0, 48.0, 10000.0,\n *     20.0, 47.0, 10000.0,\n *     19.0, 47.0, 10000.0\n *   ])\n * });\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\n */\nfunction WallGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var wallPositions = options.positions;\n  var maximumHeights = options.maximumHeights;\n  var minimumHeights = options.minimumHeights;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(wallPositions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n  if (\n    defined(maximumHeights) &&\n    maximumHeights.length !== wallPositions.length\n  ) {\n    throw new DeveloperError(\n      \"options.positions and options.maximumHeights must have the same length.\"\n    );\n  }\n  if (\n    defined(minimumHeights) &&\n    minimumHeights.length !== wallPositions.length\n  ) {\n    throw new DeveloperError(\n      \"options.positions and options.minimumHeights must have the same length.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  var granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  this._positions = wallPositions;\n  this._minimumHeights = minimumHeights;\n  this._maximumHeights = maximumHeights;\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._granularity = granularity;\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._workerName = \"createWallGeometry\";\n\n  var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n  if (defined(minimumHeights)) {\n    numComponents += minimumHeights.length;\n  }\n  if (defined(maximumHeights)) {\n    numComponents += maximumHeights.length;\n  }\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {WallGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nWallGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var minimumHeights = value._minimumHeights;\n  length = defined(minimumHeights) ? minimumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(minimumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = minimumHeights[i];\n    }\n  }\n\n  var maximumHeights = value._maximumHeights;\n  length = defined(maximumHeights) ? maximumHeights.length : 0;\n  array[startingIndex++] = length;\n\n  if (defined(maximumHeights)) {\n    for (i = 0; i < length; ++i) {\n      array[startingIndex++] = maximumHeights[i];\n    }\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  positions: undefined,\n  minimumHeights: undefined,\n  maximumHeights: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {WallGeometry} [result] The object into which to store the result.\n * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\n */\nWallGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var minimumHeights;\n\n  if (length > 0) {\n    minimumHeights = new Array(length);\n    for (i = 0; i < length; ++i) {\n      minimumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  length = array[startingIndex++];\n  var maximumHeights;\n\n  if (length > 0) {\n    maximumHeights = new Array(length);\n    for (i = 0; i < length; ++i) {\n      maximumHeights[i] = array[startingIndex++];\n    }\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.minimumHeights = minimumHeights;\n    scratchOptions.maximumHeights = maximumHeights;\n    scratchOptions.granularity = granularity;\n    return new WallGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._minimumHeights = minimumHeights;\n  result._maximumHeights = maximumHeights;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._granularity = granularity;\n\n  return result;\n};\n\n/**\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {WallGeometry}\n *\n *\n * @example\n * // create a wall that spans from 10000 meters to 20000 meters\n * var wall = Cesium.WallGeometry.fromConstantHeights({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     19.0, 47.0,\n *     19.0, 48.0,\n *     20.0, 48.0,\n *     20.0, 47.0,\n *     19.0, 47.0,\n *   ]),\n *   minimumHeight : 20000.0,\n *   maximumHeight : 10000.0\n * });\n * var geometry = Cesium.WallGeometry.createGeometry(wall);\n *\n * @see WallGeometry#createGeometry\n */\nWallGeometry.fromConstantHeights = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.positions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var minHeights;\n  var maxHeights;\n\n  var min = options.minimumHeight;\n  var max = options.maximumHeight;\n\n  var doMin = defined(min);\n  var doMax = defined(max);\n  if (doMin || doMax) {\n    var length = positions.length;\n    minHeights = doMin ? new Array(length) : undefined;\n    maxHeights = doMax ? new Array(length) : undefined;\n\n    for (var i = 0; i < length; ++i) {\n      if (doMin) {\n        minHeights[i] = min;\n      }\n\n      if (doMax) {\n        maxHeights[i] = max;\n      }\n    }\n  }\n\n  var newOptions = {\n    positions: positions,\n    maximumHeights: maxHeights,\n    minimumHeights: minHeights,\n    ellipsoid: options.ellipsoid,\n    vertexFormat: options.vertexFormat,\n  };\n  return new WallGeometry(newOptions);\n};\n\n/**\n * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\n *\n * @param {WallGeometry} wallGeometry A description of the wall.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nWallGeometry.createGeometry = function (wallGeometry) {\n  var wallPositions = wallGeometry._positions;\n  var minimumHeights = wallGeometry._minimumHeights;\n  var maximumHeights = wallGeometry._maximumHeights;\n  var vertexFormat = wallGeometry._vertexFormat;\n  var granularity = wallGeometry._granularity;\n  var ellipsoid = wallGeometry._ellipsoid;\n\n  var pos = WallGeometryLibrary.computePositions(\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights,\n    granularity,\n    true\n  );\n  if (!defined(pos)) {\n    return;\n  }\n\n  var bottomPositions = pos.bottomPositions;\n  var topPositions = pos.topPositions;\n  var numCorners = pos.numCorners;\n\n  var length = topPositions.length;\n  var size = length * 2;\n\n  var positions = vertexFormat.position ? new Float64Array(size) : undefined;\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array((size / 3) * 2)\n    : undefined;\n\n  var positionIndex = 0;\n  var normalIndex = 0;\n  var bitangentIndex = 0;\n  var tangentIndex = 0;\n  var stIndex = 0;\n\n  // add lower and upper points one after the other, lower\n  // points being even and upper points being odd\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n  var recomputeNormal = true;\n  length /= 3;\n  var i;\n  var s = 0;\n  var ds = 1 / (length - numCorners - 1);\n  for (i = 0; i < length; ++i) {\n    var i3 = i * 3;\n    var topPosition = Cartesian3.fromArray(\n      topPositions,\n      i3,\n      scratchCartesian3Position1\n    );\n    var bottomPosition = Cartesian3.fromArray(\n      bottomPositions,\n      i3,\n      scratchCartesian3Position2\n    );\n    if (vertexFormat.position) {\n      // insert the lower point\n      positions[positionIndex++] = bottomPosition.x;\n      positions[positionIndex++] = bottomPosition.y;\n      positions[positionIndex++] = bottomPosition.z;\n\n      // insert the upper point\n      positions[positionIndex++] = topPosition.x;\n      positions[positionIndex++] = topPosition.y;\n      positions[positionIndex++] = topPosition.z;\n    }\n\n    if (vertexFormat.st) {\n      textureCoordinates[stIndex++] = s;\n      textureCoordinates[stIndex++] = 0.0;\n\n      textureCoordinates[stIndex++] = s;\n      textureCoordinates[stIndex++] = 1.0;\n    }\n\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n      var nextTop = Cartesian3.clone(\n        Cartesian3.ZERO,\n        scratchCartesian3Position5\n      );\n      var groundPosition = Cartesian3.subtract(\n        topPosition,\n        ellipsoid.geodeticSurfaceNormal(\n          topPosition,\n          scratchCartesian3Position2\n        ),\n        scratchCartesian3Position2\n      );\n      if (i + 1 < length) {\n        nextTop = Cartesian3.fromArray(\n          topPositions,\n          i3 + 3,\n          scratchCartesian3Position5\n        );\n      }\n\n      if (recomputeNormal) {\n        var scalednextPosition = Cartesian3.subtract(\n          nextTop,\n          topPosition,\n          scratchCartesian3Position4\n        );\n        var scaledGroundPosition = Cartesian3.subtract(\n          groundPosition,\n          topPosition,\n          scratchCartesian3Position1\n        );\n        normal = Cartesian3.normalize(\n          Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal),\n          normal\n        );\n        recomputeNormal = false;\n      }\n\n      if (\n        Cartesian3.equalsEpsilon(topPosition, nextTop, CesiumMath.EPSILON10)\n      ) {\n        recomputeNormal = true;\n      } else {\n        s += ds;\n        if (vertexFormat.tangent) {\n          tangent = Cartesian3.normalize(\n            Cartesian3.subtract(nextTop, topPosition, tangent),\n            tangent\n          );\n        }\n        if (vertexFormat.bitangent) {\n          bitangent = Cartesian3.normalize(\n            Cartesian3.cross(normal, tangent, bitangent),\n            bitangent\n          );\n        }\n      }\n\n      if (vertexFormat.normal) {\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n\n        normals[normalIndex++] = normal.x;\n        normals[normalIndex++] = normal.y;\n        normals[normalIndex++] = normal.z;\n      }\n\n      if (vertexFormat.tangent) {\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n\n        tangents[tangentIndex++] = tangent.x;\n        tangents[tangentIndex++] = tangent.y;\n        tangents[tangentIndex++] = tangent.z;\n      }\n\n      if (vertexFormat.bitangent) {\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n\n        bitangents[bitangentIndex++] = bitangent.x;\n        bitangents[bitangentIndex++] = bitangent.y;\n        bitangents[bitangentIndex++] = bitangent.z;\n      }\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  // prepare the side walls, two triangles for each wall\n  //\n  //    A (i+1)  B (i+3) E\n  //    +--------+-------+\n  //    |      / |      /|    triangles:  A C B\n  //    |     /  |     / |                B C D\n  //    |    /   |    /  |\n  //    |   /    |   /   |\n  //    |  /     |  /    |\n  //    | /      | /     |\n  //    +--------+-------+\n  //    C (i)    D (i+2) F\n  //\n\n  var numVertices = size / 3;\n  size -= 6 * (numCorners + 1);\n  var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n  var edgeIndex = 0;\n  for (i = 0; i < numVertices - 2; i += 2) {\n    var LL = i;\n    var LR = i + 2;\n    var pl = Cartesian3.fromArray(\n      positions,\n      LL * 3,\n      scratchCartesian3Position1\n    );\n    var pr = Cartesian3.fromArray(\n      positions,\n      LR * 3,\n      scratchCartesian3Position2\n    );\n    if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n      continue;\n    }\n    var UL = i + 1;\n    var UR = i + 3;\n\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere.fromVertices(positions),\n  });\n};\nexport default WallGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport WallGeometry from \"../Core/WallGeometry.js\";\n\nfunction createWallGeometry(wallGeometry, offset) {\n  if (defined(offset)) {\n    wallGeometry = WallGeometry.unpack(wallGeometry, offset);\n  }\n  wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\n  return WallGeometry.createGeometry(wallGeometry);\n}\nexport default createWallGeometry;\n"],"names":["scratchCartesian3Position1","Cartesian3","scratchCartesian3Position2","scratchCartesian3Position4","scratchCartesian3Position5","scratchBitangent","scratchTangent","scratchNormal","WallGeometry","options","wallPositions","defaultValue","EMPTY_OBJECT","positions","maximumHeights","minimumHeights","defined","DeveloperError","length","vertexFormat","VertexFormat","DEFAULT","granularity","CesiumMath","RADIANS_PER_DEGREE","ellipsoid","Ellipsoid","WGS84","this","_positions","_minimumHeights","_maximumHeights","_vertexFormat","clone","_granularity","_ellipsoid","_workerName","numComponents","packedLength","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","fromConstantHeights","min","minimumHeight","max","maximumHeight","doMin","doMax","minHeights","maxHeights","createGeometry","wallGeometry","pos","WallGeometryLibrary","computePositions","bottomPositions","topPositions","numCorners","size","position","Float64Array","normals","normal","Float32Array","tangents","tangent","bitangents","bitangent","textureCoordinates","st","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","recomputeNormal","s","ds","nextTop","i3","topPosition","fromArray","bottomPosition","x","y","z","ZERO","groundPosition","subtract","geodeticSurfaceNormal","scalednextPosition","scaledGroundPosition","normalize","cross","equalsEpsilon","EPSILON10","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","numVertices","indices","IndexDatatype","createTypedArray","edgeIndex","LL","LR","pl","pr","UR","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromVertices","offset"],"mappings":"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"}