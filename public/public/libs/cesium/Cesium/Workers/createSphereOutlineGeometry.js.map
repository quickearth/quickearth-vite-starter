{"version":3,"file":"createSphereOutlineGeometry.js","sources":["../../../../Source/Core/SphereOutlineGeometry.js","../../../../Source/WorkersES6/createSphereOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipsoidOutlineGeometry from \"./EllipsoidOutlineGeometry.js\";\n\n/**\n * A description of the outline of a sphere.\n *\n * @alias SphereOutlineGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.radius=1.0] The radius of the sphere.\n * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\n * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\n * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\n *\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n *\n * @example\n * var sphere = new Cesium.SphereOutlineGeometry({\n *   radius : 100.0,\n *   stackPartitions : 6,\n *   slicePartitions: 5\n * });\n * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\n */\nfunction SphereOutlineGeometry(options) {\n  var radius = defaultValue(options.radius, 1.0);\n  var radii = new Cartesian3(radius, radius, radius);\n  var ellipsoidOptions = {\n    radii: radii,\n    stackPartitions: options.stackPartitions,\n    slicePartitions: options.slicePartitions,\n    subdivisions: options.subdivisions,\n  };\n\n  this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\n  this._workerName = \"createSphereOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nSphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {SphereOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nSphereOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n\n  return EllipsoidOutlineGeometry.pack(\n    value._ellipsoidGeometry,\n    array,\n    startingIndex\n  );\n};\n\nvar scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\nvar scratchOptions = {\n  radius: undefined,\n  radii: new Cartesian3(),\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  subdivisions: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {SphereOutlineGeometry} [result] The object into which to store the result.\n * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\n */\nSphereOutlineGeometry.unpack = function (array, startingIndex, result) {\n  var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipsoidGeometry\n  );\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\n  scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\n    return new SphereOutlineGeometry(scratchOptions);\n  }\n\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\n  result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\n *\n * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nSphereOutlineGeometry.createGeometry = function (sphereGeometry) {\n  return EllipsoidOutlineGeometry.createGeometry(\n    sphereGeometry._ellipsoidGeometry\n  );\n};\nexport default SphereOutlineGeometry;\n","import defined from \"../Core/defined.js\";\nimport SphereOutlineGeometry from \"../Core/SphereOutlineGeometry.js\";\n\nfunction createSphereOutlineGeometry(sphereGeometry, offset) {\n  if (defined(offset)) {\n    sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\n  }\n  return SphereOutlineGeometry.createGeometry(sphereGeometry);\n}\nexport default createSphereOutlineGeometry;\n"],"names":["SphereOutlineGeometry","options","radius","defaultValue","ellipsoidOptions","radii","Cartesian3","stackPartitions","slicePartitions","subdivisions","this","_ellipsoidGeometry","EllipsoidOutlineGeometry","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","unpack","result","ellipsoidGeometry","_stackPartitions","_slicePartitions","_subdivisions","defined","clone","_radii","x","createGeometry","sphereGeometry","offset"],"mappings":"2ZA8BA,SAASA,EAAsBC,GAC7B,IAAIC,EAASC,eAAaF,EAAQC,OAAQ,GAEtCE,EAAmB,CACrBC,MAFU,IAAIC,aAAWJ,EAAQA,EAAQA,GAGzCK,gBAAiBN,EAAQM,gBACzBC,gBAAiBP,EAAQO,gBACzBC,aAAcR,EAAQQ,cAGxBC,KAAKC,mBAAqB,IAAIC,2BAAyBR,GACvDM,KAAKG,YAAc,8BAOrBb,EAAsBc,aAAeF,2BAAyBE,aAW9Dd,EAAsBe,KAAO,SAAUC,EAAOC,EAAOC,GAKnD,OAHAC,QAAMC,OAAOC,OAAO,QAASL,GAGtBJ,2BAAyBG,KAC9BC,EAAML,mBACNM,EACAC,IAIJ,IAAII,EAA2B,IAAIV,2BAC/BW,EAAiB,CACnBrB,YAAQsB,EACRnB,MAAO,IAAIC,aACXC,qBAAiBiB,EACjBhB,qBAAiBgB,EACjBf,kBAAce,UAWhBxB,EAAsByB,OAAS,SAAUR,EAAOC,EAAeQ,GACzDC,EAAoBf,2BAAyBa,OAC/CR,EACAC,EACAI,GAMF,OAJAC,EAAehB,gBAAkBoB,EAAkBC,iBACnDL,EAAef,gBAAkBmB,EAAkBE,iBACnDN,EAAed,aAAekB,EAAkBG,cAE3CC,UAAQL,IAKbpB,aAAW0B,MAAML,EAAkBM,OAAQV,EAAelB,OAC1DqB,EAAOf,mBAAqB,IAAIC,2BAAyBW,GAClDG,IANLH,EAAerB,OAASyB,EAAkBM,OAAOC,EAC1C,IAAIlC,EAAsBuB,KAcrCvB,EAAsBmC,eAAiB,SAAUC,GAC/C,OAAOxB,2BAAyBuB,eAC9BC,EAAezB,qBCjHnB,SAAqCyB,EAAgBC,GAInD,OAHIN,UAAQM,KACVD,EAAiBpC,EAAsByB,OAAOW,EAAgBC,IAEzDrC,EAAsBmC,eAAeC"}