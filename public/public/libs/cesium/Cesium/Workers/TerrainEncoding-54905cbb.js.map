{"version":3,"file":"TerrainEncoding-54905cbb.js","sources":["../../../../Source/Core/EllipsoidalOccluder.js","../../../../Source/Core/TerrainQuantization.js","../../../../Source/Core/TerrainEncoding.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Rectangle from \"./Rectangle.js\";\n\n/**\n * Determine whether or not other objects are visible or hidden behind the visible horizon defined by\n * an {@link Ellipsoid} and a camera position.  The ellipsoid is assumed to be located at the\n * origin of the coordinate system.  This class uses the algorithm described in the\n * {@link https://cesium.com/blog/2013/04/25/Horizon-culling/|Horizon Culling} blog post.\n *\n * @alias EllipsoidalOccluder\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid to use as an occluder.\n * @param {Cartesian3} [cameraPosition] The coordinate of the viewer/camera.  If this parameter is not\n *        specified, {@link EllipsoidalOccluder#cameraPosition} must be called before\n *        testing visibility.\n *\n * @constructor\n *\n * @example\n * // Construct an ellipsoidal occluder with radii 1.0, 1.1, and 0.9.\n * var cameraPosition = new Cesium.Cartesian3(5.0, 6.0, 7.0);\n * var occluderEllipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\n * var occluder = new Cesium.EllipsoidalOccluder(occluderEllipsoid, cameraPosition);\n *\n * @private\n */\nfunction EllipsoidalOccluder(ellipsoid, cameraPosition) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"ellipsoid\", ellipsoid);\n  //>>includeEnd('debug');\n\n  this._ellipsoid = ellipsoid;\n  this._cameraPosition = new Cartesian3();\n  this._cameraPositionInScaledSpace = new Cartesian3();\n  this._distanceToLimbInScaledSpaceSquared = 0.0;\n\n  // cameraPosition fills in the above values\n  if (defined(cameraPosition)) {\n    this.cameraPosition = cameraPosition;\n  }\n}\n\nObject.defineProperties(EllipsoidalOccluder.prototype, {\n  /**\n   * Gets the occluding ellipsoid.\n   * @memberof EllipsoidalOccluder.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n  /**\n   * Gets or sets the position of the camera.\n   * @memberof EllipsoidalOccluder.prototype\n   * @type {Cartesian3}\n   */\n  cameraPosition: {\n    get: function () {\n      return this._cameraPosition;\n    },\n    set: function (cameraPosition) {\n      // See https://cesium.com/blog/2013/04/25/Horizon-culling/\n      var ellipsoid = this._ellipsoid;\n      var cv = ellipsoid.transformPositionToScaledSpace(\n        cameraPosition,\n        this._cameraPositionInScaledSpace\n      );\n      var vhMagnitudeSquared = Cartesian3.magnitudeSquared(cv) - 1.0;\n\n      Cartesian3.clone(cameraPosition, this._cameraPosition);\n      this._cameraPositionInScaledSpace = cv;\n      this._distanceToLimbInScaledSpaceSquared = vhMagnitudeSquared;\n    },\n  },\n});\n\nvar scratchCartesian = new Cartesian3();\n\n/**\n * Determines whether or not a point, the <code>occludee</code>, is hidden from view by the occluder.\n *\n * @param {Cartesian3} occludee The point to test for visibility.\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n *\n * @example\n * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\n * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\n * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\n * var point = new Cesium.Cartesian3(0, -3, -3);\n * occluder.isPointVisible(point); //returns true\n */\nEllipsoidalOccluder.prototype.isPointVisible = function (occludee) {\n  var ellipsoid = this._ellipsoid;\n  var occludeeScaledSpacePosition = ellipsoid.transformPositionToScaledSpace(\n    occludee,\n    scratchCartesian\n  );\n  return isScaledSpacePointVisible(\n    occludeeScaledSpacePosition,\n    this._cameraPositionInScaledSpace,\n    this._distanceToLimbInScaledSpaceSquared\n  );\n};\n\n/**\n * Determines whether or not a point expressed in the ellipsoid scaled space, is hidden from view by the\n * occluder.  To transform a Cartesian X, Y, Z position in the coordinate system aligned with the ellipsoid\n * into the scaled space, call {@link Ellipsoid#transformPositionToScaledSpace}.\n *\n * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space.\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n *\n * @example\n * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\n * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\n * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\n * var point = new Cesium.Cartesian3(0, -3, -3);\n * var scaledSpacePoint = ellipsoid.transformPositionToScaledSpace(point);\n * occluder.isScaledSpacePointVisible(scaledSpacePoint); //returns true\n */\nEllipsoidalOccluder.prototype.isScaledSpacePointVisible = function (\n  occludeeScaledSpacePosition\n) {\n  return isScaledSpacePointVisible(\n    occludeeScaledSpacePosition,\n    this._cameraPositionInScaledSpace,\n    this._distanceToLimbInScaledSpaceSquared\n  );\n};\n\nvar scratchCameraPositionInScaledSpaceShrunk = new Cartesian3();\n\n/**\n * Similar to {@link EllipsoidalOccluder#isScaledSpacePointVisible} except tests against an\n * ellipsoid that has been shrunk by the minimum height when the minimum height is below\n * the ellipsoid. This is intended to be used with points generated by\n * {@link EllipsoidalOccluder#computeHorizonCullingPointPossiblyUnderEllipsoid} or\n * {@link EllipsoidalOccluder#computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid}.\n *\n * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space of the possibly-shrunk ellipsoid.\n * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n */\nEllipsoidalOccluder.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid = function (\n  occludeeScaledSpacePosition,\n  minimumHeight\n) {\n  var ellipsoid = this._ellipsoid;\n  var vhMagnitudeSquared;\n  var cv;\n\n  if (\n    defined(minimumHeight) &&\n    minimumHeight < 0.0 &&\n    ellipsoid.minimumRadius > -minimumHeight\n  ) {\n    // This code is similar to the cameraPosition setter, but unrolled for performance because it will be called a lot.\n    cv = scratchCameraPositionInScaledSpaceShrunk;\n    cv.x = this._cameraPosition.x / (ellipsoid.radii.x + minimumHeight);\n    cv.y = this._cameraPosition.y / (ellipsoid.radii.y + minimumHeight);\n    cv.z = this._cameraPosition.z / (ellipsoid.radii.z + minimumHeight);\n    vhMagnitudeSquared = cv.x * cv.x + cv.y * cv.y + cv.z * cv.z - 1.0;\n  } else {\n    cv = this._cameraPositionInScaledSpace;\n    vhMagnitudeSquared = this._distanceToLimbInScaledSpaceSquared;\n  }\n\n  return isScaledSpacePointVisible(\n    occludeeScaledSpacePosition,\n    cv,\n    vhMagnitudeSquared\n  );\n};\n\n/**\n * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\n * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\n * is expressed in the ellipsoid-scaled space and is suitable for use with\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\n *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                       ellipsoid's axes.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPoint = function (\n  directionToPoint,\n  positions,\n  result\n) {\n  return computeHorizonCullingPointFromPositions(\n    this._ellipsoid,\n    directionToPoint,\n    positions,\n    result\n  );\n};\n\nvar scratchEllipsoidShrunk = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n\n/**\n * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPoint} except computes the culling\n * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\n * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\n * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\n *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                       ellipsoid's axes.\n * @param {Number} [minimumHeight] The minimum height of all positions. If this value is undefined, all positions are assumed to be above the ellipsoid.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid = function (\n  directionToPoint,\n  positions,\n  minimumHeight,\n  result\n) {\n  var possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(\n    this._ellipsoid,\n    minimumHeight,\n    scratchEllipsoidShrunk\n  );\n  return computeHorizonCullingPointFromPositions(\n    possiblyShrunkEllipsoid,\n    directionToPoint,\n    positions,\n    result\n  );\n};\n/**\n * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\n * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\n * is expressed in the ellipsoid-scaled space and is suitable for use with\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\n *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                   ellipsoid's axes.\n * @param {Number} [stride=3]\n * @param {Cartesian3} [center=Cartesian3.ZERO]\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices = function (\n  directionToPoint,\n  vertices,\n  stride,\n  center,\n  result\n) {\n  return computeHorizonCullingPointFromVertices(\n    this._ellipsoid,\n    directionToPoint,\n    vertices,\n    stride,\n    center,\n    result\n  );\n};\n\n/**\n * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPointFromVertices} except computes the culling\n * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\n * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\n * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\n *\n * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\n *                     A reasonable direction to use is the direction from the center of the ellipsoid to\n *                     the center of the bounding sphere computed from the positions.  The direction need not\n *                     be normalized.\n * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\n *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\n *                   ellipsoid's axes.\n * @param {Number} [stride=3]\n * @param {Cartesian3} [center=Cartesian3.ZERO]\n * @param {Number} [minimumHeight] The minimum height of all vertices. If this value is undefined, all vertices are assumed to be above the ellipsoid.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid = function (\n  directionToPoint,\n  vertices,\n  stride,\n  center,\n  minimumHeight,\n  result\n) {\n  var possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(\n    this._ellipsoid,\n    minimumHeight,\n    scratchEllipsoidShrunk\n  );\n  return computeHorizonCullingPointFromVertices(\n    possiblyShrunkEllipsoid,\n    directionToPoint,\n    vertices,\n    stride,\n    center,\n    result\n  );\n};\n\nvar subsampleScratch = [];\n\n/**\n * Computes a point that can be used for horizon culling of a rectangle.  If the point is below\n * the horizon, the ellipsoid-conforming rectangle is guaranteed to be below the horizon as well.\n * The returned point is expressed in the ellipsoid-scaled space and is suitable for use with\n * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\n *\n * @param {Rectangle} rectangle The rectangle for which to compute the horizon culling point.\n * @param {Ellipsoid} ellipsoid The ellipsoid on which the rectangle is defined.  This may be different from\n *                    the ellipsoid used by this instance for occlusion testing.\n * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\n * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\n */\nEllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle = function (\n  rectangle,\n  ellipsoid,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  //>>includeEnd('debug');\n\n  var positions = Rectangle.subsample(\n    rectangle,\n    ellipsoid,\n    0.0,\n    subsampleScratch\n  );\n  var bs = BoundingSphere.fromPoints(positions);\n\n  // If the bounding sphere center is too close to the center of the occluder, it doesn't make\n  // sense to try to horizon cull it.\n  if (Cartesian3.magnitude(bs.center) < 0.1 * ellipsoid.minimumRadius) {\n    return undefined;\n  }\n\n  return this.computeHorizonCullingPoint(bs.center, positions, result);\n};\n\nvar scratchEllipsoidShrunkRadii = new Cartesian3();\n\nfunction getPossiblyShrunkEllipsoid(ellipsoid, minimumHeight, result) {\n  if (\n    defined(minimumHeight) &&\n    minimumHeight < 0.0 &&\n    ellipsoid.minimumRadius > -minimumHeight\n  ) {\n    var ellipsoidShrunkRadii = Cartesian3.fromElements(\n      ellipsoid.radii.x + minimumHeight,\n      ellipsoid.radii.y + minimumHeight,\n      ellipsoid.radii.z + minimumHeight,\n      scratchEllipsoidShrunkRadii\n    );\n    ellipsoid = Ellipsoid.fromCartesian3(ellipsoidShrunkRadii, result);\n  }\n  return ellipsoid;\n}\n\nfunction computeHorizonCullingPointFromPositions(\n  ellipsoid,\n  directionToPoint,\n  positions,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"directionToPoint\", directionToPoint);\n  Check.defined(\"positions\", positions);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(\n    ellipsoid,\n    directionToPoint\n  );\n  var resultMagnitude = 0.0;\n\n  for (var i = 0, len = positions.length; i < len; ++i) {\n    var position = positions[i];\n    var candidateMagnitude = computeMagnitude(\n      ellipsoid,\n      position,\n      scaledSpaceDirectionToPoint\n    );\n    if (candidateMagnitude < 0.0) {\n      // all points should face the same direction, but this one doesn't, so return undefined\n      return undefined;\n    }\n    resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\n  }\n\n  return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\n}\n\nvar positionScratch = new Cartesian3();\n\nfunction computeHorizonCullingPointFromVertices(\n  ellipsoid,\n  directionToPoint,\n  vertices,\n  stride,\n  center,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"directionToPoint\", directionToPoint);\n  Check.defined(\"vertices\", vertices);\n  Check.typeOf.number(\"stride\", stride);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  stride = defaultValue(stride, 3);\n  center = defaultValue(center, Cartesian3.ZERO);\n  var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(\n    ellipsoid,\n    directionToPoint\n  );\n  var resultMagnitude = 0.0;\n\n  for (var i = 0, len = vertices.length; i < len; i += stride) {\n    positionScratch.x = vertices[i] + center.x;\n    positionScratch.y = vertices[i + 1] + center.y;\n    positionScratch.z = vertices[i + 2] + center.z;\n\n    var candidateMagnitude = computeMagnitude(\n      ellipsoid,\n      positionScratch,\n      scaledSpaceDirectionToPoint\n    );\n    if (candidateMagnitude < 0.0) {\n      // all points should face the same direction, but this one doesn't, so return undefined\n      return undefined;\n    }\n    resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\n  }\n\n  return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\n}\n\nfunction isScaledSpacePointVisible(\n  occludeeScaledSpacePosition,\n  cameraPositionInScaledSpace,\n  distanceToLimbInScaledSpaceSquared\n) {\n  // See https://cesium.com/blog/2013/04/25/Horizon-culling/\n  var cv = cameraPositionInScaledSpace;\n  var vhMagnitudeSquared = distanceToLimbInScaledSpaceSquared;\n  var vt = Cartesian3.subtract(\n    occludeeScaledSpacePosition,\n    cv,\n    scratchCartesian\n  );\n  var vtDotVc = -Cartesian3.dot(vt, cv);\n  // If vhMagnitudeSquared < 0 then we are below the surface of the ellipsoid and\n  // in this case, set the culling plane to be on V.\n  var isOccluded =\n    vhMagnitudeSquared < 0\n      ? vtDotVc > 0\n      : vtDotVc > vhMagnitudeSquared &&\n        (vtDotVc * vtDotVc) / Cartesian3.magnitudeSquared(vt) >\n          vhMagnitudeSquared;\n  return !isOccluded;\n}\n\nvar scaledSpaceScratch = new Cartesian3();\nvar directionScratch = new Cartesian3();\n\nfunction computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint) {\n  var scaledSpacePosition = ellipsoid.transformPositionToScaledSpace(\n    position,\n    scaledSpaceScratch\n  );\n  var magnitudeSquared = Cartesian3.magnitudeSquared(scaledSpacePosition);\n  var magnitude = Math.sqrt(magnitudeSquared);\n  var direction = Cartesian3.divideByScalar(\n    scaledSpacePosition,\n    magnitude,\n    directionScratch\n  );\n\n  // For the purpose of this computation, points below the ellipsoid are consider to be on it instead.\n  magnitudeSquared = Math.max(1.0, magnitudeSquared);\n  magnitude = Math.max(1.0, magnitude);\n\n  var cosAlpha = Cartesian3.dot(direction, scaledSpaceDirectionToPoint);\n  var sinAlpha = Cartesian3.magnitude(\n    Cartesian3.cross(direction, scaledSpaceDirectionToPoint, direction)\n  );\n  var cosBeta = 1.0 / magnitude;\n  var sinBeta = Math.sqrt(magnitudeSquared - 1.0) * cosBeta;\n\n  return 1.0 / (cosAlpha * cosBeta - sinAlpha * sinBeta);\n}\n\nfunction magnitudeToPoint(\n  scaledSpaceDirectionToPoint,\n  resultMagnitude,\n  result\n) {\n  // The horizon culling point is undefined if there were no positions from which to compute it,\n  // the directionToPoint is pointing opposite all of the positions,  or if we computed NaN or infinity.\n  if (\n    resultMagnitude <= 0.0 ||\n    resultMagnitude === 1.0 / 0.0 ||\n    resultMagnitude !== resultMagnitude\n  ) {\n    return undefined;\n  }\n\n  return Cartesian3.multiplyByScalar(\n    scaledSpaceDirectionToPoint,\n    resultMagnitude,\n    result\n  );\n}\n\nvar directionToPointScratch = new Cartesian3();\n\nfunction computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint) {\n  if (Cartesian3.equals(directionToPoint, Cartesian3.ZERO)) {\n    return directionToPoint;\n  }\n\n  ellipsoid.transformPositionToScaledSpace(\n    directionToPoint,\n    directionToPointScratch\n  );\n  return Cartesian3.normalize(directionToPointScratch, directionToPointScratch);\n}\nexport default EllipsoidalOccluder;\n","/**\n * This enumerated type is used to determine how the vertices of the terrain mesh are compressed.\n *\n * @enum {Number}\n *\n * @private\n */\nvar TerrainQuantization = {\n  /**\n   * The vertices are not compressed.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NONE: 0,\n\n  /**\n   * The vertices are compressed to 12 bits.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BITS12: 1,\n};\nexport default Object.freeze(TerrainQuantization);\n","import AttributeCompression from \"./AttributeCompression.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport TerrainQuantization from \"./TerrainQuantization.js\";\n\nvar cartesian3Scratch = new Cartesian3();\nvar cartesian3DimScratch = new Cartesian3();\nvar cartesian2Scratch = new Cartesian2();\nvar matrix4Scratch = new Matrix4();\nvar matrix4Scratch2 = new Matrix4();\n\nvar SHIFT_LEFT_12 = Math.pow(2.0, 12.0);\n\n/**\n * Data used to quantize and pack the terrain mesh. The position can be unpacked for picking and all attributes\n * are unpacked in the vertex shader.\n *\n * @alias TerrainEncoding\n * @constructor\n *\n * @param {AxisAlignedBoundingBox} axisAlignedBoundingBox The bounds of the tile in the east-north-up coordinates at the tiles center.\n * @param {Number} minimumHeight The minimum height.\n * @param {Number} maximumHeight The maximum height.\n * @param {Matrix4} fromENU The east-north-up to fixed frame matrix at the center of the terrain mesh.\n * @param {Boolean} hasVertexNormals If the mesh has vertex normals.\n * @param {Boolean} [hasWebMercatorT=false] true if the terrain data includes a Web Mercator texture coordinate; otherwise, false.\n *\n * @private\n */\nfunction TerrainEncoding(\n  axisAlignedBoundingBox,\n  minimumHeight,\n  maximumHeight,\n  fromENU,\n  hasVertexNormals,\n  hasWebMercatorT\n) {\n  var quantization = TerrainQuantization.NONE;\n  var center;\n  var toENU;\n  var matrix;\n\n  if (\n    defined(axisAlignedBoundingBox) &&\n    defined(minimumHeight) &&\n    defined(maximumHeight) &&\n    defined(fromENU)\n  ) {\n    var minimum = axisAlignedBoundingBox.minimum;\n    var maximum = axisAlignedBoundingBox.maximum;\n\n    var dimensions = Cartesian3.subtract(\n      maximum,\n      minimum,\n      cartesian3DimScratch\n    );\n    var hDim = maximumHeight - minimumHeight;\n    var maxDim = Math.max(Cartesian3.maximumComponent(dimensions), hDim);\n\n    if (maxDim < SHIFT_LEFT_12 - 1.0) {\n      quantization = TerrainQuantization.BITS12;\n    } else {\n      quantization = TerrainQuantization.NONE;\n    }\n\n    center = axisAlignedBoundingBox.center;\n    toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\n\n    var translation = Cartesian3.negate(minimum, cartesian3Scratch);\n    Matrix4.multiply(\n      Matrix4.fromTranslation(translation, matrix4Scratch),\n      toENU,\n      toENU\n    );\n\n    var scale = cartesian3Scratch;\n    scale.x = 1.0 / dimensions.x;\n    scale.y = 1.0 / dimensions.y;\n    scale.z = 1.0 / dimensions.z;\n    Matrix4.multiply(Matrix4.fromScale(scale, matrix4Scratch), toENU, toENU);\n\n    matrix = Matrix4.clone(fromENU);\n    Matrix4.setTranslation(matrix, Cartesian3.ZERO, matrix);\n\n    fromENU = Matrix4.clone(fromENU, new Matrix4());\n\n    var translationMatrix = Matrix4.fromTranslation(minimum, matrix4Scratch);\n    var scaleMatrix = Matrix4.fromScale(dimensions, matrix4Scratch2);\n    var st = Matrix4.multiply(translationMatrix, scaleMatrix, matrix4Scratch);\n\n    Matrix4.multiply(fromENU, st, fromENU);\n    Matrix4.multiply(matrix, st, matrix);\n  }\n\n  /**\n   * How the vertices of the mesh were compressed.\n   * @type {TerrainQuantization}\n   */\n  this.quantization = quantization;\n\n  /**\n   * The minimum height of the tile including the skirts.\n   * @type {Number}\n   */\n  this.minimumHeight = minimumHeight;\n\n  /**\n   * The maximum height of the tile.\n   * @type {Number}\n   */\n  this.maximumHeight = maximumHeight;\n\n  /**\n   * The center of the tile.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n\n  /**\n   * A matrix that takes a vertex from the tile, transforms it to east-north-up at the center and scales\n   * it so each component is in the [0, 1] range.\n   * @type {Matrix4}\n   */\n  this.toScaledENU = toENU;\n\n  /**\n   * A matrix that restores a vertex transformed with toScaledENU back to the earth fixed reference frame\n   * @type {Matrix4}\n   */\n  this.fromScaledENU = fromENU;\n\n  /**\n   * The matrix used to decompress the terrain vertices in the shader for RTE rendering.\n   * @type {Matrix4}\n   */\n  this.matrix = matrix;\n\n  /**\n   * The terrain mesh contains normals.\n   * @type {Boolean}\n   */\n  this.hasVertexNormals = hasVertexNormals;\n\n  /**\n   * The terrain mesh contains a vertical texture coordinate following the Web Mercator projection.\n   * @type {Boolean}\n   */\n  this.hasWebMercatorT = defaultValue(hasWebMercatorT, false);\n}\n\nTerrainEncoding.prototype.encode = function (\n  vertexBuffer,\n  bufferIndex,\n  position,\n  uv,\n  height,\n  normalToPack,\n  webMercatorT\n) {\n  var u = uv.x;\n  var v = uv.y;\n\n  if (this.quantization === TerrainQuantization.BITS12) {\n    position = Matrix4.multiplyByPoint(\n      this.toScaledENU,\n      position,\n      cartesian3Scratch\n    );\n\n    position.x = CesiumMath.clamp(position.x, 0.0, 1.0);\n    position.y = CesiumMath.clamp(position.y, 0.0, 1.0);\n    position.z = CesiumMath.clamp(position.z, 0.0, 1.0);\n\n    var hDim = this.maximumHeight - this.minimumHeight;\n    var h = CesiumMath.clamp((height - this.minimumHeight) / hDim, 0.0, 1.0);\n\n    Cartesian2.fromElements(position.x, position.y, cartesian2Scratch);\n    var compressed0 = AttributeCompression.compressTextureCoordinates(\n      cartesian2Scratch\n    );\n\n    Cartesian2.fromElements(position.z, h, cartesian2Scratch);\n    var compressed1 = AttributeCompression.compressTextureCoordinates(\n      cartesian2Scratch\n    );\n\n    Cartesian2.fromElements(u, v, cartesian2Scratch);\n    var compressed2 = AttributeCompression.compressTextureCoordinates(\n      cartesian2Scratch\n    );\n\n    vertexBuffer[bufferIndex++] = compressed0;\n    vertexBuffer[bufferIndex++] = compressed1;\n    vertexBuffer[bufferIndex++] = compressed2;\n\n    if (this.hasWebMercatorT) {\n      Cartesian2.fromElements(webMercatorT, 0.0, cartesian2Scratch);\n      var compressed3 = AttributeCompression.compressTextureCoordinates(\n        cartesian2Scratch\n      );\n      vertexBuffer[bufferIndex++] = compressed3;\n    }\n  } else {\n    Cartesian3.subtract(position, this.center, cartesian3Scratch);\n\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.x;\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.y;\n    vertexBuffer[bufferIndex++] = cartesian3Scratch.z;\n    vertexBuffer[bufferIndex++] = height;\n    vertexBuffer[bufferIndex++] = u;\n    vertexBuffer[bufferIndex++] = v;\n\n    if (this.hasWebMercatorT) {\n      vertexBuffer[bufferIndex++] = webMercatorT;\n    }\n  }\n\n  if (this.hasVertexNormals) {\n    vertexBuffer[bufferIndex++] = AttributeCompression.octPackFloat(\n      normalToPack\n    );\n  }\n\n  return bufferIndex;\n};\n\nTerrainEncoding.prototype.decodePosition = function (buffer, index, result) {\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  index *= this.getStride();\n\n  if (this.quantization === TerrainQuantization.BITS12) {\n    var xy = AttributeCompression.decompressTextureCoordinates(\n      buffer[index],\n      cartesian2Scratch\n    );\n    result.x = xy.x;\n    result.y = xy.y;\n\n    var zh = AttributeCompression.decompressTextureCoordinates(\n      buffer[index + 1],\n      cartesian2Scratch\n    );\n    result.z = zh.x;\n\n    return Matrix4.multiplyByPoint(this.fromScaledENU, result, result);\n  }\n\n  result.x = buffer[index];\n  result.y = buffer[index + 1];\n  result.z = buffer[index + 2];\n  return Cartesian3.add(result, this.center, result);\n};\n\nTerrainEncoding.prototype.decodeTextureCoordinates = function (\n  buffer,\n  index,\n  result\n) {\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  index *= this.getStride();\n\n  if (this.quantization === TerrainQuantization.BITS12) {\n    return AttributeCompression.decompressTextureCoordinates(\n      buffer[index + 2],\n      result\n    );\n  }\n\n  return Cartesian2.fromElements(buffer[index + 4], buffer[index + 5], result);\n};\n\nTerrainEncoding.prototype.decodeHeight = function (buffer, index) {\n  index *= this.getStride();\n\n  if (this.quantization === TerrainQuantization.BITS12) {\n    var zh = AttributeCompression.decompressTextureCoordinates(\n      buffer[index + 1],\n      cartesian2Scratch\n    );\n    return (\n      zh.y * (this.maximumHeight - this.minimumHeight) + this.minimumHeight\n    );\n  }\n\n  return buffer[index + 3];\n};\n\nTerrainEncoding.prototype.decodeWebMercatorT = function (buffer, index) {\n  index *= this.getStride();\n\n  if (this.quantization === TerrainQuantization.BITS12) {\n    return AttributeCompression.decompressTextureCoordinates(\n      buffer[index + 3],\n      cartesian2Scratch\n    ).x;\n  }\n\n  return buffer[index + 6];\n};\n\nTerrainEncoding.prototype.getOctEncodedNormal = function (\n  buffer,\n  index,\n  result\n) {\n  var stride = this.getStride();\n  index = (index + 1) * stride - 1;\n\n  var temp = buffer[index] / 256.0;\n  var x = Math.floor(temp);\n  var y = (temp - x) * 256.0;\n\n  return Cartesian2.fromElements(x, y, result);\n};\n\nTerrainEncoding.prototype.getStride = function () {\n  var vertexStride;\n\n  switch (this.quantization) {\n    case TerrainQuantization.BITS12:\n      vertexStride = 3;\n      break;\n    default:\n      vertexStride = 6;\n  }\n\n  if (this.hasWebMercatorT) {\n    ++vertexStride;\n  }\n\n  if (this.hasVertexNormals) {\n    ++vertexStride;\n  }\n\n  return vertexStride;\n};\n\nvar attributesNone = {\n  position3DAndHeight: 0,\n  textureCoordAndEncodedNormals: 1,\n};\nvar attributes = {\n  compressed0: 0,\n  compressed1: 1,\n};\n\nTerrainEncoding.prototype.getAttributes = function (buffer) {\n  var datatype = ComponentDatatype.FLOAT;\n  var sizeInBytes = ComponentDatatype.getSizeInBytes(datatype);\n  var stride;\n\n  if (this.quantization === TerrainQuantization.NONE) {\n    var position3DAndHeightLength = 4;\n    var numTexCoordComponents = 2;\n\n    if (this.hasWebMercatorT) {\n      ++numTexCoordComponents;\n    }\n\n    if (this.hasVertexNormals) {\n      ++numTexCoordComponents;\n    }\n\n    stride = (position3DAndHeightLength + numTexCoordComponents) * sizeInBytes;\n\n    return [\n      {\n        index: attributesNone.position3DAndHeight,\n        vertexBuffer: buffer,\n        componentDatatype: datatype,\n        componentsPerAttribute: position3DAndHeightLength,\n        offsetInBytes: 0,\n        strideInBytes: stride,\n      },\n      {\n        index: attributesNone.textureCoordAndEncodedNormals,\n        vertexBuffer: buffer,\n        componentDatatype: datatype,\n        componentsPerAttribute: numTexCoordComponents,\n        offsetInBytes: position3DAndHeightLength * sizeInBytes,\n        strideInBytes: stride,\n      },\n    ];\n  }\n\n  var numCompressed0 = 3;\n  var numCompressed1 = 0;\n\n  if (this.hasWebMercatorT || this.hasVertexNormals) {\n    ++numCompressed0;\n  }\n\n  if (this.hasWebMercatorT && this.hasVertexNormals) {\n    ++numCompressed1;\n\n    stride = (numCompressed0 + numCompressed1) * sizeInBytes;\n\n    return [\n      {\n        index: attributes.compressed0,\n        vertexBuffer: buffer,\n        componentDatatype: datatype,\n        componentsPerAttribute: numCompressed0,\n        offsetInBytes: 0,\n        strideInBytes: stride,\n      },\n      {\n        index: attributes.compressed1,\n        vertexBuffer: buffer,\n        componentDatatype: datatype,\n        componentsPerAttribute: numCompressed1,\n        offsetInBytes: numCompressed0 * sizeInBytes,\n        strideInBytes: stride,\n      },\n    ];\n  }\n  return [\n    {\n      index: attributes.compressed0,\n      vertexBuffer: buffer,\n      componentDatatype: datatype,\n      componentsPerAttribute: numCompressed0,\n    },\n  ];\n};\n\nTerrainEncoding.prototype.getAttributeLocations = function () {\n  if (this.quantization === TerrainQuantization.NONE) {\n    return attributesNone;\n  }\n  return attributes;\n};\n\nTerrainEncoding.clone = function (encoding, result) {\n  if (!defined(result)) {\n    result = new TerrainEncoding();\n  }\n\n  result.quantization = encoding.quantization;\n  result.minimumHeight = encoding.minimumHeight;\n  result.maximumHeight = encoding.maximumHeight;\n  result.center = Cartesian3.clone(encoding.center);\n  result.toScaledENU = Matrix4.clone(encoding.toScaledENU);\n  result.fromScaledENU = Matrix4.clone(encoding.fromScaledENU);\n  result.matrix = Matrix4.clone(encoding.matrix);\n  result.hasVertexNormals = encoding.hasVertexNormals;\n  result.hasWebMercatorT = encoding.hasWebMercatorT;\n  return result;\n};\nexport default TerrainEncoding;\n"],"names":["EllipsoidalOccluder","ellipsoid","cameraPosition","Check","typeOf","object","this","_ellipsoid","_cameraPosition","Cartesian3","_cameraPositionInScaledSpace","_distanceToLimbInScaledSpaceSquared","defined","Object","defineProperties","prototype","get","set","cv","transformPositionToScaledSpace","vhMagnitudeSquared","magnitudeSquared","clone","scratchCartesian","isPointVisible","occludee","isScaledSpacePointVisible","occludeeScaledSpacePosition","scratchCameraPositionInScaledSpaceShrunk","isScaledSpacePointVisiblePossiblyUnderEllipsoid","minimumHeight","minimumRadius","x","radii","y","z","computeHorizonCullingPoint","directionToPoint","positions","result","computeHorizonCullingPointFromPositions","scratchEllipsoidShrunk","Ellipsoid","UNIT_SPHERE","computeHorizonCullingPointPossiblyUnderEllipsoid","getPossiblyShrunkEllipsoid","computeHorizonCullingPointFromVertices","vertices","stride","center","computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid","subsampleScratch","computeHorizonCullingPointFromRectangle","rectangle","Rectangle","subsample","bs","BoundingSphere","fromPoints","magnitude","scratchEllipsoidShrunkRadii","ellipsoidShrunkRadii","fromElements","fromCartesian3","scaledSpaceDirectionToPoint","computeScaledSpaceDirectionToPoint","resultMagnitude","i","len","length","candidateMagnitude","computeMagnitude","Math","max","magnitudeToPoint","positionScratch","number","defaultValue","ZERO","cameraPositionInScaledSpace","distanceToLimbInScaledSpaceSquared","vt","subtract","vtDotVc","dot","scaledSpaceScratch","directionScratch","position","scaledSpacePosition","sqrt","direction","divideByScalar","cosBeta","cross","multiplyByScalar","directionToPointScratch","equals","normalize","freeze","NONE","BITS12","cartesian3Scratch","cartesian3DimScratch","cartesian2Scratch","Cartesian2","matrix4Scratch","Matrix4","matrix4Scratch2","SHIFT_LEFT_12","pow","TerrainEncoding","axisAlignedBoundingBox","maximumHeight","fromENU","hasVertexNormals","hasWebMercatorT","toENU","scale","translationMatrix","st","quantization","TerrainQuantization","minimum","maximum","dimensions","hDim","maximumComponent","inverseTransformation","translation","negate","multiply","fromTranslation","fromScale","matrix","setTranslation","scaleMatrix","toScaledENU","fromScaledENU","encode","vertexBuffer","bufferIndex","uv","height","normalToPack","webMercatorT","compressed1","compressed3","u","v","multiplyByPoint","CesiumMath","clamp","h","compressed0","AttributeCompression","compressTextureCoordinates","compressed2","octPackFloat","decodePosition","buffer","index","getStride","add","xy","decompressTextureCoordinates","zh","decodeTextureCoordinates","decodeHeight","decodeWebMercatorT","getOctEncodedNormal","temp","floor","vertexStride","attributesNone","position3DAndHeight","textureCoordAndEncodedNormals","attributes","getAttributes","datatype","ComponentDatatype","FLOAT","sizeInBytes","getSizeInBytes","numTexCoordComponents","componentDatatype","componentsPerAttribute","offsetInBytes","strideInBytes","numCompressed0","numCompressed1","getAttributeLocations","encoding"],"mappings":"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"}