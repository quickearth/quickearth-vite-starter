{"version":3,"file":"EllipsoidOutlineGeometry-03f4895c.js","sources":["../../../../Source/Core/EllipsoidOutlineGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nvar defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\nvar cos = Math.cos;\nvar sin = Math.sin;\n\n/**\n * A description of the outline of an ellipsoid centered at the origin.\n *\n * @alias EllipsoidOutlineGeometry\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\n * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\n * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\n * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\n * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\n * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\n *\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\n *\n * @example\n * var ellipsoid = new Cesium.EllipsoidOutlineGeometry({\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\n *   stackPartitions: 6,\n *   slicePartitions: 5\n * });\n * var geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\n */\nfunction EllipsoidOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  var radii = defaultValue(options.radii, defaultRadii);\n  var innerRadii = defaultValue(options.innerRadii, radii);\n  var minimumClock = defaultValue(options.minimumClock, 0.0);\n  var maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\n  var minimumCone = defaultValue(options.minimumCone, 0.0);\n  var maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\n  var stackPartitions = Math.round(defaultValue(options.stackPartitions, 10));\n  var slicePartitions = Math.round(defaultValue(options.slicePartitions, 8));\n  var subdivisions = Math.round(defaultValue(options.subdivisions, 128));\n\n  //>>includeStart('debug', pragmas.debug);\n  if (stackPartitions < 1) {\n    throw new DeveloperError(\"options.stackPartitions cannot be less than 1\");\n  }\n  if (slicePartitions < 0) {\n    throw new DeveloperError(\"options.slicePartitions cannot be less than 0\");\n  }\n  if (subdivisions < 0) {\n    throw new DeveloperError(\n      \"options.subdivisions must be greater than or equal to zero.\"\n    );\n  }\n  if (\n    defined(options.offsetAttribute) &&\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\n  ) {\n    throw new DeveloperError(\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._radii = Cartesian3.clone(radii);\n  this._innerRadii = Cartesian3.clone(innerRadii);\n  this._minimumClock = minimumClock;\n  this._maximumClock = maximumClock;\n  this._minimumCone = minimumCone;\n  this._maximumCone = maximumCone;\n  this._stackPartitions = stackPartitions;\n  this._slicePartitions = slicePartitions;\n  this._subdivisions = subdivisions;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createEllipsoidOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nEllipsoidOutlineGeometry.packedLength = 2 * Cartesian3.packedLength + 8;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {EllipsoidOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nEllipsoidOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._radii, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n\n  Cartesian3.pack(value._innerRadii, array, startingIndex);\n  startingIndex += Cartesian3.packedLength;\n\n  array[startingIndex++] = value._minimumClock;\n  array[startingIndex++] = value._maximumClock;\n  array[startingIndex++] = value._minimumCone;\n  array[startingIndex++] = value._maximumCone;\n  array[startingIndex++] = value._stackPartitions;\n  array[startingIndex++] = value._slicePartitions;\n  array[startingIndex++] = value._subdivisions;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchRadii = new Cartesian3();\nvar scratchInnerRadii = new Cartesian3();\nvar scratchOptions = {\n  radii: scratchRadii,\n  innerRadii: scratchInnerRadii,\n  minimumClock: undefined,\n  maximumClock: undefined,\n  minimumCone: undefined,\n  maximumCone: undefined,\n  stackPartitions: undefined,\n  slicePartitions: undefined,\n  subdivisions: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\n * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\n */\nEllipsoidOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\n  startingIndex += Cartesian3.packedLength;\n\n  var innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\n  startingIndex += Cartesian3.packedLength;\n\n  var minimumClock = array[startingIndex++];\n  var maximumClock = array[startingIndex++];\n  var minimumCone = array[startingIndex++];\n  var maximumCone = array[startingIndex++];\n  var stackPartitions = array[startingIndex++];\n  var slicePartitions = array[startingIndex++];\n  var subdivisions = array[startingIndex++];\n  var offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.minimumClock = minimumClock;\n    scratchOptions.maximumClock = maximumClock;\n    scratchOptions.minimumCone = minimumCone;\n    scratchOptions.maximumCone = maximumCone;\n    scratchOptions.stackPartitions = stackPartitions;\n    scratchOptions.slicePartitions = slicePartitions;\n    scratchOptions.subdivisions = subdivisions;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new EllipsoidOutlineGeometry(scratchOptions);\n  }\n\n  result._radii = Cartesian3.clone(radii, result._radii);\n  result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\n  result._minimumClock = minimumClock;\n  result._maximumClock = maximumClock;\n  result._minimumCone = minimumCone;\n  result._maximumCone = maximumCone;\n  result._stackPartitions = stackPartitions;\n  result._slicePartitions = slicePartitions;\n  result._subdivisions = subdivisions;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nEllipsoidOutlineGeometry.createGeometry = function (ellipsoidGeometry) {\n  var radii = ellipsoidGeometry._radii;\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\n    return;\n  }\n\n  var innerRadii = ellipsoidGeometry._innerRadii;\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\n    return;\n  }\n\n  var minimumClock = ellipsoidGeometry._minimumClock;\n  var maximumClock = ellipsoidGeometry._maximumClock;\n  var minimumCone = ellipsoidGeometry._minimumCone;\n  var maximumCone = ellipsoidGeometry._maximumCone;\n  var subdivisions = ellipsoidGeometry._subdivisions;\n  var ellipsoid = Ellipsoid.fromCartesian3(radii);\n\n  // Add an extra slice and stack to remain consistent with EllipsoidGeometry\n  var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n  var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n  slicePartitions = Math.round(\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\n      CesiumMath.TWO_PI\n  );\n  stackPartitions = Math.round(\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / CesiumMath.PI\n  );\n\n  if (slicePartitions < 2) {\n    slicePartitions = 2;\n  }\n  if (stackPartitions < 2) {\n    stackPartitions = 2;\n  }\n\n  var extraIndices = 0;\n  var vertexMultiplier = 1.0;\n  var hasInnerSurface =\n    innerRadii.x !== radii.x ||\n    innerRadii.y !== radii.y ||\n    innerRadii.z !== radii.z;\n  var isTopOpen = false;\n  var isBotOpen = false;\n  if (hasInnerSurface) {\n    vertexMultiplier = 2.0;\n    // Add 2x slicePartitions to connect the top/bottom of the outer to\n    // the top/bottom of the inner\n    if (minimumCone > 0.0) {\n      isTopOpen = true;\n      extraIndices += slicePartitions;\n    }\n    if (maximumCone < Math.PI) {\n      isBotOpen = true;\n      extraIndices += slicePartitions;\n    }\n  }\n\n  var vertexCount =\n    subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);\n  var positions = new Float64Array(vertexCount * 3);\n\n  // Multiply by two because two points define each line segment\n  var numIndices =\n    2 *\n    (vertexCount +\n      extraIndices -\n      (slicePartitions + stackPartitions) * vertexMultiplier);\n  var indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\n\n  var i;\n  var j;\n  var theta;\n  var phi;\n  var index = 0;\n\n  // Calculate sin/cos phi\n  var sinPhi = new Array(stackPartitions);\n  var cosPhi = new Array(stackPartitions);\n  for (i = 0; i < stackPartitions; i++) {\n    phi =\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1);\n    sinPhi[i] = sin(phi);\n    cosPhi[i] = cos(phi);\n  }\n\n  // Calculate sin/cos theta\n  var sinTheta = new Array(subdivisions);\n  var cosTheta = new Array(subdivisions);\n  for (i = 0; i < subdivisions; i++) {\n    theta =\n      minimumClock + (i * (maximumClock - minimumClock)) / (subdivisions - 1);\n    sinTheta[i] = sin(theta);\n    cosTheta[i] = cos(theta);\n  }\n\n  // Calculate the latitude lines on the outer surface\n  for (i = 0; i < stackPartitions; i++) {\n    for (j = 0; j < subdivisions; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Calculate the latitude lines on the inner surface\n  if (hasInnerSurface) {\n    for (i = 0; i < stackPartitions; i++) {\n      for (j = 0; j < subdivisions; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n      }\n    }\n  }\n\n  // Calculate sin/cos phi\n  sinPhi.length = subdivisions;\n  cosPhi.length = subdivisions;\n  for (i = 0; i < subdivisions; i++) {\n    phi = minimumCone + (i * (maximumCone - minimumCone)) / (subdivisions - 1);\n    sinPhi[i] = sin(phi);\n    cosPhi[i] = cos(phi);\n  }\n\n  // Calculate sin/cos theta for each slice partition\n  sinTheta.length = slicePartitions;\n  cosTheta.length = slicePartitions;\n  for (i = 0; i < slicePartitions; i++) {\n    theta =\n      minimumClock +\n      (i * (maximumClock - minimumClock)) / (slicePartitions - 1);\n    sinTheta[i] = sin(theta);\n    cosTheta[i] = cos(theta);\n  }\n\n  // Calculate the longitude lines on the outer surface\n  for (i = 0; i < subdivisions; i++) {\n    for (j = 0; j < slicePartitions; j++) {\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\n      positions[index++] = radii.z * cosPhi[i];\n    }\n  }\n\n  // Calculate the longitude lines on the inner surface\n  if (hasInnerSurface) {\n    for (i = 0; i < subdivisions; i++) {\n      for (j = 0; j < slicePartitions; j++) {\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\n        positions[index++] = innerRadii.z * cosPhi[i];\n      }\n    }\n  }\n\n  // Create indices for the latitude lines\n  index = 0;\n  for (i = 0; i < stackPartitions * vertexMultiplier; i++) {\n    var topOffset = i * subdivisions;\n    for (j = 0; j < subdivisions - 1; j++) {\n      indices[index++] = topOffset + j;\n      indices[index++] = topOffset + j + 1;\n    }\n  }\n\n  // Create indices for the outer longitude lines\n  var offset = stackPartitions * subdivisions * vertexMultiplier;\n  for (i = 0; i < slicePartitions; i++) {\n    for (j = 0; j < subdivisions - 1; j++) {\n      indices[index++] = offset + i + j * slicePartitions;\n      indices[index++] = offset + i + (j + 1) * slicePartitions;\n    }\n  }\n\n  // Create indices for the inner longitude lines\n  if (hasInnerSurface) {\n    offset =\n      stackPartitions * subdivisions * vertexMultiplier +\n      slicePartitions * subdivisions;\n    for (i = 0; i < slicePartitions; i++) {\n      for (j = 0; j < subdivisions - 1; j++) {\n        indices[index++] = offset + i + j * slicePartitions;\n        indices[index++] = offset + i + (j + 1) * slicePartitions;\n      }\n    }\n  }\n\n  if (hasInnerSurface) {\n    var outerOffset = stackPartitions * subdivisions * vertexMultiplier;\n    var innerOffset = outerOffset + subdivisions * slicePartitions;\n    if (isTopOpen) {\n      // Draw lines from the top of the inner surface to the top of the outer surface\n      for (i = 0; i < slicePartitions; i++) {\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n      }\n    }\n\n    if (isBotOpen) {\n      // Draw lines from the top of the inner surface to the top of the outer surface\n      outerOffset += subdivisions * slicePartitions - slicePartitions;\n      innerOffset += subdivisions * slicePartitions - slicePartitions;\n      for (i = 0; i < slicePartitions; i++) {\n        indices[index++] = outerOffset + i;\n        indices[index++] = innerOffset + i;\n      }\n    }\n  }\n\n  var attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    }),\n  });\n\n  if (defined(ellipsoidGeometry._offsetAttribute)) {\n    var length = positions.length;\n    var applyOffset = new Uint8Array(length / 3);\n    var offsetValue =\n      ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n        ? 0\n        : 1;\n    arrayFill(applyOffset, offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: BoundingSphere.fromEllipsoid(ellipsoid),\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\n  });\n};\nexport default EllipsoidOutlineGeometry;\n"],"names":["defaultRadii","Cartesian3","cos","Math","sin","EllipsoidOutlineGeometry","options","defaultValue","EMPTY_OBJECT","radii","innerRadii","minimumClock","maximumClock","CesiumMath","TWO_PI","minimumCone","maximumCone","PI","stackPartitions","round","slicePartitions","subdivisions","DeveloperError","defined","offsetAttribute","GeometryOffsetAttribute","TOP","this","_radii","clone","_innerRadii","_minimumClock","_maximumClock","_minimumCone","_maximumCone","_stackPartitions","_slicePartitions","_subdivisions","_offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchRadii","scratchInnerRadii","scratchOptions","undefined","unpack","result","createGeometry","ellipsoidGeometry","x","y","z","ellipsoid","Ellipsoid","fromCartesian3","abs","extraIndices","vertexMultiplier","hasInnerSurface","isTopOpen","isBotOpen","theta","phi","vertexCount","positions","Float64Array","indices","IndexDatatype","createTypedArray","index","sinPhi","Array","cosPhi","i","sinTheta","cosTheta","j","length","topOffset","offset","outerOffset","innerOffset","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","applyOffset","Uint8Array","offsetValue","NONE","arrayFill","UNSIGNED_BYTE","Geometry","primitiveType","PrimitiveType","LINES","boundingSphere","BoundingSphere","fromEllipsoid"],"mappings":"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"}