{"version":3,"file":"PolylineVolumeGeometryLibrary-ae862093.js","sources":["../../../../Source/Core/CornerType.js","../../../../Source/Core/PolylineVolumeGeometryLibrary.js"],"sourcesContent":["/**\n * Style options for corners.\n *\n * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\n * demonstrates the three corner types, as used by {@link CorridorGraphics}.\n *\n * @enum {Number}\n */\nvar CornerType = {\n  /**\n   * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n   *\n   * Corner has a smooth edge.\n   * @type {Number}\n   * @constant\n   */\n  ROUNDED: 0,\n\n  /**\n   * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n   *\n   * Corner point is the intersection of adjacent edges.\n   * @type {Number}\n   * @constant\n   */\n  MITERED: 1,\n\n  /**\n   * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n   *\n   * Corner is clipped.\n   * @type {Number}\n   * @constant\n   */\n  BEVELED: 2,\n};\nexport default Object.freeze(CornerType);\n","import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport CornerType from \"./CornerType.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Transforms from \"./Transforms.js\";\n\nvar scratch2Array = [new Cartesian3(), new Cartesian3()];\nvar scratchCartesian1 = new Cartesian3();\nvar scratchCartesian2 = new Cartesian3();\nvar scratchCartesian3 = new Cartesian3();\nvar scratchCartesian4 = new Cartesian3();\nvar scratchCartesian5 = new Cartesian3();\nvar scratchCartesian6 = new Cartesian3();\nvar scratchCartesian7 = new Cartesian3();\nvar scratchCartesian8 = new Cartesian3();\nvar scratchCartesian9 = new Cartesian3();\n\nvar scratch1 = new Cartesian3();\nvar scratch2 = new Cartesian3();\n\n/**\n * @private\n */\nvar PolylineVolumeGeometryLibrary = {};\n\nvar cartographic = new Cartographic();\nfunction scaleToSurface(positions, ellipsoid) {\n  var heights = new Array(positions.length);\n  for (var i = 0; i < positions.length; i++) {\n    var pos = positions[i];\n    cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\n    heights[i] = cartographic.height;\n    positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\n  }\n  return heights;\n}\n\nfunction subdivideHeights(points, h0, h1, granularity) {\n  var p0 = points[0];\n  var p1 = points[1];\n  var angleBetween = Cartesian3.angleBetween(p0, p1);\n  var numPoints = Math.ceil(angleBetween / granularity);\n  var heights = new Array(numPoints);\n  var i;\n  if (h0 === h1) {\n    for (i = 0; i < numPoints; i++) {\n      heights[i] = h0;\n    }\n    heights.push(h1);\n    return heights;\n  }\n\n  var dHeight = h1 - h0;\n  var heightPerVertex = dHeight / numPoints;\n\n  for (i = 1; i < numPoints; i++) {\n    var h = h0 + i * heightPerVertex;\n    heights[i] = h;\n  }\n\n  heights[0] = h0;\n  heights.push(h1);\n  return heights;\n}\n\nvar nextScratch = new Cartesian3();\nvar prevScratch = new Cartesian3();\n\nfunction computeRotationAngle(start, end, position, ellipsoid) {\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n  var next = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, start, nextScratch),\n    nextScratch\n  );\n  var prev = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, end, prevScratch),\n    prevScratch\n  );\n  var angle = Cartesian2.angleBetween(next, prev);\n\n  return prev.x * next.y - prev.y * next.x >= 0.0 ? -angle : angle;\n}\n\nvar negativeX = new Cartesian3(-1, 0, 0);\nvar transform = new Matrix4();\nvar translation = new Matrix4();\nvar rotationZ = new Matrix3();\nvar scaleMatrix = Matrix3.IDENTITY.clone();\nvar westScratch = new Cartesian3();\nvar finalPosScratch = new Cartesian4();\nvar heightCartesian = new Cartesian3();\nfunction addPosition(\n  center,\n  left,\n  shape,\n  finalPositions,\n  ellipsoid,\n  height,\n  xScalar,\n  repeat\n) {\n  var west = westScratch;\n  var finalPosition = finalPosScratch;\n  transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\n\n  west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\n  west = Cartesian3.normalize(west, west);\n  var angle = computeRotationAngle(west, left, center, ellipsoid);\n  rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\n\n  heightCartesian.z = height;\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation),\n    transform\n  );\n  var scale = scaleMatrix;\n  scale[0] = xScalar;\n\n  for (var j = 0; j < repeat; j++) {\n    for (var i = 0; i < shape.length; i += 3) {\n      finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\n      finalPosition = Matrix3.multiplyByVector(\n        scale,\n        finalPosition,\n        finalPosition\n      );\n      finalPosition = Matrix4.multiplyByPoint(\n        transform,\n        finalPosition,\n        finalPosition\n      );\n      finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\n    }\n  }\n\n  return finalPositions;\n}\n\nvar centerScratch = new Cartesian3();\nfunction addPositions(\n  centers,\n  left,\n  shape,\n  finalPositions,\n  ellipsoid,\n  heights,\n  xScalar\n) {\n  for (var i = 0; i < centers.length; i += 3) {\n    var center = Cartesian3.fromArray(centers, i, centerScratch);\n    finalPositions = addPosition(\n      center,\n      left,\n      shape,\n      finalPositions,\n      ellipsoid,\n      heights[i / 3],\n      xScalar,\n      1\n    );\n  }\n  return finalPositions;\n}\n\nfunction convertShapeTo3DDuplicate(shape2D, boundingRectangle) {\n  //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\n  var length = shape2D.length;\n  var shape = new Array(length * 6);\n  var index = 0;\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n  var point = shape2D[0];\n  shape[index++] = point.x - xOffset;\n  shape[index++] = 0.0;\n  shape[index++] = point.y - yOffset;\n  for (var i = 1; i < length; i++) {\n    point = shape2D[i];\n    var x = point.x - xOffset;\n    var z = point.y - yOffset;\n    shape[index++] = x;\n    shape[index++] = 0.0;\n    shape[index++] = z;\n\n    shape[index++] = x;\n    shape[index++] = 0.0;\n    shape[index++] = z;\n  }\n  point = shape2D[0];\n  shape[index++] = point.x - xOffset;\n  shape[index++] = 0.0;\n  shape[index++] = point.y - yOffset;\n\n  return shape;\n}\n\nfunction convertShapeTo3D(shape2D, boundingRectangle) {\n  //orientate 2D shape to XZ plane center at (0, 0, 0)\n  var length = shape2D.length;\n  var shape = new Array(length * 3);\n  var index = 0;\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n  for (var i = 0; i < length; i++) {\n    shape[index++] = shape2D[i].x - xOffset;\n    shape[index++] = 0;\n    shape[index++] = shape2D[i].y - yOffset;\n  }\n\n  return shape;\n}\n\nvar quaterion = new Quaternion();\nvar startPointScratch = new Cartesian3();\nvar rotMatrix = new Matrix3();\nfunction computeRoundCorner(\n  pivot,\n  startPoint,\n  endPoint,\n  cornerType,\n  leftIsOutside,\n  ellipsoid,\n  finalPositions,\n  shape,\n  height,\n  duplicatePoints\n) {\n  var angle = Cartesian3.angleBetween(\n    Cartesian3.subtract(startPoint, pivot, scratch1),\n    Cartesian3.subtract(endPoint, pivot, scratch2)\n  );\n  var granularity =\n    cornerType === CornerType.BEVELED\n      ? 0\n      : Math.ceil(angle / CesiumMath.toRadians(5));\n\n  var m;\n  if (leftIsOutside) {\n    m = Matrix3.fromQuaternion(\n      Quaternion.fromAxisAngle(\n        Cartesian3.negate(pivot, scratch1),\n        angle / (granularity + 1),\n        quaterion\n      ),\n      rotMatrix\n    );\n  } else {\n    m = Matrix3.fromQuaternion(\n      Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion),\n      rotMatrix\n    );\n  }\n\n  var left;\n  var surfacePoint;\n  startPoint = Cartesian3.clone(startPoint, startPointScratch);\n  if (granularity > 0) {\n    var repeat = duplicatePoints ? 2 : 1;\n    for (var i = 0; i < granularity; i++) {\n      startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n      left = Cartesian3.subtract(startPoint, pivot, scratch1);\n      left = Cartesian3.normalize(left, left);\n      if (!leftIsOutside) {\n        left = Cartesian3.negate(left, left);\n      }\n      surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n      finalPositions = addPosition(\n        surfacePoint,\n        left,\n        shape,\n        finalPositions,\n        ellipsoid,\n        height,\n        1,\n        repeat\n      );\n    }\n  } else {\n    left = Cartesian3.subtract(startPoint, pivot, scratch1);\n    left = Cartesian3.normalize(left, left);\n    if (!leftIsOutside) {\n      left = Cartesian3.negate(left, left);\n    }\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n    finalPositions = addPosition(\n      surfacePoint,\n      left,\n      shape,\n      finalPositions,\n      ellipsoid,\n      height,\n      1,\n      1\n    );\n\n    endPoint = Cartesian3.clone(endPoint, startPointScratch);\n    left = Cartesian3.subtract(endPoint, pivot, scratch1);\n    left = Cartesian3.normalize(left, left);\n    if (!leftIsOutside) {\n      left = Cartesian3.negate(left, left);\n    }\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\n    finalPositions = addPosition(\n      surfacePoint,\n      left,\n      shape,\n      finalPositions,\n      ellipsoid,\n      height,\n      1,\n      1\n    );\n  }\n\n  return finalPositions;\n}\n\nPolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function (\n  shapePositions\n) {\n  var length = shapePositions.length;\n  var cleanedPositions = [];\n  for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\n    var v0 = shapePositions[i0];\n    var v1 = shapePositions[i1];\n\n    if (!Cartesian2.equals(v0, v1)) {\n      cleanedPositions.push(v1); // Shallow copy!\n    }\n  }\n\n  return cleanedPositions;\n};\n\nPolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function (\n  forward,\n  backward,\n  position,\n  ellipsoid\n) {\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n  var next = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, forward, nextScratch),\n    nextScratch\n  );\n  var prev = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, backward, prevScratch),\n    prevScratch\n  );\n\n  return prev.x * next.y - prev.y * next.x >= 0.0;\n};\n\nvar scratchForwardProjection = new Cartesian3();\nvar scratchBackwardProjection = new Cartesian3();\n\nPolylineVolumeGeometryLibrary.computePositions = function (\n  positions,\n  shape2D,\n  boundingRectangle,\n  geometry,\n  duplicatePoints\n) {\n  var ellipsoid = geometry._ellipsoid;\n  var heights = scaleToSurface(positions, ellipsoid);\n  var granularity = geometry._granularity;\n  var cornerType = geometry._cornerType;\n  var shapeForSides = duplicatePoints\n    ? convertShapeTo3DDuplicate(shape2D, boundingRectangle)\n    : convertShapeTo3D(shape2D, boundingRectangle);\n  var shapeForEnds = duplicatePoints\n    ? convertShapeTo3D(shape2D, boundingRectangle)\n    : undefined;\n  var heightOffset = boundingRectangle.height / 2;\n  var width = boundingRectangle.width / 2;\n  var length = positions.length;\n  var finalPositions = [];\n  var ends = duplicatePoints ? [] : undefined;\n\n  var forward = scratchCartesian1;\n  var backward = scratchCartesian2;\n  var cornerDirection = scratchCartesian3;\n  var surfaceNormal = scratchCartesian4;\n  var pivot = scratchCartesian5;\n  var start = scratchCartesian6;\n  var end = scratchCartesian7;\n  var left = scratchCartesian8;\n  var previousPosition = scratchCartesian9;\n\n  var position = positions[0];\n  var nextPosition = positions[1];\n  surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n  forward = Cartesian3.subtract(nextPosition, position, forward);\n  forward = Cartesian3.normalize(forward, forward);\n  left = Cartesian3.cross(surfaceNormal, forward, left);\n  left = Cartesian3.normalize(left, left);\n  var h0 = heights[0];\n  var h1 = heights[1];\n  if (duplicatePoints) {\n    ends = addPosition(\n      position,\n      left,\n      shapeForEnds,\n      ends,\n      ellipsoid,\n      h0 + heightOffset,\n      1,\n      1\n    );\n  }\n  previousPosition = Cartesian3.clone(position, previousPosition);\n  position = nextPosition;\n  backward = Cartesian3.negate(forward, backward);\n  var subdividedHeights;\n  var subdividedPositions;\n  for (var i = 1; i < length - 1; i++) {\n    var repeat = duplicatePoints ? 2 : 1;\n    nextPosition = positions[i + 1];\n    forward = Cartesian3.subtract(nextPosition, position, forward);\n    forward = Cartesian3.normalize(forward, forward);\n    cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\n    cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n    surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n\n    var forwardProjection = Cartesian3.multiplyByScalar(\n      surfaceNormal,\n      Cartesian3.dot(forward, surfaceNormal),\n      scratchForwardProjection\n    );\n    Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n    Cartesian3.normalize(forwardProjection, forwardProjection);\n\n    var backwardProjection = Cartesian3.multiplyByScalar(\n      surfaceNormal,\n      Cartesian3.dot(backward, surfaceNormal),\n      scratchBackwardProjection\n    );\n    Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n    Cartesian3.normalize(backwardProjection, backwardProjection);\n\n    var doCorner = !CesiumMath.equalsEpsilon(\n      Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)),\n      1.0,\n      CesiumMath.EPSILON7\n    );\n\n    if (doCorner) {\n      cornerDirection = Cartesian3.cross(\n        cornerDirection,\n        surfaceNormal,\n        cornerDirection\n      );\n      cornerDirection = Cartesian3.cross(\n        surfaceNormal,\n        cornerDirection,\n        cornerDirection\n      );\n      cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n      var scalar =\n        1 /\n        Math.max(\n          0.25,\n          Cartesian3.magnitude(\n            Cartesian3.cross(cornerDirection, backward, scratch1)\n          )\n        );\n      var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(\n        forward,\n        backward,\n        position,\n        ellipsoid\n      );\n      if (leftIsOutside) {\n        pivot = Cartesian3.add(\n          position,\n          Cartesian3.multiplyByScalar(\n            cornerDirection,\n            scalar * width,\n            cornerDirection\n          ),\n          pivot\n        );\n        start = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, width, start),\n          start\n        );\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n        subdividedHeights = subdivideHeights(\n          scratch2Array,\n          h0 + heightOffset,\n          h1 + heightOffset,\n          granularity\n        );\n        subdividedPositions = PolylinePipeline.generateArc({\n          positions: scratch2Array,\n          granularity: granularity,\n          ellipsoid: ellipsoid,\n        });\n        finalPositions = addPositions(\n          subdividedPositions,\n          left,\n          shapeForSides,\n          finalPositions,\n          ellipsoid,\n          subdividedHeights,\n          1\n        );\n        left = Cartesian3.cross(surfaceNormal, forward, left);\n        left = Cartesian3.normalize(left, left);\n        end = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, width, end),\n          end\n        );\n        if (\n          cornerType === CornerType.ROUNDED ||\n          cornerType === CornerType.BEVELED\n        ) {\n          computeRoundCorner(\n            pivot,\n            start,\n            end,\n            cornerType,\n            leftIsOutside,\n            ellipsoid,\n            finalPositions,\n            shapeForSides,\n            h1 + heightOffset,\n            duplicatePoints\n          );\n        } else {\n          cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\n          finalPositions = addPosition(\n            position,\n            cornerDirection,\n            shapeForSides,\n            finalPositions,\n            ellipsoid,\n            h1 + heightOffset,\n            scalar,\n            repeat\n          );\n        }\n        previousPosition = Cartesian3.clone(end, previousPosition);\n      } else {\n        pivot = Cartesian3.add(\n          position,\n          Cartesian3.multiplyByScalar(\n            cornerDirection,\n            scalar * width,\n            cornerDirection\n          ),\n          pivot\n        );\n        start = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, -width, start),\n          start\n        );\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n        subdividedHeights = subdivideHeights(\n          scratch2Array,\n          h0 + heightOffset,\n          h1 + heightOffset,\n          granularity\n        );\n        subdividedPositions = PolylinePipeline.generateArc({\n          positions: scratch2Array,\n          granularity: granularity,\n          ellipsoid: ellipsoid,\n        });\n        finalPositions = addPositions(\n          subdividedPositions,\n          left,\n          shapeForSides,\n          finalPositions,\n          ellipsoid,\n          subdividedHeights,\n          1\n        );\n        left = Cartesian3.cross(surfaceNormal, forward, left);\n        left = Cartesian3.normalize(left, left);\n        end = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, -width, end),\n          end\n        );\n        if (\n          cornerType === CornerType.ROUNDED ||\n          cornerType === CornerType.BEVELED\n        ) {\n          computeRoundCorner(\n            pivot,\n            start,\n            end,\n            cornerType,\n            leftIsOutside,\n            ellipsoid,\n            finalPositions,\n            shapeForSides,\n            h1 + heightOffset,\n            duplicatePoints\n          );\n        } else {\n          finalPositions = addPosition(\n            position,\n            cornerDirection,\n            shapeForSides,\n            finalPositions,\n            ellipsoid,\n            h1 + heightOffset,\n            scalar,\n            repeat\n          );\n        }\n        previousPosition = Cartesian3.clone(end, previousPosition);\n      }\n      backward = Cartesian3.negate(forward, backward);\n    } else {\n      finalPositions = addPosition(\n        previousPosition,\n        left,\n        shapeForSides,\n        finalPositions,\n        ellipsoid,\n        h0 + heightOffset,\n        1,\n        1\n      );\n      previousPosition = position;\n    }\n    h0 = h1;\n    h1 = heights[i + 1];\n    position = nextPosition;\n  }\n\n  scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n  scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\n  subdividedHeights = subdivideHeights(\n    scratch2Array,\n    h0 + heightOffset,\n    h1 + heightOffset,\n    granularity\n  );\n  subdividedPositions = PolylinePipeline.generateArc({\n    positions: scratch2Array,\n    granularity: granularity,\n    ellipsoid: ellipsoid,\n  });\n  finalPositions = addPositions(\n    subdividedPositions,\n    left,\n    shapeForSides,\n    finalPositions,\n    ellipsoid,\n    subdividedHeights,\n    1\n  );\n  if (duplicatePoints) {\n    ends = addPosition(\n      position,\n      left,\n      shapeForEnds,\n      ends,\n      ellipsoid,\n      h1 + heightOffset,\n      1,\n      1\n    );\n  }\n\n  length = finalPositions.length;\n  var posLength = duplicatePoints ? length + ends.length : length;\n  var combinedPositions = new Float64Array(posLength);\n  combinedPositions.set(finalPositions);\n  if (duplicatePoints) {\n    combinedPositions.set(ends, length);\n  }\n\n  return combinedPositions;\n};\nexport default PolylineVolumeGeometryLibrary;\n"],"names":["Object","freeze","ROUNDED","MITERED","BEVELED","scratch2Array","Cartesian3","scratchCartesian1","scratchCartesian2","scratchCartesian3","scratchCartesian4","scratchCartesian5","scratchCartesian6","scratchCartesian7","scratchCartesian8","scratchCartesian9","scratch1","scratch2","PolylineVolumeGeometryLibrary","cartographic","Cartographic","subdivideHeights","points","h0","h1","granularity","p0","p1","angleBetween","numPoints","Math","ceil","heights","Array","i","push","heightPerVertex","nextScratch","prevScratch","negativeX","transform","Matrix4","translation","rotationZ","Matrix3","scaleMatrix","IDENTITY","clone","westScratch","finalPosScratch","Cartesian4","heightCartesian","addPosition","center","left","shape","finalPositions","ellipsoid","height","xScalar","repeat","west","finalPosition","Transforms","eastNorthUpToFixedFrame","multiplyByPointAsVector","normalize","angle","start","end","position","tangentPlane","EllipsoidTangentPlane","next","projectPointOntoPlane","add","prev","Cartesian2","x","y","fromRotationZ","z","multiplyTransformation","fromRotationTranslation","scale","j","length","fromArray","multiplyByVector","multiplyByPoint","centerScratch","addPositions","centers","convertShapeTo3D","shape2D","boundingRectangle","index","xOffset","width","yOffset","quaterion","Quaternion","startPointScratch","rotMatrix","computeRoundCorner","pivot","startPoint","endPoint","cornerType","leftIsOutside","duplicatePoints","subtract","CornerType","CesiumMath","toRadians","m","fromQuaternion","fromAxisAngle","negate","scaleToGeodeticSurface","removeDuplicatesFromShape","shapePositions","cleanedPositions","i0","i1","v0","v1","equals","angleIsGreaterThanPi","forward","backward","scratchForwardProjection","scratchBackwardProjection","computePositions","positions","geometry","_ellipsoid","pos","cartesianToCartographic","scaleToSurface","_granularity","_cornerType","shapeForSides","point","shapeForEnds","undefined","heightOffset","ends","cornerDirection","previousPosition","nextPosition","surfaceNormal","geodeticSurfaceNormal","cross","subdividedHeights","forwardProjection","multiplyByScalar","dot","backwardProjection","equalsEpsilon","abs","EPSILON7","scalar","max","magnitude","PolylinePipeline","generateArc","posLength","combinedPositions","Float64Array","set"],"mappings":"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"}