{"version":3,"file":"createCoplanarPolygonGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar scratchPosition = new Cartesian3();\nvar scratchBR = new BoundingRectangle();\nvar stScratch = new Cartesian2();\nvar textureCoordinatesOrigin = new Cartesian2();\nvar scratchNormal = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar centerScratch = new Cartesian3();\nvar axis1Scratch = new Cartesian3();\nvar axis2Scratch = new Cartesian3();\nvar quaternionScratch = new Quaternion();\nvar textureMatrixScratch = new Matrix3();\nvar tangentRotationScratch = new Matrix3();\nvar surfaceNormalScratch = new Cartesian3();\n\nfunction createGeometryFromPolygon(\n  polygon,\n  vertexFormat,\n  boundingRectangle,\n  stRotation,\n  projectPointTo2D,\n  normal,\n  tangent,\n  bitangent\n) {\n  var positions = polygon.positions;\n  var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  var newIndices = IndexDatatype.createTypedArray(\n    positions.length,\n    indices.length\n  );\n  newIndices.set(indices);\n\n  var textureMatrix = textureMatrixScratch;\n  if (stRotation !== 0.0) {\n    var rotation = Quaternion.fromAxisAngle(\n      normal,\n      stRotation,\n      quaternionScratch\n    );\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\n      rotation = Quaternion.fromAxisAngle(\n        normal,\n        -stRotation,\n        quaternionScratch\n      );\n      var tangentRotation = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationScratch\n      );\n\n      tangent = Cartesian3.normalize(\n        Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\n        tangent\n      );\n      if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.normalize(\n          Cartesian3.cross(normal, tangent, bitangent),\n          bitangent\n        );\n      }\n    }\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n  }\n\n  var stOrigin = textureCoordinatesOrigin;\n  if (vertexFormat.st) {\n    stOrigin.x = boundingRectangle.x;\n    stOrigin.y = boundingRectangle.y;\n  }\n\n  var length = positions.length;\n  var size = length * 3;\n  var flatPositions = new Float64Array(size);\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array(length * 2)\n    : undefined;\n\n  var positionIndex = 0;\n  var normalIndex = 0;\n  var bitangentIndex = 0;\n  var tangentIndex = 0;\n  var stIndex = 0;\n\n  for (var i = 0; i < length; i++) {\n    var position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    if (vertexFormat.st) {\n      var p = Matrix3.multiplyByVector(\n        textureMatrix,\n        position,\n        scratchPosition\n      );\n      var st = projectPointTo2D(p, stScratch);\n      Cartesian2.subtract(st, stOrigin, st);\n\n      var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n      var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n      textureCoordinates[stIndex++] = stx;\n      textureCoordinates[stIndex++] = sty;\n    }\n\n    if (vertexFormat.normal) {\n      normals[normalIndex++] = normal.x;\n      normals[normalIndex++] = normal.y;\n      normals[normalIndex++] = normal.z;\n    }\n\n    if (vertexFormat.tangent) {\n      tangents[tangentIndex++] = tangent.x;\n      tangents[tangentIndex++] = tangent.y;\n      tangents[tangentIndex++] = tangent.z;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents[bitangentIndex++] = bitangent.x;\n      bitangents[bitangentIndex++] = bitangent.y;\n      bitangents[bitangentIndex++] = bitangent.z;\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: newIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n *\n * @example\n * var polygonGeometry = new Cesium.CoplanarPolygonGeometry({\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 300000.0,\n *      -80.0, 30.0, 300000.0,\n *      -80.0, 30.0, 0.0\n *   ]))\n * });\n *\n */\nfunction CoplanarPolygonGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var polygonHierarchy = options.polygonHierarchy;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._polygonHierarchy = polygonHierarchy;\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._workerName = \"createCoplanarPolygonGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\n    VertexFormat.packedLength +\n    Ellipsoid.packedLength +\n    2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  var newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n  };\n  return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var stRotation = array[startingIndex++];\n  var packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._stRotation = stRotation;\n  result.packedLength = packedLength;\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n  var vertexFormat = polygonGeometry._vertexFormat;\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\n  var stRotation = polygonGeometry._stRotation;\n\n  var outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n  var axis1 = axis1Scratch;\n  var axis2 = axis2Scratch;\n\n  var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\n    outerPositions,\n    centerScratch,\n    axis1,\n    axis2\n  );\n  if (!validGeometry) {\n    return undefined;\n  }\n\n  normal = Cartesian3.cross(axis1, axis2, normal);\n  normal = Cartesian3.normalize(normal, normal);\n\n  if (\n    !Cartesian3.equalsEpsilon(\n      centerScratch,\n      Cartesian3.ZERO,\n      CesiumMath.EPSILON6\n    )\n  ) {\n    var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\n      centerScratch,\n      surfaceNormalScratch\n    );\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n      normal = Cartesian3.negate(normal, normal);\n      axis1 = Cartesian3.negate(axis1, axis1);\n    }\n  }\n\n  var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n  var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n\n  if (vertexFormat.tangent) {\n    tangent = Cartesian3.clone(axis1, tangent);\n  }\n  if (vertexFormat.bitangent) {\n    bitangent = Cartesian3.clone(axis2, bitangent);\n  }\n\n  var results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    projectPoints,\n    false\n  );\n  var hierarchy = results.hierarchy;\n  var polygons = results.polygons;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n  outerPositions = hierarchy[0].outerRing;\n\n  var boundingSphere = BoundingSphere.fromPoints(outerPositions);\n  var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    normal,\n    projectPoint,\n    outerPositions,\n    stRotation,\n    scratchBR\n  );\n\n  var geometries = [];\n  for (var i = 0; i < polygons.length; i++) {\n    var geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPolygon(\n        polygons[i],\n        vertexFormat,\n        boundingRectangle,\n        stRotation,\n        projectPoint,\n        normal,\n        tangent,\n        bitangent\n      ),\n    });\n\n    geometries.push(geometryInstance);\n  }\n\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  var attributes = geometry.attributes;\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonGeometry;\n","import CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\nimport defined from \"../Core/defined.js\";\n\nfunction createCoplanarPolygonGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\n  }\n  return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\n}\nexport default createCoplanarPolygonGeometry;\n"],"names":["scratchPosition","Cartesian3","scratchBR","BoundingRectangle","stScratch","Cartesian2","textureCoordinatesOrigin","scratchNormal","scratchTangent","scratchBitangent","centerScratch","axis1Scratch","axis2Scratch","quaternionScratch","Quaternion","textureMatrixScratch","Matrix3","tangentRotationScratch","surfaceNormalScratch","CoplanarPolygonGeometry","options","polygonHierarchy","defaultValue","EMPTY_OBJECT","Check","defined","vertexFormat","VertexFormat","DEFAULT","this","_vertexFormat","clone","_polygonHierarchy","_stRotation","stRotation","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","positions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","outerPositions","arrayRemoveDuplicates","equalsEpsilon","length","normal","tangent","bitangent","axis1","axis2","CoplanarPolygonGeometryLibrary","computeProjectTo2DArguments","cross","normalize","ZERO","CesiumMath","EPSILON6","surfaceNormal","geodeticSurfaceNormal","dot","negate","projectPoints","createProjectPointsTo2DFunction","projectPoint","createProjectPointTo2DFunction","results","polygonsFromHierarchy","hierarchy","polygons","outerRing","boundingSphere","BoundingSphere","fromPoints","boundingRectangle","computeBoundingRectangle","geometries","i","geometryInstance","GeometryInstance","geometry","polygon","projectPointTo2D","indices","PolygonPipeline","triangulate","positions2D","holes","newIndices","IndexDatatype","createTypedArray","set","textureMatrix","rotation","fromAxisAngle","fromQuaternion","tangentRotation","multiplyByVector","IDENTITY","stOrigin","st","x","y","size","flatPositions","Float64Array","normals","Float32Array","undefined","tangents","bitangents","textureCoordinates","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","sty","position","z","subtract","stx","clamp","width","height","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","Geometry","primitiveType","PrimitiveType","TRIANGLES","createGeometryFromPolygon","push","GeometryPipeline","combineInstances","offset"],"mappings":"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"}