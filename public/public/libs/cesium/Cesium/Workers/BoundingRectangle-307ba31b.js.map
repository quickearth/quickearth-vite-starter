{"version":3,"file":"BoundingRectangle-307ba31b.js","sources":["../../../../Source/Core/BoundingRectangle.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport GeographicProjection from \"./GeographicProjection.js\";\nimport Intersect from \"./Intersect.js\";\nimport Rectangle from \"./Rectangle.js\";\n\n/**\n * A bounding rectangle given by a corner, width and height.\n * @alias BoundingRectangle\n * @constructor\n *\n * @param {Number} [x=0.0] The x coordinate of the rectangle.\n * @param {Number} [y=0.0] The y coordinate of the rectangle.\n * @param {Number} [width=0.0] The width of the rectangle.\n * @param {Number} [height=0.0] The height of the rectangle.\n *\n * @see BoundingSphere\n * @see Packable\n */\nfunction BoundingRectangle(x, y, width, height) {\n  /**\n   * The x coordinate of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = defaultValue(x, 0.0);\n\n  /**\n   * The y coordinate of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = defaultValue(y, 0.0);\n\n  /**\n   * The width of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.width = defaultValue(width, 0.0);\n\n  /**\n   * The height of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.height = defaultValue(height, 0.0);\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nBoundingRectangle.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoundingRectangle} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nBoundingRectangle.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex++] = value.y;\n  array[startingIndex++] = value.width;\n  array[startingIndex] = value.height;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoundingRectangle} [result] The object into which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex++];\n  result.width = array[startingIndex++];\n  result.height = array[startingIndex];\n  return result;\n};\n\n/**\n * Computes a bounding rectangle enclosing the list of 2D points.\n * The rectangle is oriented with the corner at the bottom left.\n *\n * @param {Cartesian2[]} positions List of points that the bounding rectangle will enclose.  Each point must have <code>x</code> and <code>y</code> properties.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.fromPoints = function (positions, result) {\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  if (!defined(positions) || positions.length === 0) {\n    result.x = 0;\n    result.y = 0;\n    result.width = 0;\n    result.height = 0;\n    return result;\n  }\n\n  var length = positions.length;\n\n  var minimumX = positions[0].x;\n  var minimumY = positions[0].y;\n\n  var maximumX = positions[0].x;\n  var maximumY = positions[0].y;\n\n  for (var i = 1; i < length; i++) {\n    var p = positions[i];\n    var x = p.x;\n    var y = p.y;\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n  }\n\n  result.x = minimumX;\n  result.y = minimumY;\n  result.width = maximumX - minimumX;\n  result.height = maximumY - minimumY;\n  return result;\n};\n\nvar defaultProjection = new GeographicProjection();\nvar fromRectangleLowerLeft = new Cartographic();\nvar fromRectangleUpperRight = new Cartographic();\n/**\n * Computes a bounding rectangle from a rectangle.\n *\n * @param {Rectangle} rectangle The valid rectangle used to create a bounding rectangle.\n * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.fromRectangle = function (rectangle, projection, result) {\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  if (!defined(rectangle)) {\n    result.x = 0;\n    result.y = 0;\n    result.width = 0;\n    result.height = 0;\n    return result;\n  }\n\n  projection = defaultValue(projection, defaultProjection);\n\n  var lowerLeft = projection.project(\n    Rectangle.southwest(rectangle, fromRectangleLowerLeft)\n  );\n  var upperRight = projection.project(\n    Rectangle.northeast(rectangle, fromRectangleUpperRight)\n  );\n\n  Cartesian2.subtract(upperRight, lowerLeft, upperRight);\n\n  result.x = lowerLeft.x;\n  result.y = lowerLeft.y;\n  result.width = upperRight.x;\n  result.height = upperRight.y;\n  return result;\n};\n\n/**\n * Duplicates a BoundingRectangle instance.\n *\n * @param {BoundingRectangle} rectangle The bounding rectangle to duplicate.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided. (Returns undefined if rectangle is undefined)\n */\nBoundingRectangle.clone = function (rectangle, result) {\n  if (!defined(rectangle)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new BoundingRectangle(\n      rectangle.x,\n      rectangle.y,\n      rectangle.width,\n      rectangle.height\n    );\n  }\n\n  result.x = rectangle.x;\n  result.y = rectangle.y;\n  result.width = rectangle.width;\n  result.height = rectangle.height;\n  return result;\n};\n\n/**\n * Computes a bounding rectangle that is the union of the left and right bounding rectangles.\n *\n * @param {BoundingRectangle} left A rectangle to enclose in bounding rectangle.\n * @param {BoundingRectangle} right A rectangle to enclose in a bounding rectangle.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.union = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  var lowerLeftX = Math.min(left.x, right.x);\n  var lowerLeftY = Math.min(left.y, right.y);\n  var upperRightX = Math.max(left.x + left.width, right.x + right.width);\n  var upperRightY = Math.max(left.y + left.height, right.y + right.height);\n\n  result.x = lowerLeftX;\n  result.y = lowerLeftY;\n  result.width = upperRightX - lowerLeftX;\n  result.height = upperRightY - lowerLeftY;\n  return result;\n};\n\n/**\n * Computes a bounding rectangle by enlarging the provided rectangle until it contains the provided point.\n *\n * @param {BoundingRectangle} rectangle A rectangle to expand.\n * @param {Cartesian2} point A point to enclose in a bounding rectangle.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.expand = function (rectangle, point, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  Check.typeOf.object(\"point\", point);\n  //>>includeEnd('debug');\n\n  result = BoundingRectangle.clone(rectangle, result);\n\n  var width = point.x - result.x;\n  var height = point.y - result.y;\n\n  if (width > result.width) {\n    result.width = width;\n  } else if (width < 0) {\n    result.width -= width;\n    result.x = point.x;\n  }\n\n  if (height > result.height) {\n    result.height = height;\n  } else if (height < 0) {\n    result.height -= height;\n    result.y = point.y;\n  }\n\n  return result;\n};\n\n/**\n * Determines if two rectangles intersect.\n *\n * @param {BoundingRectangle} left A rectangle to check for intersection.\n * @param {BoundingRectangle} right The other rectangle to check for intersection.\n * @returns {Intersect} <code>Intersect.INTERSECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\n */\nBoundingRectangle.intersect = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  var leftX = left.x;\n  var leftY = left.y;\n  var rightX = right.x;\n  var rightY = right.y;\n  if (\n    !(\n      leftX > rightX + right.width ||\n      leftX + left.width < rightX ||\n      leftY + left.height < rightY ||\n      leftY > rightY + right.height\n    )\n  ) {\n    return Intersect.INTERSECTING;\n  }\n\n  return Intersect.OUTSIDE;\n};\n\n/**\n * Compares the provided BoundingRectangles componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {BoundingRectangle} [left] The first BoundingRectangle.\n * @param {BoundingRectangle} [right] The second BoundingRectangle.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nBoundingRectangle.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.x === right.x &&\n      left.y === right.y &&\n      left.width === right.width &&\n      left.height === right.height)\n  );\n};\n\n/**\n * Duplicates this BoundingRectangle instance.\n *\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.prototype.clone = function (result) {\n  return BoundingRectangle.clone(this, result);\n};\n\n/**\n * Determines if this rectangle intersects with another.\n *\n * @param {BoundingRectangle} right A rectangle to check for intersection.\n * @returns {Intersect} <code>Intersect.INTERSECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\n */\nBoundingRectangle.prototype.intersect = function (right) {\n  return BoundingRectangle.intersect(this, right);\n};\n\n/**\n * Compares this BoundingRectangle against the provided BoundingRectangle componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {BoundingRectangle} [right] The right hand side BoundingRectangle.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nBoundingRectangle.prototype.equals = function (right) {\n  return BoundingRectangle.equals(this, right);\n};\nexport default BoundingRectangle;\n"],"names":["BoundingRectangle","x","y","width","height","this","defaultValue","packedLength","pack","value","array","startingIndex","Check","typeOf","object","defined","unpack","result","fromPoints","positions","length","minimumX","minimumY","maximumX","maximumY","i","p","Math","min","max","defaultProjection","GeographicProjection","fromRectangleLowerLeft","Cartographic","fromRectangleUpperRight","fromRectangle","rectangle","projection","lowerLeft","project","Rectangle","southwest","upperRight","northeast","Cartesian2","subtract","clone","union","left","right","lowerLeftX","lowerLeftY","upperRightX","upperRightY","expand","point","intersect","leftX","leftY","rightX","rightY","Intersect","OUTSIDE","INTERSECTING","equals","prototype"],"mappings":"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"}