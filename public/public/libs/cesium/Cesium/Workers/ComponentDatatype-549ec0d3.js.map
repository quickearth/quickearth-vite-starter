{"version":3,"file":"ComponentDatatype-549ec0d3.js","sources":["../../../../Source/Core/ComponentDatatype.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * WebGL component datatypes.  Components are intrinsics,\n * which form attributes, which form vertices.\n *\n * @enum {Number}\n */\nvar ComponentDatatype = {\n  /**\n   * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\n   * of an element in <code>Int8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BYTE: WebGLConstants.BYTE,\n\n  /**\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\n   * of an element in <code>Uint8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\n\n  /**\n   * 16-bit signed short corresponding to <code>SHORT</code> and the type\n   * of an element in <code>Int16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SHORT: WebGLConstants.SHORT,\n\n  /**\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\n   * of an element in <code>Uint16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\n\n  /**\n   * 32-bit signed int corresponding to <code>INT</code> and the type\n   * of an element in <code>Int32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  INT: WebGLConstants.INT,\n\n  /**\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\n   * of an element in <code>Uint32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\n\n  /**\n   * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\n   * of an element in <code>Float32Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  FLOAT: WebGLConstants.FLOAT,\n\n  /**\n   * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\n   * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\n   * and the type of an element in <code>Float64Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   * @default 0x140A\n   */\n  DOUBLE: WebGLConstants.DOUBLE,\n};\n\n/**\n * Returns the size, in bytes, of the corresponding datatype.\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\n * @returns {Number} The size in bytes.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // Returns Int8Array.BYTES_PER_ELEMENT\n * var size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\n */\nComponentDatatype.getSizeInBytes = function (componentDatatype) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return Int8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.SHORT:\n      return Int16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.INT:\n      return Int32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.FLOAT:\n      return Float32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.DOUBLE:\n      return Float64Array.BYTES_PER_ELEMENT;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\n *\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} array The typed array.\n * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\n */\nComponentDatatype.fromTypedArray = function (array) {\n  if (array instanceof Int8Array) {\n    return ComponentDatatype.BYTE;\n  }\n  if (array instanceof Uint8Array) {\n    return ComponentDatatype.UNSIGNED_BYTE;\n  }\n  if (array instanceof Int16Array) {\n    return ComponentDatatype.SHORT;\n  }\n  if (array instanceof Uint16Array) {\n    return ComponentDatatype.UNSIGNED_SHORT;\n  }\n  if (array instanceof Int32Array) {\n    return ComponentDatatype.INT;\n  }\n  if (array instanceof Uint32Array) {\n    return ComponentDatatype.UNSIGNED_INT;\n  }\n  if (array instanceof Float32Array) {\n    return ComponentDatatype.FLOAT;\n  }\n  if (array instanceof Float64Array) {\n    return ComponentDatatype.DOUBLE;\n  }\n};\n\n/**\n * Validates that the provided component datatype is a valid {@link ComponentDatatype}\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to validate.\n * @returns {Boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\n *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\n * }\n */\nComponentDatatype.validate = function (componentDatatype) {\n  return (\n    defined(componentDatatype) &&\n    (componentDatatype === ComponentDatatype.BYTE ||\n      componentDatatype === ComponentDatatype.UNSIGNED_BYTE ||\n      componentDatatype === ComponentDatatype.SHORT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_SHORT ||\n      componentDatatype === ComponentDatatype.INT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_INT ||\n      componentDatatype === ComponentDatatype.FLOAT ||\n      componentDatatype === ComponentDatatype.DOUBLE)\n  );\n};\n\n/**\n * Creates a typed array corresponding to component data type.\n *\n * @param {ComponentDatatype} componentDatatype The component data type.\n * @param {Number|Array} valuesOrLength The length of the array to create or an array.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // creates a Float32Array with length of 100\n * var typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\n */\nComponentDatatype.createTypedArray = function (\n  componentDatatype,\n  valuesOrLength\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(valuesOrLength)) {\n    throw new DeveloperError(\"valuesOrLength is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(valuesOrLength);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(valuesOrLength);\n    case ComponentDatatype.INT:\n      return new Int32Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(valuesOrLength);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(valuesOrLength);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(valuesOrLength);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Creates a typed view of an array of bytes.\n *\n * @param {ComponentDatatype} componentDatatype The type of the view to create.\n * @param {ArrayBuffer} buffer The buffer storage to use for the view.\n * @param {Number} [byteOffset] The offset, in bytes, to the first element in the view.\n * @param {Number} [length] The number of elements in the view.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n */\nComponentDatatype.createArrayBufferView = function (\n  componentDatatype,\n  buffer,\n  byteOffset,\n  length\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(buffer)) {\n    throw new DeveloperError(\"buffer is required.\");\n  }\n  //>>includeEnd('debug');\n\n  byteOffset = defaultValue(byteOffset, 0);\n  length = defaultValue(\n    length,\n    (buffer.byteLength - byteOffset) /\n      ComponentDatatype.getSizeInBytes(componentDatatype)\n  );\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(buffer, byteOffset, length);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(buffer, byteOffset, length);\n    case ComponentDatatype.INT:\n      return new Int32Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(buffer, byteOffset, length);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(buffer, byteOffset, length);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(buffer, byteOffset, length);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the ComponentDatatype from its name.\n *\n * @param {String} name The name of the ComponentDatatype.\n * @returns {ComponentDatatype} The ComponentDatatype.\n *\n * @exception {DeveloperError} name is not a valid value.\n */\nComponentDatatype.fromName = function (name) {\n  switch (name) {\n    case \"BYTE\":\n      return ComponentDatatype.BYTE;\n    case \"UNSIGNED_BYTE\":\n      return ComponentDatatype.UNSIGNED_BYTE;\n    case \"SHORT\":\n      return ComponentDatatype.SHORT;\n    case \"UNSIGNED_SHORT\":\n      return ComponentDatatype.UNSIGNED_SHORT;\n    case \"INT\":\n      return ComponentDatatype.INT;\n    case \"UNSIGNED_INT\":\n      return ComponentDatatype.UNSIGNED_INT;\n    case \"FLOAT\":\n      return ComponentDatatype.FLOAT;\n    case \"DOUBLE\":\n      return ComponentDatatype.DOUBLE;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"name is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(ComponentDatatype);\n"],"names":["ComponentDatatype","BYTE","WebGLConstants","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","getSizeInBytes","componentDatatype","defined","DeveloperError","Int8Array","BYTES_PER_ELEMENT","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","fromTypedArray","array","validate","createTypedArray","valuesOrLength","createArrayBufferView","buffer","byteOffset","length","defaultValue","byteLength","fromName","name","Object","freeze"],"mappings":"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"}