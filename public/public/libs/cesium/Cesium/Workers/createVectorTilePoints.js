define(["./AttributeCompression-b7460594","./Matrix3-f3e9d70a","./Math-8e567554","./Matrix2-dd990207","./createTaskProcessorWorker","./ComponentDatatype-dd0b58d1","./defaultValue-040c41f9","./WebGLConstants-f7267ced","./RuntimeError-3c5db370"],(function(e,t,a,r,n,o,i,s,c){"use strict";const u=32767,p=new t.Cartographic,l=new t.Cartesian3,d=new r.Rectangle,f=new t.Ellipsoid,m={min:void 0,max:void 0};return n((function(n,o){const i=new Uint16Array(n.positions);!function(e){e=new Float64Array(e);let a=0;m.min=e[a++],m.max=e[a++],r.Rectangle.unpack(e,a,d),a+=r.Rectangle.packedLength,t.Ellipsoid.unpack(e,a,f)}(n.packedBuffer);const s=d,c=f,h=m.min,C=m.max,b=i.length/3,g=i.subarray(0,b),w=i.subarray(b,2*b),k=i.subarray(2*b,3*b);e.AttributeCompression.zigZagDeltaDecode(g,w,k);const y=new Float64Array(i.length);for(let e=0;e<b;++e){const r=g[e],n=w[e],o=k[e],i=a.CesiumMath.lerp(s.west,s.east,r/u),d=a.CesiumMath.lerp(s.south,s.north,n/u),f=a.CesiumMath.lerp(h,C,o/u),m=t.Cartographic.fromRadians(i,d,f,p),b=c.cartographicToCartesian(m,l);t.Cartesian3.pack(b,y,3*e)}return o.push(y.buffer),{positions:y.buffer}}))}));
