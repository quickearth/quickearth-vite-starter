{"version":3,"file":"createCoplanarPolygonOutlineGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonOutlineGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nfunction createGeometryFromPositions(positions) {\n  var length = positions.length;\n  var flatPositions = new Float64Array(length * 3);\n  var indices = IndexDatatype.createTypedArray(length, length * 2);\n\n  var positionIndex = 0;\n  var index = 0;\n\n  for (var i = 0; i < length; i++) {\n    var position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n  }\n\n  var attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    }),\n  });\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n  });\n}\n\n/**\n * A description of the outline of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n *\n * @see CoplanarPolygonOutlineGeometry.createGeometry\n *\n * @example\n * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 1000.0,\n *      -80.0, 30.0, 1000.0,\n *      -80.0, 30.0, 0.0\n *   ])\n * });\n * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\n */\nfunction CoplanarPolygonOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var polygonHierarchy = options.polygonHierarchy;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  this._polygonHierarchy = polygonHierarchy;\n  this._workerName = \"createCoplanarPolygonOutlineGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\n}\n\n/**\n * A description of a coplanar polygon outline from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @returns {CoplanarPolygonOutlineGeometry}\n */\nCoplanarPolygonOutlineGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  var newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n  };\n  return new CoplanarPolygonOutlineGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex\n  );\n\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nvar scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\n */\nCoplanarPolygonOutlineGeometry.unpack = function (\n  array,\n  startingIndex,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n  var packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonOutlineGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\n\n  var outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n  var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\n  if (!isValid) {\n    return undefined;\n  }\n\n  var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(\n    polygonHierarchy,\n    false\n  );\n\n  if (polygons.length === 0) {\n    return undefined;\n  }\n\n  var geometries = [];\n\n  for (var i = 0; i < polygons.length; i++) {\n    var geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPositions(polygons[i]),\n    });\n    geometries.push(geometryInstance);\n  }\n\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\n  var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\n\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonOutlineGeometry;\n","import CoplanarPolygonOutlineGeometry from \"../Core/CoplanarPolygonOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\n\nfunction createCoplanarPolygonOutlineGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = CoplanarPolygonOutlineGeometry.unpack(\n      polygonGeometry,\n      offset\n    );\n  }\n  polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\n  return CoplanarPolygonOutlineGeometry.createGeometry(polygonGeometry);\n}\nexport default createCoplanarPolygonOutlineGeometry;\n"],"names":["CoplanarPolygonOutlineGeometry","options","polygonHierarchy","defaultValue","EMPTY_OBJECT","Check","defined","this","_polygonHierarchy","_workerName","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","positions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","outerPositions","arrayRemoveDuplicates","Cartesian3","equalsEpsilon","length","CoplanarPolygonGeometryLibrary","validOutline","polygons","polygonOutlinesFromHierarchy","geometries","i","geometryInstance","GeometryInstance","geometry","flatPositions","Float64Array","indices","IndexDatatype","createTypedArray","positionIndex","index","position","x","y","z","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","Geometry","primitiveType","PrimitiveType","LINES","createGeometryFromPositions","push","GeometryPipeline","combineInstances","boundingSphere","BoundingSphere","fromPoints","offset","_ellipsoid","Ellipsoid","clone"],"mappings":"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"}