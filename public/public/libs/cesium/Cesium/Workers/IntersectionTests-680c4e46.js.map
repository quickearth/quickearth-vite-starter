{"version":3,"file":"IntersectionTests-680c4e46.js","sources":["../../../../Source/Core/QuadraticRealPolynomial.js","../../../../Source/Core/CubicRealPolynomial.js","../../../../Source/Core/QuarticRealPolynomial.js","../../../../Source/Core/Ray.js","../../../../Source/Core/IntersectionTests.js"],"sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\n *\n * @namespace QuadraticRealPolynomial\n */\nvar QuadraticRealPolynomial = {};\n\n/**\n * Provides the discriminant of the quadratic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 2nd order monomial.\n * @param {Number} b The coefficient of the 1st order monomial.\n * @param {Number} c The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\nQuadraticRealPolynomial.computeDiscriminant = function (a, b, c) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var discriminant = b * b - 4.0 * a * c;\n  return discriminant;\n};\n\nfunction addWithCancellationCheck(left, right, tolerance) {\n  var difference = left + right;\n  if (\n    CesiumMath.sign(left) !== CesiumMath.sign(right) &&\n    Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance\n  ) {\n    return 0.0;\n  }\n\n  return difference;\n}\n\n/**\n * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 2nd order monomial.\n * @param {Number} b The coefficient of the 1st order monomial.\n * @param {Number} c The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\nQuadraticRealPolynomial.computeRealRoots = function (a, b, c) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var ratio;\n  if (a === 0.0) {\n    if (b === 0.0) {\n      // Constant function: c = 0.\n      return [];\n    }\n\n    // Linear function: b * x + c = 0.\n    return [-c / b];\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      // 2nd order monomial: a * x^2 = 0.\n      return [0.0, 0.0];\n    }\n\n    var cMagnitude = Math.abs(c);\n    var aMagnitude = Math.abs(a);\n\n    if (\n      cMagnitude < aMagnitude &&\n      cMagnitude / aMagnitude < CesiumMath.EPSILON14\n    ) {\n      // c ~= 0.0.\n      // 2nd order monomial: a * x^2 = 0.\n      return [0.0, 0.0];\n    } else if (\n      cMagnitude > aMagnitude &&\n      aMagnitude / cMagnitude < CesiumMath.EPSILON14\n    ) {\n      // a ~= 0.0.\n      // Constant function: c = 0.\n      return [];\n    }\n\n    // a * x^2 + c = 0\n    ratio = -c / a;\n\n    if (ratio < 0.0) {\n      // Both roots are complex.\n      return [];\n    }\n\n    // Both roots are real.\n    var root = Math.sqrt(ratio);\n    return [-root, root];\n  } else if (c === 0.0) {\n    // a * x^2 + b * x = 0\n    ratio = -b / a;\n    if (ratio < 0.0) {\n      return [ratio, 0.0];\n    }\n\n    return [0.0, ratio];\n  }\n\n  // a * x^2 + b * x + c = 0\n  var b2 = b * b;\n  var four_ac = 4.0 * a * c;\n  var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\n\n  if (radicand < 0.0) {\n    // Both roots are complex.\n    return [];\n  }\n\n  var q =\n    -0.5 *\n    addWithCancellationCheck(\n      b,\n      CesiumMath.sign(b) * Math.sqrt(radicand),\n      CesiumMath.EPSILON14\n    );\n  if (b > 0.0) {\n    return [q / a, c / q];\n  }\n\n  return [c / q, q / a];\n};\nexport default QuadraticRealPolynomial;\n","import DeveloperError from \"./DeveloperError.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\n *\n * @namespace CubicRealPolynomial\n */\nvar CubicRealPolynomial = {};\n\n/**\n * Provides the discriminant of the cubic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 3rd order monomial.\n * @param {Number} b The coefficient of the 2nd order monomial.\n * @param {Number} c The coefficient of the 1st order monomial.\n * @param {Number} d The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var a2 = a * a;\n  var b2 = b * b;\n  var c2 = c * c;\n  var d2 = d * d;\n\n  var discriminant =\n    18.0 * a * b * c * d +\n    b2 * c2 -\n    27.0 * a2 * d2 -\n    4.0 * (a * c2 * c + b2 * b * d);\n  return discriminant;\n};\n\nfunction computeRealRoots(a, b, c, d) {\n  var A = a;\n  var B = b / 3.0;\n  var C = c / 3.0;\n  var D = d;\n\n  var AC = A * C;\n  var BD = B * D;\n  var B2 = B * B;\n  var C2 = C * C;\n  var delta1 = A * C - B2;\n  var delta2 = A * D - B * C;\n  var delta3 = B * D - C2;\n\n  var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\n  var temp;\n  var temp1;\n\n  if (discriminant < 0.0) {\n    var ABar;\n    var CBar;\n    var DBar;\n\n    if (B2 * BD >= AC * C2) {\n      ABar = A;\n      CBar = delta1;\n      DBar = -2.0 * B * delta1 + A * delta2;\n    } else {\n      ABar = D;\n      CBar = delta3;\n      DBar = -D * delta2 + 2.0 * C * delta3;\n    }\n\n    var s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\n    var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\n    temp1 = -DBar + temp0;\n\n    var x = temp1 / 2.0;\n    var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\n    var q = temp1 === temp0 ? -p : -CBar / p;\n\n    temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\n\n    if (B2 * BD >= AC * C2) {\n      return [(temp - B) / A];\n    }\n\n    return [-D / (temp + C)];\n  }\n\n  var CBarA = delta1;\n  var DBarA = -2.0 * B * delta1 + A * delta2;\n\n  var CBarD = delta3;\n  var DBarD = -D * delta2 + 2.0 * C * delta3;\n\n  var squareRootOfDiscriminant = Math.sqrt(discriminant);\n  var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\n\n  var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarA);\n  var cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n  var numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\n  var denominatorLarge = A;\n\n  var root1 = numeratorLarge / denominatorLarge;\n\n  theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\n  temp = 2.0 * Math.sqrt(-CBarD);\n  cosine = Math.cos(theta);\n  temp1 = temp * cosine;\n  temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\n\n  var numeratorSmall = -D;\n  var denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\n\n  var root3 = numeratorSmall / denominatorSmall;\n\n  var E = denominatorLarge * denominatorSmall;\n  var F =\n    -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\n  var G = numeratorLarge * numeratorSmall;\n\n  var root2 = (C * F - B * G) / (-B * F + C * E);\n\n  if (root1 <= root2) {\n    if (root1 <= root3) {\n      if (root2 <= root3) {\n        return [root1, root2, root3];\n      }\n      return [root1, root3, root2];\n    }\n    return [root3, root1, root2];\n  }\n  if (root1 <= root3) {\n    return [root2, root1, root3];\n  }\n  if (root2 <= root3) {\n    return [root2, root3, root1];\n  }\n  return [root3, root2, root1];\n}\n\n/**\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 3rd order monomial.\n * @param {Number} b The coefficient of the 2nd order monomial.\n * @param {Number} c The coefficient of the 1st order monomial.\n * @param {Number} d The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var roots;\n  var ratio;\n  if (a === 0.0) {\n    // Quadratic function: b * x^2 + c * x + d = 0.\n    return QuadraticRealPolynomial.computeRealRoots(b, c, d);\n  } else if (b === 0.0) {\n    if (c === 0.0) {\n      if (d === 0.0) {\n        // 3rd order monomial: a * x^3 = 0.\n        return [0.0, 0.0, 0.0];\n      }\n\n      // a * x^3 + d = 0\n      ratio = -d / a;\n      var root =\n        ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\n      return [root, root, root];\n    } else if (d === 0.0) {\n      // x * (a * x^2 + c) = 0.\n      roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\n\n      // Return the roots in ascending order.\n      if (roots.Length === 0) {\n        return [0.0];\n      }\n      return [roots[0], 0.0, roots[1]];\n    }\n\n    // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\n    return computeRealRoots(a, 0, c, d);\n  } else if (c === 0.0) {\n    if (d === 0.0) {\n      // x^2 * (a * x + b) = 0.\n      ratio = -b / a;\n      if (ratio < 0.0) {\n        return [ratio, 0.0, 0.0];\n      }\n      return [0.0, 0.0, ratio];\n    }\n    // a * x^3 + b * x^2 + d = 0.\n    return computeRealRoots(a, b, 0, d);\n  } else if (d === 0.0) {\n    // x * (a * x^2 + b * x + c) = 0\n    roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\n\n    // Return the roots in ascending order.\n    if (roots.length === 0) {\n      return [0.0];\n    } else if (roots[1] <= 0.0) {\n      return [roots[0], roots[1], 0.0];\n    } else if (roots[0] >= 0.0) {\n      return [0.0, roots[0], roots[1]];\n    }\n    return [roots[0], 0.0, roots[1]];\n  }\n\n  return computeRealRoots(a, b, c, d);\n};\nexport default CubicRealPolynomial;\n","import CubicRealPolynomial from \"./CubicRealPolynomial.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\n\n/**\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\n *\n * @namespace QuarticRealPolynomial\n */\nvar QuarticRealPolynomial = {};\n\n/**\n * Provides the discriminant of the quartic equation from the supplied coefficients.\n *\n * @param {Number} a The coefficient of the 4th order monomial.\n * @param {Number} b The coefficient of the 3rd order monomial.\n * @param {Number} c The coefficient of the 2nd order monomial.\n * @param {Number} d The coefficient of the 1st order monomial.\n * @param {Number} e The coefficient of the 0th order monomial.\n * @returns {Number} The value of the discriminant.\n */\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  var a2 = a * a;\n  var a3 = a2 * a;\n  var b2 = b * b;\n  var b3 = b2 * b;\n  var c2 = c * c;\n  var c3 = c2 * c;\n  var d2 = d * d;\n  var d3 = d2 * d;\n  var e2 = e * e;\n  var e3 = e2 * e;\n\n  var discriminant =\n    b2 * c2 * d2 -\n    4.0 * b3 * d3 -\n    4.0 * a * c3 * d2 +\n    18 * a * b * c * d3 -\n    27.0 * a2 * d2 * d2 +\n    256.0 * a3 * e3 +\n    e *\n      (18.0 * b3 * c * d -\n        4.0 * b2 * c3 +\n        16.0 * a * c2 * c2 -\n        80.0 * a * b * c2 * d -\n        6.0 * a * b2 * d2 +\n        144.0 * a2 * c * d2) +\n    e2 *\n      (144.0 * a * b2 * c -\n        27.0 * b2 * b2 -\n        128.0 * a2 * c2 -\n        192.0 * a2 * b * d);\n  return discriminant;\n};\n\nfunction original(a3, a2, a1, a0) {\n  var a3Squared = a3 * a3;\n\n  var p = a2 - (3.0 * a3Squared) / 8.0;\n  var q = a1 - (a2 * a3) / 2.0 + (a3Squared * a3) / 8.0;\n  var r =\n    a0 -\n    (a1 * a3) / 4.0 +\n    (a2 * a3Squared) / 16.0 -\n    (3.0 * a3Squared * a3Squared) / 256.0;\n\n  // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(\n    1.0,\n    2.0 * p,\n    p * p - 4.0 * r,\n    -q * q\n  );\n\n  if (cubicRoots.length > 0) {\n    var temp = -a3 / 4.0;\n\n    // Use the largest positive root.\n    var hSquared = cubicRoots[cubicRoots.length - 1];\n\n    if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\n      // y^4 + p y^2 + r = 0.\n      var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\n\n      if (roots.length === 2) {\n        var root0 = roots[0];\n        var root1 = roots[1];\n\n        var y;\n        if (root0 >= 0.0 && root1 >= 0.0) {\n          var y0 = Math.sqrt(root0);\n          var y1 = Math.sqrt(root1);\n\n          return [temp - y1, temp - y0, temp + y0, temp + y1];\n        } else if (root0 >= 0.0 && root1 < 0.0) {\n          y = Math.sqrt(root0);\n          return [temp - y, temp + y];\n        } else if (root0 < 0.0 && root1 >= 0.0) {\n          y = Math.sqrt(root1);\n          return [temp - y, temp + y];\n        }\n      }\n      return [];\n    } else if (hSquared > 0.0) {\n      var h = Math.sqrt(hSquared);\n\n      var m = (p + hSquared - q / h) / 2.0;\n      var n = (p + hSquared + q / h) / 2.0;\n\n      // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\n      var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\n      var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\n\n      if (roots1.length !== 0) {\n        roots1[0] += temp;\n        roots1[1] += temp;\n\n        if (roots2.length !== 0) {\n          roots2[0] += temp;\n          roots2[1] += temp;\n\n          if (roots1[1] <= roots2[0]) {\n            return [roots1[0], roots1[1], roots2[0], roots2[1]];\n          } else if (roots2[1] <= roots1[0]) {\n            return [roots2[0], roots2[1], roots1[0], roots1[1]];\n          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n            return [roots2[0], roots1[0], roots1[1], roots2[1]];\n          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n            return [roots1[0], roots2[0], roots2[1], roots1[1]];\n          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n            return [roots2[0], roots1[0], roots2[1], roots1[1]];\n          }\n          return [roots1[0], roots2[0], roots1[1], roots2[1]];\n        }\n        return roots1;\n      }\n\n      if (roots2.length !== 0) {\n        roots2[0] += temp;\n        roots2[1] += temp;\n\n        return roots2;\n      }\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction neumark(a3, a2, a1, a0) {\n  var a1Squared = a1 * a1;\n  var a2Squared = a2 * a2;\n  var a3Squared = a3 * a3;\n\n  var p = -2.0 * a2;\n  var q = a1 * a3 + a2Squared - 4.0 * a0;\n  var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\n\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\n\n  if (cubicRoots.length > 0) {\n    // Use the most positive root\n    var y = cubicRoots[0];\n\n    var temp = a2 - y;\n    var tempSquared = temp * temp;\n\n    var g1 = a3 / 2.0;\n    var h1 = temp / 2.0;\n\n    var m = tempSquared - 4.0 * a0;\n    var mError = tempSquared + 4.0 * Math.abs(a0);\n\n    var n = a3Squared - 4.0 * y;\n    var nError = a3Squared + 4.0 * Math.abs(y);\n\n    var g2;\n    var h2;\n\n    if (y < 0.0 || m * nError < n * mError) {\n      var squareRootOfN = Math.sqrt(n);\n      g2 = squareRootOfN / 2.0;\n      h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\n    } else {\n      var squareRootOfM = Math.sqrt(m);\n      g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\n      h2 = squareRootOfM / 2.0;\n    }\n\n    var G;\n    var g;\n    if (g1 === 0.0 && g2 === 0.0) {\n      G = 0.0;\n      g = 0.0;\n    } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\n      G = g1 + g2;\n      g = y / G;\n    } else {\n      g = g1 - g2;\n      G = y / g;\n    }\n\n    var H;\n    var h;\n    if (h1 === 0.0 && h2 === 0.0) {\n      H = 0.0;\n      h = 0.0;\n    } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\n      H = h1 + h2;\n      h = a0 / H;\n    } else {\n      h = h1 - h2;\n      H = a0 / h;\n    }\n\n    // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\n    var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\n    var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\n\n    if (roots1.length !== 0) {\n      if (roots2.length !== 0) {\n        if (roots1[1] <= roots2[0]) {\n          return [roots1[0], roots1[1], roots2[0], roots2[1]];\n        } else if (roots2[1] <= roots1[0]) {\n          return [roots2[0], roots2[1], roots1[0], roots1[1]];\n        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\n          return [roots2[0], roots1[0], roots1[1], roots2[1]];\n        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\n          return [roots1[0], roots2[0], roots2[1], roots1[1]];\n        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\n          return [roots2[0], roots1[0], roots2[1], roots1[1]];\n        }\n        return [roots1[0], roots2[0], roots1[1], roots2[1]];\n      }\n      return roots1;\n    }\n    if (roots2.length !== 0) {\n      return roots2;\n    }\n  }\n  return [];\n}\n\n/**\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\n *\n * @param {Number} a The coefficient of the 4th order monomial.\n * @param {Number} b The coefficient of the 3rd order monomial.\n * @param {Number} c The coefficient of the 2nd order monomial.\n * @param {Number} d The coefficient of the 1st order monomial.\n * @param {Number} e The coefficient of the 0th order monomial.\n * @returns {Number[]} The real valued roots.\n */\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof a !== \"number\") {\n    throw new DeveloperError(\"a is a required number.\");\n  }\n  if (typeof b !== \"number\") {\n    throw new DeveloperError(\"b is a required number.\");\n  }\n  if (typeof c !== \"number\") {\n    throw new DeveloperError(\"c is a required number.\");\n  }\n  if (typeof d !== \"number\") {\n    throw new DeveloperError(\"d is a required number.\");\n  }\n  if (typeof e !== \"number\") {\n    throw new DeveloperError(\"e is a required number.\");\n  }\n  //>>includeEnd('debug');\n\n  if (Math.abs(a) < CesiumMath.EPSILON15) {\n    return CubicRealPolynomial.computeRealRoots(b, c, d, e);\n  }\n  var a3 = b / a;\n  var a2 = c / a;\n  var a1 = d / a;\n  var a0 = e / a;\n\n  var k = a3 < 0.0 ? 1 : 0;\n  k += a2 < 0.0 ? k + 1 : k;\n  k += a1 < 0.0 ? k + 1 : k;\n  k += a0 < 0.0 ? k + 1 : k;\n\n  switch (k) {\n    case 0:\n      return original(a3, a2, a1, a0);\n    case 1:\n      return neumark(a3, a2, a1, a0);\n    case 2:\n      return neumark(a3, a2, a1, a0);\n    case 3:\n      return original(a3, a2, a1, a0);\n    case 4:\n      return original(a3, a2, a1, a0);\n    case 5:\n      return neumark(a3, a2, a1, a0);\n    case 6:\n      return original(a3, a2, a1, a0);\n    case 7:\n      return original(a3, a2, a1, a0);\n    case 8:\n      return neumark(a3, a2, a1, a0);\n    case 9:\n      return original(a3, a2, a1, a0);\n    case 10:\n      return original(a3, a2, a1, a0);\n    case 11:\n      return neumark(a3, a2, a1, a0);\n    case 12:\n      return original(a3, a2, a1, a0);\n    case 13:\n      return original(a3, a2, a1, a0);\n    case 14:\n      return original(a3, a2, a1, a0);\n    case 15:\n      return original(a3, a2, a1, a0);\n    default:\n      return undefined;\n  }\n};\nexport default QuarticRealPolynomial;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\n\n/**\n * Represents a ray that extends infinitely from the provided origin in the provided direction.\n * @alias Ray\n * @constructor\n *\n * @param {Cartesian3} [origin=Cartesian3.ZERO] The origin of the ray.\n * @param {Cartesian3} [direction=Cartesian3.ZERO] The direction of the ray.\n */\nfunction Ray(origin, direction) {\n  direction = Cartesian3.clone(defaultValue(direction, Cartesian3.ZERO));\n  if (!Cartesian3.equals(direction, Cartesian3.ZERO)) {\n    Cartesian3.normalize(direction, direction);\n  }\n\n  /**\n   * The origin of the ray.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.origin = Cartesian3.clone(defaultValue(origin, Cartesian3.ZERO));\n\n  /**\n   * The direction of the ray.\n   * @type {Cartesian3}\n   */\n  this.direction = direction;\n}\n\n/**\n * Duplicates a Ray instance.\n *\n * @param {Ray} ray The ray to duplicate.\n * @param {Ray} [result] The object onto which to store the result.\n * @returns {Ray} The modified result parameter or a new Ray instance if one was not provided. (Returns undefined if ray is undefined)\n */\nRay.clone = function (ray, result) {\n  if (!defined(ray)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Ray(ray.origin, ray.direction);\n  }\n  result.origin = Cartesian3.clone(ray.origin);\n  result.direction = Cartesian3.clone(ray.direction);\n  return result;\n};\n\n/**\n * Computes the point along the ray given by r(t) = o + t*d,\n * where o is the origin of the ray and d is the direction.\n *\n * @param {Ray} ray The ray.\n * @param {Number} t A scalar value.\n * @param {Cartesian3} [result] The object in which the result will be stored.\n * @returns {Cartesian3} The modified result parameter, or a new instance if none was provided.\n *\n * @example\n * //Get the first intersection point of a ray and an ellipsoid.\n * var intersection = Cesium.IntersectionTests.rayEllipsoid(ray, ellipsoid);\n * var point = Cesium.Ray.getPoint(ray, intersection.start);\n */\nRay.getPoint = function (ray, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"ray\", ray);\n  Check.typeOf.number(\"t\", t);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  result = Cartesian3.multiplyByScalar(ray.direction, t, result);\n  return Cartesian3.add(ray.origin, result, result);\n};\nexport default Ray;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Interval from \"./Interval.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\nimport QuarticRealPolynomial from \"./QuarticRealPolynomial.js\";\nimport Ray from \"./Ray.js\";\n\n/**\n * Functions for computing the intersection between geometries such as rays, planes, triangles, and ellipsoids.\n *\n * @namespace IntersectionTests\n */\nvar IntersectionTests = {};\n\n/**\n * Computes the intersection of a ray and a plane.\n *\n * @param {Ray} ray The ray.\n * @param {Plane} plane The plane.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\n */\nIntersectionTests.rayPlane = function (ray, plane, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(ray)) {\n    throw new DeveloperError(\"ray is required.\");\n  }\n  if (!defined(plane)) {\n    throw new DeveloperError(\"plane is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  var origin = ray.origin;\n  var direction = ray.direction;\n  var normal = plane.normal;\n  var denominator = Cartesian3.dot(normal, direction);\n\n  if (Math.abs(denominator) < CesiumMath.EPSILON15) {\n    // Ray is parallel to plane.  The ray may be in the polygon's plane.\n    return undefined;\n  }\n\n  var t = (-plane.distance - Cartesian3.dot(normal, origin)) / denominator;\n\n  if (t < 0) {\n    return undefined;\n  }\n\n  result = Cartesian3.multiplyByScalar(direction, t, result);\n  return Cartesian3.add(origin, result, result);\n};\n\nvar scratchEdge0 = new Cartesian3();\nvar scratchEdge1 = new Cartesian3();\nvar scratchPVec = new Cartesian3();\nvar scratchTVec = new Cartesian3();\nvar scratchQVec = new Cartesian3();\n\n/**\n * Computes the intersection of a ray and a triangle as a parametric distance along the input ray. The result is negative when the triangle is behind the ray.\n *\n * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\n * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\n *\n * @memberof IntersectionTests\n *\n * @param {Ray} ray The ray.\n * @param {Cartesian3} p0 The first vertex of the triangle.\n * @param {Cartesian3} p1 The second vertex of the triangle.\n * @param {Cartesian3} p2 The third vertex of the triangle.\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\n *                  and return undefined for intersections with the back face.\n * @returns {Number} The intersection as a parametric distance along the ray, or undefined if there is no intersection.\n */\nIntersectionTests.rayTriangleParametric = function (\n  ray,\n  p0,\n  p1,\n  p2,\n  cullBackFaces\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(ray)) {\n    throw new DeveloperError(\"ray is required.\");\n  }\n  if (!defined(p0)) {\n    throw new DeveloperError(\"p0 is required.\");\n  }\n  if (!defined(p1)) {\n    throw new DeveloperError(\"p1 is required.\");\n  }\n  if (!defined(p2)) {\n    throw new DeveloperError(\"p2 is required.\");\n  }\n  //>>includeEnd('debug');\n\n  cullBackFaces = defaultValue(cullBackFaces, false);\n\n  var origin = ray.origin;\n  var direction = ray.direction;\n\n  var edge0 = Cartesian3.subtract(p1, p0, scratchEdge0);\n  var edge1 = Cartesian3.subtract(p2, p0, scratchEdge1);\n\n  var p = Cartesian3.cross(direction, edge1, scratchPVec);\n  var det = Cartesian3.dot(edge0, p);\n\n  var tvec;\n  var q;\n\n  var u;\n  var v;\n  var t;\n\n  if (cullBackFaces) {\n    if (det < CesiumMath.EPSILON6) {\n      return undefined;\n    }\n\n    tvec = Cartesian3.subtract(origin, p0, scratchTVec);\n    u = Cartesian3.dot(tvec, p);\n    if (u < 0.0 || u > det) {\n      return undefined;\n    }\n\n    q = Cartesian3.cross(tvec, edge0, scratchQVec);\n\n    v = Cartesian3.dot(direction, q);\n    if (v < 0.0 || u + v > det) {\n      return undefined;\n    }\n\n    t = Cartesian3.dot(edge1, q) / det;\n  } else {\n    if (Math.abs(det) < CesiumMath.EPSILON6) {\n      return undefined;\n    }\n    var invDet = 1.0 / det;\n\n    tvec = Cartesian3.subtract(origin, p0, scratchTVec);\n    u = Cartesian3.dot(tvec, p) * invDet;\n    if (u < 0.0 || u > 1.0) {\n      return undefined;\n    }\n\n    q = Cartesian3.cross(tvec, edge0, scratchQVec);\n\n    v = Cartesian3.dot(direction, q) * invDet;\n    if (v < 0.0 || u + v > 1.0) {\n      return undefined;\n    }\n\n    t = Cartesian3.dot(edge1, q) * invDet;\n  }\n\n  return t;\n};\n\n/**\n * Computes the intersection of a ray and a triangle as a Cartesian3 coordinate.\n *\n * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\n * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\n *\n * @memberof IntersectionTests\n *\n * @param {Ray} ray The ray.\n * @param {Cartesian3} p0 The first vertex of the triangle.\n * @param {Cartesian3} p1 The second vertex of the triangle.\n * @param {Cartesian3} p2 The third vertex of the triangle.\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\n *                  and return undefined for intersections with the back face.\n * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\n */\nIntersectionTests.rayTriangle = function (\n  ray,\n  p0,\n  p1,\n  p2,\n  cullBackFaces,\n  result\n) {\n  var t = IntersectionTests.rayTriangleParametric(\n    ray,\n    p0,\n    p1,\n    p2,\n    cullBackFaces\n  );\n  if (!defined(t) || t < 0.0) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  Cartesian3.multiplyByScalar(ray.direction, t, result);\n  return Cartesian3.add(ray.origin, result, result);\n};\n\nvar scratchLineSegmentTriangleRay = new Ray();\n\n/**\n * Computes the intersection of a line segment and a triangle.\n * @memberof IntersectionTests\n *\n * @param {Cartesian3} v0 The an end point of the line segment.\n * @param {Cartesian3} v1 The other end point of the line segment.\n * @param {Cartesian3} p0 The first vertex of the triangle.\n * @param {Cartesian3} p1 The second vertex of the triangle.\n * @param {Cartesian3} p2 The third vertex of the triangle.\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\n *                  and return undefined for intersections with the back face.\n * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\n */\nIntersectionTests.lineSegmentTriangle = function (\n  v0,\n  v1,\n  p0,\n  p1,\n  p2,\n  cullBackFaces,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(v0)) {\n    throw new DeveloperError(\"v0 is required.\");\n  }\n  if (!defined(v1)) {\n    throw new DeveloperError(\"v1 is required.\");\n  }\n  if (!defined(p0)) {\n    throw new DeveloperError(\"p0 is required.\");\n  }\n  if (!defined(p1)) {\n    throw new DeveloperError(\"p1 is required.\");\n  }\n  if (!defined(p2)) {\n    throw new DeveloperError(\"p2 is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var ray = scratchLineSegmentTriangleRay;\n  Cartesian3.clone(v0, ray.origin);\n  Cartesian3.subtract(v1, v0, ray.direction);\n  Cartesian3.normalize(ray.direction, ray.direction);\n\n  var t = IntersectionTests.rayTriangleParametric(\n    ray,\n    p0,\n    p1,\n    p2,\n    cullBackFaces\n  );\n  if (!defined(t) || t < 0.0 || t > Cartesian3.distance(v0, v1)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  Cartesian3.multiplyByScalar(ray.direction, t, result);\n  return Cartesian3.add(ray.origin, result, result);\n};\n\nfunction solveQuadratic(a, b, c, result) {\n  var det = b * b - 4.0 * a * c;\n  if (det < 0.0) {\n    return undefined;\n  } else if (det > 0.0) {\n    var denom = 1.0 / (2.0 * a);\n    var disc = Math.sqrt(det);\n    var root0 = (-b + disc) * denom;\n    var root1 = (-b - disc) * denom;\n\n    if (root0 < root1) {\n      result.root0 = root0;\n      result.root1 = root1;\n    } else {\n      result.root0 = root1;\n      result.root1 = root0;\n    }\n\n    return result;\n  }\n\n  var root = -b / (2.0 * a);\n  if (root === 0.0) {\n    return undefined;\n  }\n\n  result.root0 = result.root1 = root;\n  return result;\n}\n\nvar raySphereRoots = {\n  root0: 0.0,\n  root1: 0.0,\n};\n\nfunction raySphere(ray, sphere, result) {\n  if (!defined(result)) {\n    result = new Interval();\n  }\n\n  var origin = ray.origin;\n  var direction = ray.direction;\n\n  var center = sphere.center;\n  var radiusSquared = sphere.radius * sphere.radius;\n\n  var diff = Cartesian3.subtract(origin, center, scratchPVec);\n\n  var a = Cartesian3.dot(direction, direction);\n  var b = 2.0 * Cartesian3.dot(direction, diff);\n  var c = Cartesian3.magnitudeSquared(diff) - radiusSquared;\n\n  var roots = solveQuadratic(a, b, c, raySphereRoots);\n  if (!defined(roots)) {\n    return undefined;\n  }\n\n  result.start = roots.root0;\n  result.stop = roots.root1;\n  return result;\n}\n\n/**\n * Computes the intersection points of a ray with a sphere.\n * @memberof IntersectionTests\n *\n * @param {Ray} ray The ray.\n * @param {BoundingSphere} sphere The sphere.\n * @param {Interval} [result] The result onto which to store the result.\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\n */\nIntersectionTests.raySphere = function (ray, sphere, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(ray)) {\n    throw new DeveloperError(\"ray is required.\");\n  }\n  if (!defined(sphere)) {\n    throw new DeveloperError(\"sphere is required.\");\n  }\n  //>>includeEnd('debug');\n\n  result = raySphere(ray, sphere, result);\n  if (!defined(result) || result.stop < 0.0) {\n    return undefined;\n  }\n\n  result.start = Math.max(result.start, 0.0);\n  return result;\n};\n\nvar scratchLineSegmentRay = new Ray();\n\n/**\n * Computes the intersection points of a line segment with a sphere.\n * @memberof IntersectionTests\n *\n * @param {Cartesian3} p0 An end point of the line segment.\n * @param {Cartesian3} p1 The other end point of the line segment.\n * @param {BoundingSphere} sphere The sphere.\n * @param {Interval} [result] The result onto which to store the result.\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\n */\nIntersectionTests.lineSegmentSphere = function (p0, p1, sphere, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(p0)) {\n    throw new DeveloperError(\"p0 is required.\");\n  }\n  if (!defined(p1)) {\n    throw new DeveloperError(\"p1 is required.\");\n  }\n  if (!defined(sphere)) {\n    throw new DeveloperError(\"sphere is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var ray = scratchLineSegmentRay;\n  Cartesian3.clone(p0, ray.origin);\n  var direction = Cartesian3.subtract(p1, p0, ray.direction);\n\n  var maxT = Cartesian3.magnitude(direction);\n  Cartesian3.normalize(direction, direction);\n\n  result = raySphere(ray, sphere, result);\n  if (!defined(result) || result.stop < 0.0 || result.start > maxT) {\n    return undefined;\n  }\n\n  result.start = Math.max(result.start, 0.0);\n  result.stop = Math.min(result.stop, maxT);\n  return result;\n};\n\nvar scratchQ = new Cartesian3();\nvar scratchW = new Cartesian3();\n\n/**\n * Computes the intersection points of a ray with an ellipsoid.\n *\n * @param {Ray} ray The ray.\n * @param {Ellipsoid} ellipsoid The ellipsoid.\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\n */\nIntersectionTests.rayEllipsoid = function (ray, ellipsoid) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(ray)) {\n    throw new DeveloperError(\"ray is required.\");\n  }\n  if (!defined(ellipsoid)) {\n    throw new DeveloperError(\"ellipsoid is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var inverseRadii = ellipsoid.oneOverRadii;\n  var q = Cartesian3.multiplyComponents(inverseRadii, ray.origin, scratchQ);\n  var w = Cartesian3.multiplyComponents(inverseRadii, ray.direction, scratchW);\n\n  var q2 = Cartesian3.magnitudeSquared(q);\n  var qw = Cartesian3.dot(q, w);\n\n  var difference, w2, product, discriminant, temp;\n\n  if (q2 > 1.0) {\n    // Outside ellipsoid.\n    if (qw >= 0.0) {\n      // Looking outward or tangent (0 intersections).\n      return undefined;\n    }\n\n    // qw < 0.0.\n    var qw2 = qw * qw;\n    difference = q2 - 1.0; // Positively valued.\n    w2 = Cartesian3.magnitudeSquared(w);\n    product = w2 * difference;\n\n    if (qw2 < product) {\n      // Imaginary roots (0 intersections).\n      return undefined;\n    } else if (qw2 > product) {\n      // Distinct roots (2 intersections).\n      discriminant = qw * qw - product;\n      temp = -qw + Math.sqrt(discriminant); // Avoid cancellation.\n      var root0 = temp / w2;\n      var root1 = difference / temp;\n      if (root0 < root1) {\n        return new Interval(root0, root1);\n      }\n\n      return {\n        start: root1,\n        stop: root0,\n      };\n    }\n    // qw2 == product.  Repeated roots (2 intersections).\n    var root = Math.sqrt(difference / w2);\n    return new Interval(root, root);\n  } else if (q2 < 1.0) {\n    // Inside ellipsoid (2 intersections).\n    difference = q2 - 1.0; // Negatively valued.\n    w2 = Cartesian3.magnitudeSquared(w);\n    product = w2 * difference; // Negatively valued.\n\n    discriminant = qw * qw - product;\n    temp = -qw + Math.sqrt(discriminant); // Positively valued.\n    return new Interval(0.0, temp / w2);\n  }\n  // q2 == 1.0. On ellipsoid.\n  if (qw < 0.0) {\n    // Looking inward.\n    w2 = Cartesian3.magnitudeSquared(w);\n    return new Interval(0.0, -qw / w2);\n  }\n\n  // qw >= 0.0.  Looking outward or tangent.\n  return undefined;\n};\n\nfunction addWithCancellationCheck(left, right, tolerance) {\n  var difference = left + right;\n  if (\n    CesiumMath.sign(left) !== CesiumMath.sign(right) &&\n    Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance\n  ) {\n    return 0.0;\n  }\n\n  return difference;\n}\n\nfunction quadraticVectorExpression(A, b, c, x, w) {\n  var xSquared = x * x;\n  var wSquared = w * w;\n\n  var l2 = (A[Matrix3.COLUMN1ROW1] - A[Matrix3.COLUMN2ROW2]) * wSquared;\n  var l1 =\n    w *\n    (x *\n      addWithCancellationCheck(\n        A[Matrix3.COLUMN1ROW0],\n        A[Matrix3.COLUMN0ROW1],\n        CesiumMath.EPSILON15\n      ) +\n      b.y);\n  var l0 =\n    A[Matrix3.COLUMN0ROW0] * xSquared +\n    A[Matrix3.COLUMN2ROW2] * wSquared +\n    x * b.x +\n    c;\n\n  var r1 =\n    wSquared *\n    addWithCancellationCheck(\n      A[Matrix3.COLUMN2ROW1],\n      A[Matrix3.COLUMN1ROW2],\n      CesiumMath.EPSILON15\n    );\n  var r0 =\n    w *\n    (x *\n      addWithCancellationCheck(A[Matrix3.COLUMN2ROW0], A[Matrix3.COLUMN0ROW2]) +\n      b.z);\n\n  var cosines;\n  var solutions = [];\n  if (r0 === 0.0 && r1 === 0.0) {\n    cosines = QuadraticRealPolynomial.computeRealRoots(l2, l1, l0);\n    if (cosines.length === 0) {\n      return solutions;\n    }\n\n    var cosine0 = cosines[0];\n    var sine0 = Math.sqrt(Math.max(1.0 - cosine0 * cosine0, 0.0));\n    solutions.push(new Cartesian3(x, w * cosine0, w * -sine0));\n    solutions.push(new Cartesian3(x, w * cosine0, w * sine0));\n\n    if (cosines.length === 2) {\n      var cosine1 = cosines[1];\n      var sine1 = Math.sqrt(Math.max(1.0 - cosine1 * cosine1, 0.0));\n      solutions.push(new Cartesian3(x, w * cosine1, w * -sine1));\n      solutions.push(new Cartesian3(x, w * cosine1, w * sine1));\n    }\n\n    return solutions;\n  }\n\n  var r0Squared = r0 * r0;\n  var r1Squared = r1 * r1;\n  var l2Squared = l2 * l2;\n  var r0r1 = r0 * r1;\n\n  var c4 = l2Squared + r1Squared;\n  var c3 = 2.0 * (l1 * l2 + r0r1);\n  var c2 = 2.0 * l0 * l2 + l1 * l1 - r1Squared + r0Squared;\n  var c1 = 2.0 * (l0 * l1 - r0r1);\n  var c0 = l0 * l0 - r0Squared;\n\n  if (c4 === 0.0 && c3 === 0.0 && c2 === 0.0 && c1 === 0.0) {\n    return solutions;\n  }\n\n  cosines = QuarticRealPolynomial.computeRealRoots(c4, c3, c2, c1, c0);\n  var length = cosines.length;\n  if (length === 0) {\n    return solutions;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var cosine = cosines[i];\n    var cosineSquared = cosine * cosine;\n    var sineSquared = Math.max(1.0 - cosineSquared, 0.0);\n    var sine = Math.sqrt(sineSquared);\n\n    //var left = l2 * cosineSquared + l1 * cosine + l0;\n    var left;\n    if (CesiumMath.sign(l2) === CesiumMath.sign(l0)) {\n      left = addWithCancellationCheck(\n        l2 * cosineSquared + l0,\n        l1 * cosine,\n        CesiumMath.EPSILON12\n      );\n    } else if (CesiumMath.sign(l0) === CesiumMath.sign(l1 * cosine)) {\n      left = addWithCancellationCheck(\n        l2 * cosineSquared,\n        l1 * cosine + l0,\n        CesiumMath.EPSILON12\n      );\n    } else {\n      left = addWithCancellationCheck(\n        l2 * cosineSquared + l1 * cosine,\n        l0,\n        CesiumMath.EPSILON12\n      );\n    }\n\n    var right = addWithCancellationCheck(r1 * cosine, r0, CesiumMath.EPSILON15);\n    var product = left * right;\n\n    if (product < 0.0) {\n      solutions.push(new Cartesian3(x, w * cosine, w * sine));\n    } else if (product > 0.0) {\n      solutions.push(new Cartesian3(x, w * cosine, w * -sine));\n    } else if (sine !== 0.0) {\n      solutions.push(new Cartesian3(x, w * cosine, w * -sine));\n      solutions.push(new Cartesian3(x, w * cosine, w * sine));\n      ++i;\n    } else {\n      solutions.push(new Cartesian3(x, w * cosine, w * sine));\n    }\n  }\n\n  return solutions;\n}\n\nvar firstAxisScratch = new Cartesian3();\nvar secondAxisScratch = new Cartesian3();\nvar thirdAxisScratch = new Cartesian3();\nvar referenceScratch = new Cartesian3();\nvar bCart = new Cartesian3();\nvar bScratch = new Matrix3();\nvar btScratch = new Matrix3();\nvar diScratch = new Matrix3();\nvar dScratch = new Matrix3();\nvar cScratch = new Matrix3();\nvar tempMatrix = new Matrix3();\nvar aScratch = new Matrix3();\nvar sScratch = new Cartesian3();\nvar closestScratch = new Cartesian3();\nvar surfPointScratch = new Cartographic();\n\n/**\n * Provides the point along the ray which is nearest to the ellipsoid.\n *\n * @param {Ray} ray The ray.\n * @param {Ellipsoid} ellipsoid The ellipsoid.\n * @returns {Cartesian3} The nearest planetodetic point on the ray.\n */\nIntersectionTests.grazingAltitudeLocation = function (ray, ellipsoid) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(ray)) {\n    throw new DeveloperError(\"ray is required.\");\n  }\n  if (!defined(ellipsoid)) {\n    throw new DeveloperError(\"ellipsoid is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var position = ray.origin;\n  var direction = ray.direction;\n\n  if (!Cartesian3.equals(position, Cartesian3.ZERO)) {\n    var normal = ellipsoid.geodeticSurfaceNormal(position, firstAxisScratch);\n    if (Cartesian3.dot(direction, normal) >= 0.0) {\n      // The location provided is the closest point in altitude\n      return position;\n    }\n  }\n\n  var intersects = defined(this.rayEllipsoid(ray, ellipsoid));\n\n  // Compute the scaled direction vector.\n  var f = ellipsoid.transformPositionToScaledSpace(direction, firstAxisScratch);\n\n  // Constructs a basis from the unit scaled direction vector. Construct its rotation and transpose.\n  var firstAxis = Cartesian3.normalize(f, f);\n  var reference = Cartesian3.mostOrthogonalAxis(f, referenceScratch);\n  var secondAxis = Cartesian3.normalize(\n    Cartesian3.cross(reference, firstAxis, secondAxisScratch),\n    secondAxisScratch\n  );\n  var thirdAxis = Cartesian3.normalize(\n    Cartesian3.cross(firstAxis, secondAxis, thirdAxisScratch),\n    thirdAxisScratch\n  );\n  var B = bScratch;\n  B[0] = firstAxis.x;\n  B[1] = firstAxis.y;\n  B[2] = firstAxis.z;\n  B[3] = secondAxis.x;\n  B[4] = secondAxis.y;\n  B[5] = secondAxis.z;\n  B[6] = thirdAxis.x;\n  B[7] = thirdAxis.y;\n  B[8] = thirdAxis.z;\n\n  var B_T = Matrix3.transpose(B, btScratch);\n\n  // Get the scaling matrix and its inverse.\n  var D_I = Matrix3.fromScale(ellipsoid.radii, diScratch);\n  var D = Matrix3.fromScale(ellipsoid.oneOverRadii, dScratch);\n\n  var C = cScratch;\n  C[0] = 0.0;\n  C[1] = -direction.z;\n  C[2] = direction.y;\n  C[3] = direction.z;\n  C[4] = 0.0;\n  C[5] = -direction.x;\n  C[6] = -direction.y;\n  C[7] = direction.x;\n  C[8] = 0.0;\n\n  var temp = Matrix3.multiply(\n    Matrix3.multiply(B_T, D, tempMatrix),\n    C,\n    tempMatrix\n  );\n  var A = Matrix3.multiply(Matrix3.multiply(temp, D_I, aScratch), B, aScratch);\n  var b = Matrix3.multiplyByVector(temp, position, bCart);\n\n  // Solve for the solutions to the expression in standard form:\n  var solutions = quadraticVectorExpression(\n    A,\n    Cartesian3.negate(b, firstAxisScratch),\n    0.0,\n    0.0,\n    1.0\n  );\n\n  var s;\n  var altitude;\n  var length = solutions.length;\n  if (length > 0) {\n    var closest = Cartesian3.clone(Cartesian3.ZERO, closestScratch);\n    var maximumValue = Number.NEGATIVE_INFINITY;\n\n    for (var i = 0; i < length; ++i) {\n      s = Matrix3.multiplyByVector(\n        D_I,\n        Matrix3.multiplyByVector(B, solutions[i], sScratch),\n        sScratch\n      );\n      var v = Cartesian3.normalize(\n        Cartesian3.subtract(s, position, referenceScratch),\n        referenceScratch\n      );\n      var dotProduct = Cartesian3.dot(v, direction);\n\n      if (dotProduct > maximumValue) {\n        maximumValue = dotProduct;\n        closest = Cartesian3.clone(s, closest);\n      }\n    }\n\n    var surfacePoint = ellipsoid.cartesianToCartographic(\n      closest,\n      surfPointScratch\n    );\n    maximumValue = CesiumMath.clamp(maximumValue, 0.0, 1.0);\n    altitude =\n      Cartesian3.magnitude(\n        Cartesian3.subtract(closest, position, referenceScratch)\n      ) * Math.sqrt(1.0 - maximumValue * maximumValue);\n    altitude = intersects ? -altitude : altitude;\n    surfacePoint.height = altitude;\n    return ellipsoid.cartographicToCartesian(surfacePoint, new Cartesian3());\n  }\n\n  return undefined;\n};\n\nvar lineSegmentPlaneDifference = new Cartesian3();\n\n/**\n * Computes the intersection of a line segment and a plane.\n *\n * @param {Cartesian3} endPoint0 An end point of the line segment.\n * @param {Cartesian3} endPoint1 The other end point of the line segment.\n * @param {Plane} plane The plane.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The intersection point or undefined if there is no intersection.\n *\n * @example\n * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n * var normal = ellipsoid.geodeticSurfaceNormal(origin);\n * var plane = Cesium.Plane.fromPointNormal(origin, normal);\n *\n * var p0 = new Cesium.Cartesian3(...);\n * var p1 = new Cesium.Cartesian3(...);\n *\n * // find the intersection of the line segment from p0 to p1 and the tangent plane at origin.\n * var intersection = Cesium.IntersectionTests.lineSegmentPlane(p0, p1, plane);\n */\nIntersectionTests.lineSegmentPlane = function (\n  endPoint0,\n  endPoint1,\n  plane,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(endPoint0)) {\n    throw new DeveloperError(\"endPoint0 is required.\");\n  }\n  if (!defined(endPoint1)) {\n    throw new DeveloperError(\"endPoint1 is required.\");\n  }\n  if (!defined(plane)) {\n    throw new DeveloperError(\"plane is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  var difference = Cartesian3.subtract(\n    endPoint1,\n    endPoint0,\n    lineSegmentPlaneDifference\n  );\n  var normal = plane.normal;\n  var nDotDiff = Cartesian3.dot(normal, difference);\n\n  // check if the segment and plane are parallel\n  if (Math.abs(nDotDiff) < CesiumMath.EPSILON6) {\n    return undefined;\n  }\n\n  var nDotP0 = Cartesian3.dot(normal, endPoint0);\n  var t = -(plane.distance + nDotP0) / nDotDiff;\n\n  // intersection only if t is in [0, 1]\n  if (t < 0.0 || t > 1.0) {\n    return undefined;\n  }\n\n  // intersection is endPoint0 + t * (endPoint1 - endPoint0)\n  Cartesian3.multiplyByScalar(difference, t, result);\n  Cartesian3.add(endPoint0, result, result);\n  return result;\n};\n\n/**\n * Computes the intersection of a triangle and a plane\n *\n * @param {Cartesian3} p0 First point of the triangle\n * @param {Cartesian3} p1 Second point of the triangle\n * @param {Cartesian3} p2 Third point of the triangle\n * @param {Plane} plane Intersection plane\n * @returns {Object} An object with properties <code>positions</code> and <code>indices</code>, which are arrays that represent three triangles that do not cross the plane. (Undefined if no intersection exists)\n *\n * @example\n * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\n * var normal = ellipsoid.geodeticSurfaceNormal(origin);\n * var plane = Cesium.Plane.fromPointNormal(origin, normal);\n *\n * var p0 = new Cesium.Cartesian3(...);\n * var p1 = new Cesium.Cartesian3(...);\n * var p2 = new Cesium.Cartesian3(...);\n *\n * // convert the triangle composed of points (p0, p1, p2) to three triangles that don't cross the plane\n * var triangles = Cesium.IntersectionTests.trianglePlaneIntersection(p0, p1, p2, plane);\n */\nIntersectionTests.trianglePlaneIntersection = function (p0, p1, p2, plane) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(p0) || !defined(p1) || !defined(p2) || !defined(plane)) {\n    throw new DeveloperError(\"p0, p1, p2, and plane are required.\");\n  }\n  //>>includeEnd('debug');\n\n  var planeNormal = plane.normal;\n  var planeD = plane.distance;\n  var p0Behind = Cartesian3.dot(planeNormal, p0) + planeD < 0.0;\n  var p1Behind = Cartesian3.dot(planeNormal, p1) + planeD < 0.0;\n  var p2Behind = Cartesian3.dot(planeNormal, p2) + planeD < 0.0;\n  // Given these dots products, the calls to lineSegmentPlaneIntersection\n  // always have defined results.\n\n  var numBehind = 0;\n  numBehind += p0Behind ? 1 : 0;\n  numBehind += p1Behind ? 1 : 0;\n  numBehind += p2Behind ? 1 : 0;\n\n  var u1, u2;\n  if (numBehind === 1 || numBehind === 2) {\n    u1 = new Cartesian3();\n    u2 = new Cartesian3();\n  }\n\n  if (numBehind === 1) {\n    if (p0Behind) {\n      IntersectionTests.lineSegmentPlane(p0, p1, plane, u1);\n      IntersectionTests.lineSegmentPlane(p0, p2, plane, u2);\n\n      return {\n        positions: [p0, p1, p2, u1, u2],\n        indices: [\n          // Behind\n          0,\n          3,\n          4,\n\n          // In front\n          1,\n          2,\n          4,\n          1,\n          4,\n          3,\n        ],\n      };\n    } else if (p1Behind) {\n      IntersectionTests.lineSegmentPlane(p1, p2, plane, u1);\n      IntersectionTests.lineSegmentPlane(p1, p0, plane, u2);\n\n      return {\n        positions: [p0, p1, p2, u1, u2],\n        indices: [\n          // Behind\n          1,\n          3,\n          4,\n\n          // In front\n          2,\n          0,\n          4,\n          2,\n          4,\n          3,\n        ],\n      };\n    } else if (p2Behind) {\n      IntersectionTests.lineSegmentPlane(p2, p0, plane, u1);\n      IntersectionTests.lineSegmentPlane(p2, p1, plane, u2);\n\n      return {\n        positions: [p0, p1, p2, u1, u2],\n        indices: [\n          // Behind\n          2,\n          3,\n          4,\n\n          // In front\n          0,\n          1,\n          4,\n          0,\n          4,\n          3,\n        ],\n      };\n    }\n  } else if (numBehind === 2) {\n    if (!p0Behind) {\n      IntersectionTests.lineSegmentPlane(p1, p0, plane, u1);\n      IntersectionTests.lineSegmentPlane(p2, p0, plane, u2);\n\n      return {\n        positions: [p0, p1, p2, u1, u2],\n        indices: [\n          // Behind\n          1,\n          2,\n          4,\n          1,\n          4,\n          3,\n\n          // In front\n          0,\n          3,\n          4,\n        ],\n      };\n    } else if (!p1Behind) {\n      IntersectionTests.lineSegmentPlane(p2, p1, plane, u1);\n      IntersectionTests.lineSegmentPlane(p0, p1, plane, u2);\n\n      return {\n        positions: [p0, p1, p2, u1, u2],\n        indices: [\n          // Behind\n          2,\n          0,\n          4,\n          2,\n          4,\n          3,\n\n          // In front\n          1,\n          3,\n          4,\n        ],\n      };\n    } else if (!p2Behind) {\n      IntersectionTests.lineSegmentPlane(p0, p2, plane, u1);\n      IntersectionTests.lineSegmentPlane(p1, p2, plane, u2);\n\n      return {\n        positions: [p0, p1, p2, u1, u2],\n        indices: [\n          // Behind\n          0,\n          1,\n          4,\n          0,\n          4,\n          3,\n\n          // In front\n          2,\n          3,\n          4,\n        ],\n      };\n    }\n  }\n\n  // if numBehind is 3, the triangle is completely behind the plane;\n  // otherwise, it is completely in front (numBehind is 0).\n  return undefined;\n};\nexport default IntersectionTests;\n"],"names":["QuadraticRealPolynomial","addWithCancellationCheck","left","right","tolerance","difference","CesiumMath","sign","Math","abs","max","computeDiscriminant","a","b","c","DeveloperError","computeRealRoots","cMagnitude","aMagnitude","EPSILON14","ratio","root","sqrt","radicand","q","CubicRealPolynomial","d","A","B","C","D","AC","BD","B2","C2","delta1","delta2","delta3","discriminant","DBar","CBar","ABar","temp0","x","temp1","p","pow","temp","CBarA","DBarA","CBarD","DBarD","squareRootOfDiscriminant","halfSquareRootOf3","theta","atan2","cosine","cos","temp3","sin","numeratorLarge","denominatorLarge","root1","numeratorSmall","denominatorSmall","root3","F","root2","b2","c2","roots","length","Length","QuarticRealPolynomial","original","a3","a2","a1","a0","a3Squared","r","cubicRoots","hSquared","root0","y0","y1","y","h","n","roots1","roots2","neumark","g2","squareRootOfM","G","g","tempSquared","g1","h1","m","mError","nError","h2","squareRootOfN","H","Ray","origin","direction","Cartesian3","clone","defaultValue","ZERO","equals","normalize","this","e","b3","c3","d2","d3","e2","EPSILON15","k","ray","result","defined","getPoint","t","Check","typeOf","object","number","multiplyByScalar","add","IntersectionTests","rayPlane","plane","normal","denominator","dot","distance","scratchEdge0","scratchEdge1","scratchPVec","scratchTVec","scratchQVec","rayTriangleParametric","p0","p1","p2","cullBackFaces","v","edge0","subtract","edge1","cross","det","EPSILON6","tvec","u","invDet","rayTriangle","scratchLineSegmentTriangleRay","lineSegmentTriangle","v0","v1","raySphereRoots","raySphere","sphere","Interval","center","radiusSquared","radius","diff","denom","disc","solveQuadratic","magnitudeSquared","start","stop","scratchLineSegmentRay","lineSegmentSphere","maxT","magnitude","min","scratchQ","scratchW","rayEllipsoid","ellipsoid","inverseRadii","oneOverRadii","multiplyComponents","w","q2","qw","w2","product","qw2","firstAxisScratch","secondAxisScratch","thirdAxisScratch","referenceScratch","bCart","bScratch","Matrix3","btScratch","diScratch","dScratch","cScratch","tempMatrix","aScratch","sScratch","closestScratch","surfPointScratch","Cartographic","grazingAltitudeLocation","position","geodeticSurfaceNormal","intersects","f","transformPositionToScaledSpace","firstAxis","reference","mostOrthogonalAxis","secondAxis","thirdAxis","z","B_T","transpose","D_I","fromScale","radii","multiply","multiplyByVector","solutions","xSquared","wSquared","l2","COLUMN1ROW1","COLUMN2ROW2","l1","COLUMN1ROW0","COLUMN0ROW1","l0","COLUMN0ROW0","r1","COLUMN2ROW1","COLUMN1ROW2","r0","COLUMN2ROW0","COLUMN0ROW2","cosines","cosine0","sine0","push","cosine1","sine1","c4","r1Squared","r0r1","r0Squared","c1","i","cosineSquared","sineSquared","sine","EPSILON12","quadraticVectorExpression","negate","closest","maximumValue","Number","NEGATIVE_INFINITY","s","dotProduct","surfacePoint","cartesianToCartographic","clamp","altitude","height","cartographicToCartesian","lineSegmentPlaneDifference","lineSegmentPlane","endPoint0","endPoint1","nDotDiff","nDotP0","trianglePlaneIntersection","u1","u2","planeNormal","planeD","p0Behind","p1Behind","p2Behind","numBehind","positions","indices"],"mappings":"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"}