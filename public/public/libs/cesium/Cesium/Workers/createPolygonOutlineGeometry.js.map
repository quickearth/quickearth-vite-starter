{"version":3,"file":"createPolygonOutlineGeometry.js","sources":["../../../../Source/Core/PolygonOutlineGeometry.js","../../../../Source/WorkersES6/createPolygonOutlineGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\nimport arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport WindingOrder from \"./WindingOrder.js\";\nvar createGeometryFromPositionsPositions = [];\nvar createGeometryFromPositionsSubdivided = [];\n\nfunction createGeometryFromPositions(\n  ellipsoid,\n  positions,\n  minDistance,\n  perPositionHeight,\n  arcType\n) {\n  var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n  var positions2D = tangentPlane.projectPointsOntoPlane(\n    positions,\n    createGeometryFromPositionsPositions\n  );\n\n  var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n  if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n    positions2D.reverse();\n    positions = positions.slice().reverse();\n  }\n\n  var subdividedPositions;\n  var i;\n\n  var length = positions.length;\n  var index = 0;\n\n  if (!perPositionHeight) {\n    var numVertices = 0;\n    if (arcType === ArcType.GEODESIC) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideLineCount(\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    } else if (arcType === ArcType.RHUMB) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(\n          ellipsoid,\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    }\n    subdividedPositions = new Float64Array(numVertices * 3);\n    for (i = 0; i < length; i++) {\n      var tempPositions;\n      if (arcType === ArcType.GEODESIC) {\n        tempPositions = PolygonGeometryLibrary.subdivideLine(\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance,\n          createGeometryFromPositionsSubdivided\n        );\n      } else if (arcType === ArcType.RHUMB) {\n        tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(\n          ellipsoid,\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance,\n          createGeometryFromPositionsSubdivided\n        );\n      }\n      var tempPositionsLength = tempPositions.length;\n      for (var j = 0; j < tempPositionsLength; ++j) {\n        subdividedPositions[index++] = tempPositions[j];\n      }\n    }\n  } else {\n    subdividedPositions = new Float64Array(length * 2 * 3);\n    for (i = 0; i < length; i++) {\n      var p0 = positions[i];\n      var p1 = positions[(i + 1) % length];\n      subdividedPositions[index++] = p0.x;\n      subdividedPositions[index++] = p0.y;\n      subdividedPositions[index++] = p0.z;\n      subdividedPositions[index++] = p1.x;\n      subdividedPositions[index++] = p1.y;\n      subdividedPositions[index++] = p1.z;\n    }\n  }\n\n  length = subdividedPositions.length / 3;\n  var indicesSize = length * 2;\n  var indices = IndexDatatype.createTypedArray(length, indicesSize);\n  index = 0;\n  for (i = 0; i < length - 1; i++) {\n    indices[index++] = i;\n    indices[index++] = i + 1;\n  }\n  indices[index++] = length - 1;\n  indices[index++] = 0;\n\n  return new GeometryInstance({\n    geometry: new Geometry({\n      attributes: new GeometryAttributes({\n        position: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.DOUBLE,\n          componentsPerAttribute: 3,\n          values: subdividedPositions,\n        }),\n      }),\n      indices: indices,\n      primitiveType: PrimitiveType.LINES,\n    }),\n  });\n}\n\nfunction createGeometryFromPositionsExtruded(\n  ellipsoid,\n  positions,\n  minDistance,\n  perPositionHeight,\n  arcType\n) {\n  var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n  var positions2D = tangentPlane.projectPointsOntoPlane(\n    positions,\n    createGeometryFromPositionsPositions\n  );\n\n  var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n  if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n    positions2D.reverse();\n    positions = positions.slice().reverse();\n  }\n\n  var subdividedPositions;\n  var i;\n\n  var length = positions.length;\n  var corners = new Array(length);\n  var index = 0;\n\n  if (!perPositionHeight) {\n    var numVertices = 0;\n    if (arcType === ArcType.GEODESIC) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideLineCount(\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    } else if (arcType === ArcType.RHUMB) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(\n          ellipsoid,\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    }\n\n    subdividedPositions = new Float64Array(numVertices * 3 * 2);\n    for (i = 0; i < length; ++i) {\n      corners[i] = index / 3;\n      var tempPositions;\n      if (arcType === ArcType.GEODESIC) {\n        tempPositions = PolygonGeometryLibrary.subdivideLine(\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance,\n          createGeometryFromPositionsSubdivided\n        );\n      } else if (arcType === ArcType.RHUMB) {\n        tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(\n          ellipsoid,\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance,\n          createGeometryFromPositionsSubdivided\n        );\n      }\n      var tempPositionsLength = tempPositions.length;\n      for (var j = 0; j < tempPositionsLength; ++j) {\n        subdividedPositions[index++] = tempPositions[j];\n      }\n    }\n  } else {\n    subdividedPositions = new Float64Array(length * 2 * 3 * 2);\n    for (i = 0; i < length; ++i) {\n      corners[i] = index / 3;\n      var p0 = positions[i];\n      var p1 = positions[(i + 1) % length];\n\n      subdividedPositions[index++] = p0.x;\n      subdividedPositions[index++] = p0.y;\n      subdividedPositions[index++] = p0.z;\n      subdividedPositions[index++] = p1.x;\n      subdividedPositions[index++] = p1.y;\n      subdividedPositions[index++] = p1.z;\n    }\n  }\n\n  length = subdividedPositions.length / (3 * 2);\n  var cornersLength = corners.length;\n\n  var indicesSize = (length * 2 + cornersLength) * 2;\n  var indices = IndexDatatype.createTypedArray(\n    length + cornersLength,\n    indicesSize\n  );\n\n  index = 0;\n  for (i = 0; i < length; ++i) {\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n    indices[index++] = i + length;\n    indices[index++] = ((i + 1) % length) + length;\n  }\n\n  for (i = 0; i < cornersLength; i++) {\n    var corner = corners[i];\n    indices[index++] = corner;\n    indices[index++] = corner + length;\n  }\n\n  return new GeometryInstance({\n    geometry: new Geometry({\n      attributes: new GeometryAttributes({\n        position: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.DOUBLE,\n          componentsPerAttribute: 3,\n          values: subdividedPositions,\n        }),\n      }),\n      indices: indices,\n      primitiveType: PrimitiveType.LINES,\n    }),\n  });\n}\n\n/**\n * A description of the outline of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy.\n *\n * @alias PolygonOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n *\n * @see PolygonOutlineGeometry#createGeometry\n * @see PolygonOutlineGeometry#fromPositions\n *\n * @example\n * // 1. create a polygon outline from points\n * var polygon = new Cesium.PolygonOutlineGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   )\n * });\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\n *\n * // 2. create a nested polygon with holes outline\n * var polygonWithHole = new Cesium.PolygonOutlineGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -109.0, 30.0,\n *       -95.0, 30.0,\n *       -95.0, 40.0,\n *       -109.0, 40.0\n *     ]),\n *     [new Cesium.PolygonHierarchy(\n *       Cesium.Cartesian3.fromDegreesArray([\n *         -107.0, 31.0,\n *         -107.0, 39.0,\n *         -97.0, 39.0,\n *         -97.0, 31.0\n *       ]),\n *       [new Cesium.PolygonHierarchy(\n *         Cesium.Cartesian3.fromDegreesArray([\n *           -105.0, 33.0,\n *           -99.0, 33.0,\n *           -99.0, 37.0,\n *           -105.0, 37.0\n *         ]),\n *         [new Cesium.PolygonHierarchy(\n *           Cesium.Cartesian3.fromDegreesArray([\n *             -103.0, 34.0,\n *             -101.0, 34.0,\n *             -101.0, 36.0,\n *             -103.0, 36.0\n *           ])\n *         )]\n *       )]\n *     )]\n *   )\n * });\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygonWithHole);\n *\n * // 3. create extruded polygon outline\n * var extrudedPolygon = new Cesium.PolygonOutlineGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   ),\n *   extrudedHeight: 300000\n * });\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(extrudedPolygon);\n */\nfunction PolygonOutlineGeometry(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n\n  if (options.perPositionHeight && defined(options.height)) {\n    throw new DeveloperError(\n      \"Cannot use both options.perPositionHeight and options.height\"\n    );\n  }\n  if (\n    defined(options.arcType) &&\n    options.arcType !== ArcType.GEODESIC &&\n    options.arcType !== ArcType.RHUMB\n  ) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var polygonHierarchy = options.polygonHierarchy;\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  var granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  var perPositionHeight = defaultValue(options.perPositionHeight, false);\n  var perPositionHeightExtrude =\n    perPositionHeight && defined(options.extrudedHeight);\n  var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n  var height = defaultValue(options.height, 0.0);\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  if (!perPositionHeightExtrude) {\n    var h = Math.max(height, extrudedHeight);\n    extrudedHeight = Math.min(height, extrudedHeight);\n    height = h;\n  }\n\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._granularity = granularity;\n  this._height = height;\n  this._extrudedHeight = extrudedHeight;\n  this._arcType = arcType;\n  this._polygonHierarchy = polygonHierarchy;\n  this._perPositionHeight = perPositionHeight;\n  this._perPositionHeightExtrude = perPositionHeightExtrude;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createPolygonOutlineGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\n    Ellipsoid.packedLength +\n    8;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolygonOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n  array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n  array[startingIndex++] = value._arcType;\n  array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar dummyOptions = {\n  polygonHierarchy: {},\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolygonOutlineGeometry} [result] The object into which to store the result.\n * @returns {PolygonOutlineGeometry} The modified result parameter or a new PolygonOutlineGeometry instance if one was not provided.\n */\nPolygonOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var height = array[startingIndex++];\n  var extrudedHeight = array[startingIndex++];\n  var granularity = array[startingIndex++];\n  var perPositionHeightExtrude = array[startingIndex++] === 1.0;\n  var perPositionHeight = array[startingIndex++] === 1.0;\n  var arcType = array[startingIndex++];\n  var offsetAttribute = array[startingIndex++];\n  var packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new PolygonOutlineGeometry(dummyOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._granularity = granularity;\n  result._perPositionHeight = perPositionHeight;\n  result._perPositionHeightExtrude = perPositionHeightExtrude;\n  result._arcType = arcType;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * A description of a polygon outline from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {Number} [options.height=0.0] The height of the polygon.\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link LinkType.GEODESIC} and {@link ArcType.RHUMB}.\n * @returns {PolygonOutlineGeometry}\n *\n *\n * @example\n * // create a polygon from points\n * var polygon = Cesium.PolygonOutlineGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\n *\n * @see PolygonOutlineGeometry#createGeometry\n */\nPolygonOutlineGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  var newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    ellipsoid: options.ellipsoid,\n    granularity: options.granularity,\n    perPositionHeight: options.perPositionHeight,\n    arcType: options.arcType,\n    offsetAttribute: options.offsetAttribute,\n  };\n  return new PolygonOutlineGeometry(newOptions);\n};\n\n/**\n * Computes the geometric representation of a polygon outline, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolygonOutlineGeometry} polygonGeometry A description of the polygon outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\n  var ellipsoid = polygonGeometry._ellipsoid;\n  var granularity = polygonGeometry._granularity;\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\n  var perPositionHeight = polygonGeometry._perPositionHeight;\n  var arcType = polygonGeometry._arcType;\n\n  var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(\n    polygonHierarchy,\n    !perPositionHeight,\n    ellipsoid\n  );\n\n  if (polygons.length === 0) {\n    return undefined;\n  }\n\n  var geometryInstance;\n  var geometries = [];\n  var minDistance = CesiumMath.chordLength(\n    granularity,\n    ellipsoid.maximumRadius\n  );\n\n  var height = polygonGeometry._height;\n  var extrudedHeight = polygonGeometry._extrudedHeight;\n  var extrude =\n    polygonGeometry._perPositionHeightExtrude ||\n    !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n  var offsetValue;\n  var i;\n  if (extrude) {\n    for (i = 0; i < polygons.length; i++) {\n      geometryInstance = createGeometryFromPositionsExtruded(\n        ellipsoid,\n        polygons[i],\n        minDistance,\n        perPositionHeight,\n        arcType\n      );\n      geometryInstance.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n        geometryInstance.geometry,\n        height,\n        extrudedHeight,\n        ellipsoid,\n        perPositionHeight\n      );\n      if (defined(polygonGeometry._offsetAttribute)) {\n        var size =\n          geometryInstance.geometry.attributes.position.values.length / 3;\n        var offsetAttribute = new Uint8Array(size);\n        if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\n          offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n        } else {\n          offsetValue =\n            polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n              ? 0\n              : 1;\n          offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n        }\n\n        geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\n          {\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute: 1,\n            values: offsetAttribute,\n          }\n        );\n      }\n      geometries.push(geometryInstance);\n    }\n  } else {\n    for (i = 0; i < polygons.length; i++) {\n      geometryInstance = createGeometryFromPositions(\n        ellipsoid,\n        polygons[i],\n        minDistance,\n        perPositionHeight,\n        arcType\n      );\n      geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n        geometryInstance.geometry.attributes.position.values,\n        height,\n        ellipsoid,\n        !perPositionHeight\n      );\n\n      if (defined(polygonGeometry._offsetAttribute)) {\n        var length =\n          geometryInstance.geometry.attributes.position.values.length;\n        var applyOffset = new Uint8Array(length / 3);\n        offsetValue =\n          polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n            ? 0\n            : 1;\n        arrayFill(applyOffset, offsetValue);\n        geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\n          {\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute: 1,\n            values: applyOffset,\n          }\n        );\n      }\n\n      geometries.push(geometryInstance);\n    }\n  }\n\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\n  var boundingSphere = BoundingSphere.fromVertices(\n    geometry.attributes.position.values\n  );\n\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n    offsetAttribute: polygonGeometry._offsetAttribute,\n  });\n};\nexport default PolygonOutlineGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolygonOutlineGeometry from \"../Core/PolygonOutlineGeometry.js\";\n\nfunction createPolygonOutlineGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = PolygonOutlineGeometry.unpack(polygonGeometry, offset);\n  }\n  polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\n  return PolygonOutlineGeometry.createGeometry(polygonGeometry);\n}\nexport default createPolygonOutlineGeometry;\n"],"names":["createGeometryFromPositionsPositions","createGeometryFromPositionsSubdivided","PolygonOutlineGeometry","options","Check","typeOf","object","polygonHierarchy","perPositionHeight","defined","height","DeveloperError","arcType","ArcType","GEODESIC","RHUMB","h","ellipsoid","defaultValue","Ellipsoid","WGS84","granularity","CesiumMath","RADIANS_PER_DEGREE","perPositionHeightExtrude","extrudedHeight","Math","max","min","this","_ellipsoid","clone","_granularity","_height","_extrudedHeight","_arcType","_polygonHierarchy","_perPositionHeight","_perPositionHeightExtrude","_offsetAttribute","offsetAttribute","_workerName","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","pack","value","array","startingIndex","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","dummyOptions","unpack","result","unpackPolygonHierarchy","undefined","fromPositions","EMPTY_OBJECT","positions","createGeometry","polygonGeometry","polygons","polygonOutlinesFromHierarchy","length","i","size","geometryInstance","applyOffset","offsetValue","geometries","minDistance","chordLength","maximumRadius","equalsEpsilon","EPSILON2","subdividedPositions","positions2D","EllipsoidTangentPlane","fromPoints","projectPointsOntoPlane","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","slice","corners","Array","index","Float64Array","p0","p1","x","y","z","tempPositions","numVertices","subdivideLineCount","subdivideRhumbLineCount","subdivideLine","subdivideRhumbLine","tempPositionsLength","j","cornersLength","indices","IndexDatatype","createTypedArray","corner","GeometryInstance","geometry","Geometry","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","primitiveType","PrimitiveType","LINES","createGeometryFromPositionsExtruded","scaleToGeodeticHeightExtruded","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","NONE","UNSIGNED_BYTE","push","createGeometryFromPositions","scaleToGeodeticHeight","GeometryPipeline","combineInstances","boundingSphere","BoundingSphere","fromVertices","offset"],"mappings":"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"}