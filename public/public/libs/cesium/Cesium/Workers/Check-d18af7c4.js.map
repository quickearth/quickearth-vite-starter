{"version":3,"file":"Check-d18af7c4.js","sources":["../../../../Source/Core/DeveloperError.js","../../../../Source/Core/Check.js"],"sourcesContent":["import defined from \"./defined.js\";\n\n/**\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n * argument out of range, etc.  This exception should only be thrown during development;\n * it usually indicates a bug in the calling code.  This exception should never be\n * caught; instead the calling code should strive not to generate it.\n * <br /><br />\n * On the other hand, a {@link RuntimeError} indicates an exception that may\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n * to catch.\n *\n * @alias DeveloperError\n * @constructor\n * @extends Error\n *\n * @param {String} [message] The error message for this exception.\n *\n * @see RuntimeError\n */\nfunction DeveloperError(message) {\n  /**\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n   * @type {String}\n   * @readonly\n   */\n  this.name = \"DeveloperError\";\n\n  /**\n   * The explanation for why this exception was thrown.\n   * @type {String}\n   * @readonly\n   */\n  this.message = message;\n\n  //Browsers such as IE don't have a stack property until you actually throw the error.\n  var stack;\n  try {\n    throw new Error();\n  } catch (e) {\n    stack = e.stack;\n  }\n\n  /**\n   * The stack trace of this exception, if available.\n   * @type {String}\n   * @readonly\n   */\n  this.stack = stack;\n}\n\nif (defined(Object.create)) {\n  DeveloperError.prototype = Object.create(Error.prototype);\n  DeveloperError.prototype.constructor = DeveloperError;\n}\n\nDeveloperError.prototype.toString = function () {\n  var str = this.name + \": \" + this.message;\n\n  if (defined(this.stack)) {\n    str += \"\\n\" + this.stack.toString();\n  }\n\n  return str;\n};\n\n/**\n * @private\n */\nDeveloperError.throwInstantiationError = function () {\n  throw new DeveloperError(\n    \"This function defines an interface and should not be called directly.\"\n  );\n};\nexport default DeveloperError;\n","import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Contains functions for checking that supplied arguments are of a specified type\n * or meet specified conditions\n * @private\n */\nvar Check = {};\n\n/**\n * Contains type checking functions, all using the typeof operator\n */\nCheck.typeOf = {};\n\nfunction getUndefinedErrorMessage(name) {\n  return name + \" is required, actual value was undefined\";\n}\n\nfunction getFailedTypeErrorMessage(actual, expected, name) {\n  return (\n    \"Expected \" +\n    name +\n    \" to be typeof \" +\n    expected +\n    \", actual typeof was \" +\n    actual\n  );\n}\n\n/**\n * Throws if test is not defined\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value that is to be checked\n * @exception {DeveloperError} test must be defined\n */\nCheck.defined = function (name, test) {\n  if (!defined(test)) {\n    throw new DeveloperError(getUndefinedErrorMessage(name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'function'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'function'\n */\nCheck.typeOf.func = function (name, test) {\n  if (typeof test !== \"function\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"function\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'string'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'string'\n */\nCheck.typeOf.string = function (name, test) {\n  if (typeof test !== \"string\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"string\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'number'\n */\nCheck.typeOf.number = function (name, test) {\n  if (typeof test !== \"number\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"number\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\n */\nCheck.typeOf.number.lessThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test >= limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be less than \" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n */\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test > limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be less than or equal to \" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n */\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test <= limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be greater than \" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n */\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test < limit) {\n    throw new DeveloperError(\n      \"Expected \" +\n        name +\n        \" to be greater than or equal to\" +\n        limit +\n        \", actual value was \" +\n        test\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'object'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'object'\n */\nCheck.typeOf.object = function (name, test) {\n  if (typeof test !== \"object\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"object\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'boolean'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'boolean'\n */\nCheck.typeOf.bool = function (name, test) {\n  if (typeof test !== \"boolean\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"boolean\", name)\n    );\n  }\n};\n\n/**\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\n *\n * @param {String} name1 The name of the first variable being tested\n * @param {String} name2 The name of the second variable being tested against\n * @param {*} test1 The value to test\n * @param {*} test2 The value to test against\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n */\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\n  Check.typeOf.number(name1, test1);\n  Check.typeOf.number(name2, test2);\n  if (test1 !== test2) {\n    throw new DeveloperError(\n      name1 +\n        \" must be equal to \" +\n        name2 +\n        \", the actual values are \" +\n        test1 +\n        \" and \" +\n        test2\n    );\n  }\n};\nexport default Check;\n"],"names":["DeveloperError","message","stack","this","name","Error","e","defined","Object","create","prototype","constructor","toString","str","throwInstantiationError","Check","getFailedTypeErrorMessage","actual","expected","typeOf","test","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","equals","name1","name2","test1","test2"],"mappings":"gEAoBA,SAASA,EAAeC,GAgBtB,IAAIC,EAVJC,KAAKC,KAAO,iBAOZD,KAAKF,QAAUA,EAIf,IACE,MAAM,IAAII,MACV,MAAOC,GACPJ,EAAQI,EAAEJ,MAQZC,KAAKD,MAAQA,EAGXK,UAAQC,OAAOC,WACjBT,EAAeU,UAAYF,OAAOC,OAAOJ,MAAMK,YACtBC,YAAcX,GAGzCA,EAAeU,UAAUE,SAAW,WAClC,IAAIC,EAAMV,KAAKC,KAAO,KAAOD,KAAKF,QAMlC,OAJIM,UAAQJ,KAAKD,SACfW,GAAO,KAAOV,KAAKD,MAAMU,YAGpBC,GAMTb,EAAec,wBAA0B,WACvC,MAAM,IAAId,EACR,8EC/DAe,EAAQ,GAWZ,SAASC,EAA0BC,EAAQC,EAAUd,GACnD,MACE,YACAA,EACA,iBACAc,EACA,uBACAD,EAbJF,EAAMI,OAAS,GAwBfJ,EAAMR,QAAU,SAAUH,EAAMgB,GAC9B,IAAKb,UAAQa,GACX,MAAM,IAAIpB,EAAwCI,EAvBtC,6CAkChBW,EAAMI,OAAOE,KAAO,SAAUjB,EAAMgB,GAClC,GAAoB,mBAATA,EACT,MAAM,IAAIpB,EACRgB,SAAiCI,EAAM,WAAYhB,KAYzDW,EAAMI,OAAOG,OAAS,SAAUlB,EAAMgB,GACpC,GAAoB,iBAATA,EACT,MAAM,IAAIpB,EACRgB,SAAiCI,EAAM,SAAUhB,KAYvDW,EAAMI,OAAOI,OAAS,SAAUnB,EAAMgB,GACpC,GAAoB,iBAATA,EACT,MAAM,IAAIpB,EACRgB,SAAiCI,EAAM,SAAUhB,KAavDW,EAAMI,OAAOI,OAAOC,SAAW,SAAUpB,EAAMgB,EAAMK,GAEnD,GADAV,EAAMI,OAAOI,OAAOnB,EAAMgB,GACdK,GAARL,EACF,MAAM,IAAIpB,EACR,YACEI,EACA,oBACAqB,EACA,sBACAL,IAaRL,EAAMI,OAAOI,OAAOG,iBAAmB,SAAUtB,EAAMgB,EAAMK,GAE3D,GADAV,EAAMI,OAAOI,OAAOnB,EAAMgB,GACfK,EAAPL,EACF,MAAM,IAAIpB,EACR,YACEI,EACA,gCACAqB,EACA,sBACAL,IAaRL,EAAMI,OAAOI,OAAOI,YAAc,SAAUvB,EAAMgB,EAAMK,GAEtD,GADAV,EAAMI,OAAOI,OAAOnB,EAAMgB,GACtBA,GAAQK,EACV,MAAM,IAAIzB,EACR,YACEI,EACA,uBACAqB,EACA,sBACAL,IAaRL,EAAMI,OAAOI,OAAOK,oBAAsB,SAAUxB,EAAMgB,EAAMK,GAE9D,GADAV,EAAMI,OAAOI,OAAOnB,EAAMgB,GACtBA,EAAOK,EACT,MAAM,IAAIzB,EACR,YACEI,EACA,kCACAqB,EACA,sBACAL,IAYRL,EAAMI,OAAOU,OAAS,SAAUzB,EAAMgB,GACpC,GAAoB,iBAATA,EACT,MAAM,IAAIpB,EACRgB,SAAiCI,EAAM,SAAUhB,KAYvDW,EAAMI,OAAOW,KAAO,SAAU1B,EAAMgB,GAClC,GAAoB,kBAATA,EACT,MAAM,IAAIpB,EACRgB,SAAiCI,EAAM,UAAWhB,KAcxDW,EAAMI,OAAOI,OAAOQ,OAAS,SAAUC,EAAOC,EAAOC,EAAOC,GAG1D,GAFApB,EAAMI,OAAOI,OAAOS,EAAOE,GAC3BnB,EAAMI,OAAOI,OAAOU,EAAOE,GACvBD,IAAUC,EACZ,MAAM,IAAInC,EACRgC,EACE,qBACAC,EACA,2BACAC,EACA,QACAC"}